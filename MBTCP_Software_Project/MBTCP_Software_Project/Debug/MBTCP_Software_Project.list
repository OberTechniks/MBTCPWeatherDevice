
MBTCP_Software_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000152c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080015ec  080015ec  000115ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001608  08001608  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001608  08001608  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001608  08001608  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001608  08001608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800160c  0800160c  0001160c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001614  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001614  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e7f  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c6f  00000000  00000000  00022eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000390  00000000  00000000  00023b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  00023eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012544  00000000  00000000  000241b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003d4d  00000000  00000000  000366fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000722a1  00000000  00000000  0003a449  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac6ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af0  00000000  00000000  000ac768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080015d4 	.word	0x080015d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080015d4 	.word	0x080015d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f94c 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f868 	bl	8000300 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <main+0x3c>)
 8000232:	2120      	movs	r1, #32
 8000234:	0018      	movs	r0, r3
 8000236:	f000 fc10 	bl	8000a5a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800023a:	23fa      	movs	r3, #250	; 0xfa
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	0018      	movs	r0, r3
 8000240:	f000 f99e 	bl	8000580 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x3c>)
 8000246:	2120      	movs	r1, #32
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fc06 	bl	8000a5a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800024e:	23fa      	movs	r3, #250	; 0xfa
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f994 	bl	8000580 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000258:	e7ea      	b.n	8000230 <main+0x10>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	50000400 	.word	0x50000400

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b095      	sub	sp, #84	; 0x54
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2418      	movs	r4, #24
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2338      	movs	r3, #56	; 0x38
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f001 f9a7 	bl	80015c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f001 f9a0 	bl	80015c4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000284:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <SystemClock_Config+0x98>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1c      	ldr	r2, [pc, #112]	; (80002fc <SystemClock_Config+0x9c>)
 800028a:	401a      	ands	r2, r3
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <SystemClock_Config+0x98>)
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	0109      	lsls	r1, r1, #4
 8000292:	430a      	orrs	r2, r1
 8000294:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	0021      	movs	r1, r4
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2202      	movs	r2, #2
 800029c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2201      	movs	r2, #1
 80002a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2210      	movs	r2, #16
 80002a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2200      	movs	r2, #0
 80002ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fbe4 	bl	8000a80 <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80002bc:	f000 f864 	bl	8000388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	220f      	movs	r2, #15
 80002c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2201      	movs	r2, #1
 80002ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 ff9c 	bl	8001220 <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002ec:	f000 f84c 	bl	8000388 <Error_Handler>
  }
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b015      	add	sp, #84	; 0x54
 80002f6:	bd90      	pop	{r4, r7, pc}
 80002f8:	40007000 	.word	0x40007000
 80002fc:	ffffe7ff 	.word	0xffffe7ff

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	240c      	movs	r4, #12
 8000308:	193b      	adds	r3, r7, r4
 800030a:	0018      	movs	r0, r3
 800030c:	2314      	movs	r3, #20
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f001 f957 	bl	80015c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_GPIO_Init+0x80>)
 8000318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0x80>)
 800031c:	2101      	movs	r1, #1
 800031e:	430a      	orrs	r2, r1
 8000320:	62da      	str	r2, [r3, #44]	; 0x2c
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <MX_GPIO_Init+0x80>)
 8000324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000326:	2201      	movs	r2, #1
 8000328:	4013      	ands	r3, r2
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_GPIO_Init+0x80>)
 8000330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_GPIO_Init+0x80>)
 8000334:	2102      	movs	r1, #2
 8000336:	430a      	orrs	r2, r1
 8000338:	62da      	str	r2, [r3, #44]	; 0x2c
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_GPIO_Init+0x80>)
 800033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033e:	2202      	movs	r2, #2
 8000340:	4013      	ands	r3, r2
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_GPIO_Init+0x84>)
 8000348:	2200      	movs	r2, #0
 800034a:	2120      	movs	r1, #32
 800034c:	0018      	movs	r0, r3
 800034e:	f000 fb67 	bl	8000a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000352:	0021      	movs	r1, r4
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2220      	movs	r2, #32
 8000358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2201      	movs	r2, #1
 800035e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036c:	187b      	adds	r3, r7, r1
 800036e:	4a05      	ldr	r2, [pc, #20]	; (8000384 <MX_GPIO_Init+0x84>)
 8000370:	0019      	movs	r1, r3
 8000372:	0010      	movs	r0, r2
 8000374:	f000 f9d6 	bl	8000724 <HAL_GPIO_Init>

}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b009      	add	sp, #36	; 0x24
 800037e:	bd90      	pop	{r4, r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	50000400 	.word	0x50000400

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <HAL_MspInit+0x24>)
 800039a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <HAL_MspInit+0x24>)
 800039e:	2101      	movs	r1, #1
 80003a0:	430a      	orrs	r2, r1
 80003a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <HAL_MspInit+0x24>)
 80003a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <HAL_MspInit+0x24>)
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	0549      	lsls	r1, r1, #21
 80003ae:	430a      	orrs	r2, r1
 80003b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40021000 	.word	0x40021000

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <HardFault_Handler+0x4>

080003cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e4:	f000 f8b6 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <SystemInit+0x64>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <SystemInit+0x64>)
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	0049      	lsls	r1, r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <SystemInit+0x64>)
 8000404:	68da      	ldr	r2, [r3, #12]
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <SystemInit+0x64>)
 8000408:	4913      	ldr	r1, [pc, #76]	; (8000458 <SystemInit+0x68>)
 800040a:	400a      	ands	r2, r1
 800040c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <SystemInit+0x64>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <SystemInit+0x64>)
 8000414:	4911      	ldr	r1, [pc, #68]	; (800045c <SystemInit+0x6c>)
 8000416:	400a      	ands	r2, r1
 8000418:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <SystemInit+0x64>)
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <SystemInit+0x64>)
 8000420:	2101      	movs	r1, #1
 8000422:	438a      	bics	r2, r1
 8000424:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <SystemInit+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <SystemInit+0x64>)
 800042c:	490c      	ldr	r1, [pc, #48]	; (8000460 <SystemInit+0x70>)
 800042e:	400a      	ands	r2, r1
 8000430:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <SystemInit+0x64>)
 8000434:	68da      	ldr	r2, [r3, #12]
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <SystemInit+0x64>)
 8000438:	490a      	ldr	r1, [pc, #40]	; (8000464 <SystemInit+0x74>)
 800043a:	400a      	ands	r2, r1
 800043c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <SystemInit+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <SystemInit+0x78>)
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	0512      	lsls	r2, r2, #20
 800044a:	609a      	str	r2, [r3, #8]
#endif
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	40021000 	.word	0x40021000
 8000458:	88ff400c 	.word	0x88ff400c
 800045c:	fef6fff6 	.word	0xfef6fff6
 8000460:	fffbffff 	.word	0xfffbffff
 8000464:	ff02ffff 	.word	0xff02ffff
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800046e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000470:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000472:	e003      	b.n	800047c <LoopCopyDataInit>

08000474 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000476:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000478:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800047a:	3104      	adds	r1, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <LoopForever+0xa>)
  ldr  r3, =_edata
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000480:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000482:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000484:	d3f6      	bcc.n	8000474 <CopyDataInit>
  ldr  r2, =_sbss
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000488:	e002      	b.n	8000490 <LoopFillZerobss>

0800048a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800048a:	2300      	movs	r3, #0
  str  r3, [r2]
 800048c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048e:	3204      	adds	r2, #4

08000490 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <LoopForever+0x16>)
  cmp  r2, r3
 8000492:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000494:	d3f9      	bcc.n	800048a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000496:	f7ff ffab 	bl	80003f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800049a:	f001 f86f 	bl	800157c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049e:	f7ff febf 	bl	8000220 <main>

080004a2 <LoopForever>:

LoopForever:
    b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
   ldr   r0, =_estack
 80004a4:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80004a8:	08001610 	.word	0x08001610
  ldr  r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004b0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80004b4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80004b8:	20000024 	.word	0x20000024

080004bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC1_COMP_IRQHandler>
	...

080004c0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <HAL_Init+0x3c>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <HAL_Init+0x3c>)
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	430a      	orrs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f811 	bl	8000500 <HAL_InitTick>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d003      	beq.n	80004ea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f7ff ff53 	bl	8000394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40022000 	.word	0x40022000

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_InitTick+0x50>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	23fa      	movs	r3, #250	; 0xfa
 8000516:	0099      	lsls	r1, r3, #2
 8000518:	0010      	movs	r0, r2
 800051a:	f7ff fdf5 	bl	8000108 <__udivsi3>
 800051e:	0003      	movs	r3, r0
 8000520:	0018      	movs	r0, r3
 8000522:	f000 f8f2 	bl	800070a <HAL_SYSTICK_Config>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d004      	beq.n	8000534 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800052a:	230f      	movs	r3, #15
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e006      	b.n	8000542 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	425b      	negs	r3, r3
 800053a:	2200      	movs	r2, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f000 f8cf 	bl	80006e0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000542:	230f      	movs	r3, #15
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	781b      	ldrb	r3, [r3, #0]
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b004      	add	sp, #16
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  uwTick++;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_IncTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	4b02      	ldr	r3, [pc, #8]	; (8000568 <HAL_IncTick+0x14>)
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000020 	.word	0x20000020

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <HAL_GetTick+0x10>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	20000020 	.word	0x20000020

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff fff0 	bl	800056c <HAL_GetTick>
 800058c:	0003      	movs	r3, r0
 800058e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	d002      	beq.n	80005a0 <HAL_Delay+0x20>
  {
    wait++;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	f7ff ffe3 	bl	800056c <HAL_GetTick>
 80005a6:	0002      	movs	r2, r0
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d8f7      	bhi.n	80005a2 <HAL_Delay+0x22>
  {
  }
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b004      	add	sp, #16
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	0002      	movs	r2, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	1dfb      	adds	r3, r7, #7
 80005c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b7f      	cmp	r3, #127	; 0x7f
 80005d0:	d932      	bls.n	8000638 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005d2:	4a2f      	ldr	r2, [pc, #188]	; (8000690 <NVIC_SetPriority+0xd4>)
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0019      	movs	r1, r3
 80005da:	230f      	movs	r3, #15
 80005dc:	400b      	ands	r3, r1
 80005de:	3b08      	subs	r3, #8
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3306      	adds	r3, #6
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	18d3      	adds	r3, r2, r3
 80005e8:	3304      	adds	r3, #4
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1dfa      	adds	r2, r7, #7
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	0011      	movs	r1, r2
 80005f2:	2203      	movs	r2, #3
 80005f4:	400a      	ands	r2, r1
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	21ff      	movs	r1, #255	; 0xff
 80005fa:	4091      	lsls	r1, r2
 80005fc:	000a      	movs	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	2303      	movs	r3, #3
 8000614:	4003      	ands	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061a:	481d      	ldr	r0, [pc, #116]	; (8000690 <NVIC_SetPriority+0xd4>)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	001c      	movs	r4, r3
 8000622:	230f      	movs	r3, #15
 8000624:	4023      	ands	r3, r4
 8000626:	3b08      	subs	r3, #8
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	430a      	orrs	r2, r1
 800062c:	3306      	adds	r3, #6
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	18c3      	adds	r3, r0, r3
 8000632:	3304      	adds	r3, #4
 8000634:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000636:	e027      	b.n	8000688 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000638:	4a16      	ldr	r2, [pc, #88]	; (8000694 <NVIC_SetPriority+0xd8>)
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	33c0      	adds	r3, #192	; 0xc0
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	589b      	ldr	r3, [r3, r2]
 8000648:	1dfa      	adds	r2, r7, #7
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	0011      	movs	r1, r2
 800064e:	2203      	movs	r2, #3
 8000650:	400a      	ands	r2, r1
 8000652:	00d2      	lsls	r2, r2, #3
 8000654:	21ff      	movs	r1, #255	; 0xff
 8000656:	4091      	lsls	r1, r2
 8000658:	000a      	movs	r2, r1
 800065a:	43d2      	mvns	r2, r2
 800065c:	401a      	ands	r2, r3
 800065e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	019b      	lsls	r3, r3, #6
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	401a      	ands	r2, r3
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	0018      	movs	r0, r3
 800066e:	2303      	movs	r3, #3
 8000670:	4003      	ands	r3, r0
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <NVIC_SetPriority+0xd8>)
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	430a      	orrs	r2, r1
 8000682:	33c0      	adds	r3, #192	; 0xc0
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	501a      	str	r2, [r3, r0]
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b003      	add	sp, #12
 800068e:	bd90      	pop	{r4, r7, pc}
 8000690:	e000ed00 	.word	0xe000ed00
 8000694:	e000e100 	.word	0xe000e100

08000698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <SysTick_Config+0x40>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d901      	bls.n	80006ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006aa:	2301      	movs	r3, #1
 80006ac:	e010      	b.n	80006d0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <SysTick_Config+0x44>)
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	3a01      	subs	r2, #1
 80006b4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006b6:	2301      	movs	r3, #1
 80006b8:	425b      	negs	r3, r3
 80006ba:	2103      	movs	r1, #3
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ff7d 	bl	80005bc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SysTick_Config+0x44>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SysTick_Config+0x44>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	00ffffff 	.word	0x00ffffff
 80006dc:	e000e010 	.word	0xe000e010

080006e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	210f      	movs	r1, #15
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	1c02      	adds	r2, r0, #0
 80006f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ff5d 	bl	80005bc <NVIC_SetPriority>
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b004      	add	sp, #16
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ffbf 	bl	8000698 <SysTick_Config>
 800071a:	0003      	movs	r3, r0
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800073a:	e155      	b.n	80009e8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2101      	movs	r1, #1
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4091      	lsls	r1, r2
 8000746:	000a      	movs	r2, r1
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d100      	bne.n	8000754 <HAL_GPIO_Init+0x30>
 8000752:	e146      	b.n	80009e2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d003      	beq.n	8000764 <HAL_GPIO_Init+0x40>
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	2b12      	cmp	r3, #18
 8000762:	d123      	bne.n	80007ac <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	08da      	lsrs	r2, r3, #3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3208      	adds	r2, #8
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	58d3      	ldr	r3, [r2, r3]
 8000770:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	2207      	movs	r2, #7
 8000776:	4013      	ands	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	220f      	movs	r2, #15
 800077c:	409a      	lsls	r2, r3
 800077e:	0013      	movs	r3, r2
 8000780:	43da      	mvns	r2, r3
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	4013      	ands	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	691a      	ldr	r2, [r3, #16]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2107      	movs	r1, #7
 8000790:	400b      	ands	r3, r1
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	409a      	lsls	r2, r3
 8000796:	0013      	movs	r3, r2
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4313      	orrs	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	08da      	lsrs	r2, r3, #3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3208      	adds	r2, #8
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	6939      	ldr	r1, [r7, #16]
 80007aa:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d00b      	beq.n	80007cc <HAL_GPIO_Init+0xa8>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d007      	beq.n	80007cc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c0:	2b11      	cmp	r3, #17
 80007c2:	d003      	beq.n	80007cc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	2b12      	cmp	r3, #18
 80007ca:	d130      	bne.n	800082e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	2203      	movs	r2, #3
 80007d8:	409a      	lsls	r2, r3
 80007da:	0013      	movs	r3, r2
 80007dc:	43da      	mvns	r2, r3
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	68da      	ldr	r2, [r3, #12]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	409a      	lsls	r2, r3
 80007ee:	0013      	movs	r3, r2
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000802:	2201      	movs	r2, #1
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
 8000808:	0013      	movs	r3, r2
 800080a:	43da      	mvns	r2, r3
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	4013      	ands	r3, r2
 8000810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	091b      	lsrs	r3, r3, #4
 8000818:	2201      	movs	r2, #1
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
 8000820:	0013      	movs	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4313      	orrs	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	409a      	lsls	r2, r3
 800083c:	0013      	movs	r3, r2
 800083e:	43da      	mvns	r2, r3
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	4013      	ands	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2203      	movs	r2, #3
 800084c:	401a      	ands	r2, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	409a      	lsls	r2, r3
 8000854:	0013      	movs	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2203      	movs	r2, #3
 800086e:	409a      	lsls	r2, r3
 8000870:	0013      	movs	r3, r2
 8000872:	43da      	mvns	r2, r3
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	4013      	ands	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	409a      	lsls	r2, r3
 8000884:	0013      	movs	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4313      	orrs	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	055b      	lsls	r3, r3, #21
 800089a:	4013      	ands	r3, r2
 800089c:	d100      	bne.n	80008a0 <HAL_GPIO_Init+0x17c>
 800089e:	e0a0      	b.n	80009e2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a0:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <HAL_GPIO_Init+0x2dc>)
 80008a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <HAL_GPIO_Init+0x2dc>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80008ac:	4a55      	ldr	r2, [pc, #340]	; (8000a04 <HAL_GPIO_Init+0x2e0>)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	089b      	lsrs	r3, r3, #2
 80008b2:	3302      	adds	r3, #2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	589b      	ldr	r3, [r3, r2]
 80008b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2203      	movs	r2, #3
 80008be:	4013      	ands	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	220f      	movs	r2, #15
 80008c4:	409a      	lsls	r2, r3
 80008c6:	0013      	movs	r3, r2
 80008c8:	43da      	mvns	r2, r3
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d01f      	beq.n	800091a <HAL_GPIO_Init+0x1f6>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a4a      	ldr	r2, [pc, #296]	; (8000a08 <HAL_GPIO_Init+0x2e4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d019      	beq.n	8000916 <HAL_GPIO_Init+0x1f2>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a49      	ldr	r2, [pc, #292]	; (8000a0c <HAL_GPIO_Init+0x2e8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d013      	beq.n	8000912 <HAL_GPIO_Init+0x1ee>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a48      	ldr	r2, [pc, #288]	; (8000a10 <HAL_GPIO_Init+0x2ec>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d00d      	beq.n	800090e <HAL_GPIO_Init+0x1ea>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a47      	ldr	r2, [pc, #284]	; (8000a14 <HAL_GPIO_Init+0x2f0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d007      	beq.n	800090a <HAL_GPIO_Init+0x1e6>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a46      	ldr	r2, [pc, #280]	; (8000a18 <HAL_GPIO_Init+0x2f4>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d101      	bne.n	8000906 <HAL_GPIO_Init+0x1e2>
 8000902:	2305      	movs	r3, #5
 8000904:	e00a      	b.n	800091c <HAL_GPIO_Init+0x1f8>
 8000906:	2306      	movs	r3, #6
 8000908:	e008      	b.n	800091c <HAL_GPIO_Init+0x1f8>
 800090a:	2304      	movs	r3, #4
 800090c:	e006      	b.n	800091c <HAL_GPIO_Init+0x1f8>
 800090e:	2303      	movs	r3, #3
 8000910:	e004      	b.n	800091c <HAL_GPIO_Init+0x1f8>
 8000912:	2302      	movs	r3, #2
 8000914:	e002      	b.n	800091c <HAL_GPIO_Init+0x1f8>
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <HAL_GPIO_Init+0x1f8>
 800091a:	2300      	movs	r3, #0
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	2103      	movs	r1, #3
 8000920:	400a      	ands	r2, r1
 8000922:	0092      	lsls	r2, r2, #2
 8000924:	4093      	lsls	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800092c:	4935      	ldr	r1, [pc, #212]	; (8000a04 <HAL_GPIO_Init+0x2e0>)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	3302      	adds	r3, #2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	43da      	mvns	r2, r3
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	025b      	lsls	r3, r3, #9
 8000952:	4013      	ands	r3, r2
 8000954:	d003      	beq.n	800095e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	43da      	mvns	r2, r3
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	029b      	lsls	r3, r3, #10
 800097c:	4013      	ands	r3, r2
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	43da      	mvns	r2, r3
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	035b      	lsls	r3, r3, #13
 80009a6:	4013      	ands	r3, r2
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	43da      	mvns	r2, r3
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	039b      	lsls	r3, r3, #14
 80009d0:	4013      	ands	r3, r2
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_GPIO_Init+0x2f8>)
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	40da      	lsrs	r2, r3
 80009f0:	1e13      	subs	r3, r2, #0
 80009f2:	d000      	beq.n	80009f6 <HAL_GPIO_Init+0x2d2>
 80009f4:	e6a2      	b.n	800073c <HAL_GPIO_Init+0x18>
  }
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b006      	add	sp, #24
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010000 	.word	0x40010000
 8000a08:	50000400 	.word	0x50000400
 8000a0c:	50000800 	.word	0x50000800
 8000a10:	50000c00 	.word	0x50000c00
 8000a14:	50001000 	.word	0x50001000
 8000a18:	50001c00 	.word	0x50001c00
 8000a1c:	40010400 	.word	0x40010400

08000a20 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	0008      	movs	r0, r1
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	1cbb      	adds	r3, r7, #2
 8000a2e:	1c02      	adds	r2, r0, #0
 8000a30:	801a      	strh	r2, [r3, #0]
 8000a32:	1c7b      	adds	r3, r7, #1
 8000a34:	1c0a      	adds	r2, r1, #0
 8000a36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000a38:	1c7b      	adds	r3, r7, #1
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a40:	1cbb      	adds	r3, r7, #2
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000a48:	e003      	b.n	8000a52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000a4a:	1cbb      	adds	r3, r7, #2
 8000a4c:	881a      	ldrh	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	000a      	movs	r2, r1
 8000a64:	1cbb      	adds	r3, r7, #2
 8000a66:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	1cbb      	adds	r3, r7, #2
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	405a      	eors	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	615a      	str	r2, [r3, #20]
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	b5b0      	push	{r4, r5, r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f000 fbbc 	bl	800120c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a94:	4bc8      	ldr	r3, [pc, #800]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	220c      	movs	r2, #12
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a9e:	4bc6      	ldr	r3, [pc, #792]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x36>
 8000ab4:	e07e      	b.n	8000bb4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d007      	beq.n	8000acc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	2b0c      	cmp	r3, #12
 8000ac0:	d112      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x68>
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	025b      	lsls	r3, r3, #9
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d10d      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000acc:	4bba      	ldr	r3, [pc, #744]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	029b      	lsls	r3, r3, #10
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d100      	bne.n	8000ada <HAL_RCC_OscConfig+0x5a>
 8000ad8:	e06b      	b.n	8000bb2 <HAL_RCC_OscConfig+0x132>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d167      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f000 fb92 	bl	800120c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	025b      	lsls	r3, r3, #9
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d107      	bne.n	8000b04 <HAL_RCC_OscConfig+0x84>
 8000af4:	4bb0      	ldr	r3, [pc, #704]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4baf      	ldr	r3, [pc, #700]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	0249      	lsls	r1, r1, #9
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e027      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	23a0      	movs	r3, #160	; 0xa0
 8000b0a:	02db      	lsls	r3, r3, #11
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d10e      	bne.n	8000b2e <HAL_RCC_OscConfig+0xae>
 8000b10:	4ba9      	ldr	r3, [pc, #676]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4ba8      	ldr	r3, [pc, #672]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	02c9      	lsls	r1, r1, #11
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	4ba6      	ldr	r3, [pc, #664]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4ba5      	ldr	r3, [pc, #660]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0249      	lsls	r1, r1, #9
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e012      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000b2e:	4ba2      	ldr	r3, [pc, #648]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4ba1      	ldr	r3, [pc, #644]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b34:	49a1      	ldr	r1, [pc, #644]	; (8000dbc <HAL_RCC_OscConfig+0x33c>)
 8000b36:	400a      	ands	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	4b9f      	ldr	r3, [pc, #636]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4b9b      	ldr	r3, [pc, #620]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b9a      	ldr	r3, [pc, #616]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b4e:	499c      	ldr	r1, [pc, #624]	; (8000dc0 <HAL_RCC_OscConfig+0x340>)
 8000b50:	400a      	ands	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d015      	beq.n	8000b88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fd06 	bl	800056c <HAL_GetTick>
 8000b60:	0003      	movs	r3, r0
 8000b62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b64:	e009      	b.n	8000b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b66:	f7ff fd01 	bl	800056c <HAL_GetTick>
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b64      	cmp	r3, #100	; 0x64
 8000b72:	d902      	bls.n	8000b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b74:	2303      	movs	r3, #3
 8000b76:	f000 fb49 	bl	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b7a:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	029b      	lsls	r3, r3, #10
 8000b82:	4013      	ands	r3, r2
 8000b84:	d0ef      	beq.n	8000b66 <HAL_RCC_OscConfig+0xe6>
 8000b86:	e015      	b.n	8000bb4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b88:	f7ff fcf0 	bl	800056c <HAL_GetTick>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b92:	f7ff fceb 	bl	800056c <HAL_GetTick>
 8000b96:	0002      	movs	r2, r0
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b64      	cmp	r3, #100	; 0x64
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e333      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ba4:	4b84      	ldr	r3, [pc, #528]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	029b      	lsls	r3, r3, #10
 8000bac:	4013      	ands	r3, r2
 8000bae:	d1f0      	bne.n	8000b92 <HAL_RCC_OscConfig+0x112>
 8000bb0:	e000      	b.n	8000bb4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2202      	movs	r2, #2
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x140>
 8000bbe:	e098      	b.n	8000cf2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	2220      	movs	r2, #32
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d009      	beq.n	8000be2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000bce:	4b7a      	ldr	r3, [pc, #488]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4b79      	ldr	r3, [pc, #484]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	2220      	movs	r2, #32
 8000bde:	4393      	bics	r3, r2
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d005      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b0c      	cmp	r3, #12
 8000bec:	d13d      	bne.n	8000c6a <HAL_RCC_OscConfig+0x1ea>
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d13a      	bne.n	8000c6a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d004      	beq.n	8000c08 <HAL_RCC_OscConfig+0x188>
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e301      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c08:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	4a6d      	ldr	r2, [pc, #436]	; (8000dc4 <HAL_RCC_OscConfig+0x344>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	0019      	movs	r1, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	021a      	lsls	r2, r3, #8
 8000c18:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c1e:	4b66      	ldr	r3, [pc, #408]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2209      	movs	r2, #9
 8000c24:	4393      	bics	r3, r2
 8000c26:	0019      	movs	r1, r3
 8000c28:	4b63      	ldr	r3, [pc, #396]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c30:	f000 fc20 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8000c34:	0001      	movs	r1, r0
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	220f      	movs	r2, #15
 8000c3e:	4013      	ands	r3, r2
 8000c40:	4a61      	ldr	r2, [pc, #388]	; (8000dc8 <HAL_RCC_OscConfig+0x348>)
 8000c42:	5cd3      	ldrb	r3, [r2, r3]
 8000c44:	000a      	movs	r2, r1
 8000c46:	40da      	lsrs	r2, r3
 8000c48:	4b60      	ldr	r3, [pc, #384]	; (8000dcc <HAL_RCC_OscConfig+0x34c>)
 8000c4a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000c4c:	2513      	movs	r5, #19
 8000c4e:	197c      	adds	r4, r7, r5
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fc55 	bl	8000500 <HAL_InitTick>
 8000c56:	0003      	movs	r3, r0
 8000c58:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000c5a:	197b      	adds	r3, r7, r5
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d047      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000c62:	2313      	movs	r3, #19
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	e2d0      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d027      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c70:	4b51      	ldr	r3, [pc, #324]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2209      	movs	r2, #9
 8000c76:	4393      	bics	r3, r2
 8000c78:	0019      	movs	r1, r3
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c82:	f7ff fc73 	bl	800056c <HAL_GetTick>
 8000c86:	0003      	movs	r3, r0
 8000c88:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8c:	f7ff fc6e 	bl	800056c <HAL_GetTick>
 8000c90:	0002      	movs	r2, r0
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e2b6      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c9e:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d0f1      	beq.n	8000c8c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca8:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4a45      	ldr	r2, [pc, #276]	; (8000dc4 <HAL_RCC_OscConfig+0x344>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	021a      	lsls	r2, r3, #8
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	e018      	b.n	8000cf2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc0:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b3c      	ldr	r3, [pc, #240]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	438a      	bics	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fc4e 	bl	800056c <HAL_GetTick>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd6:	f7ff fc49 	bl	800056c <HAL_GetTick>
 8000cda:	0002      	movs	r2, r0
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e291      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2204      	movs	r2, #4
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d1f1      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d100      	bne.n	8000cfe <HAL_RCC_OscConfig+0x27e>
 8000cfc:	e09f      	b.n	8000e3e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d13f      	bne.n	8000d84 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d005      	beq.n	8000d1c <HAL_RCC_OscConfig+0x29c>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e277      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <HAL_RCC_OscConfig+0x350>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	0019      	movs	r1, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	0a19      	lsrs	r1, r3, #8
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	061a      	lsls	r2, r3, #24
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d40:	430a      	orrs	r2, r1
 8000d42:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d48:	0b5b      	lsrs	r3, r3, #13
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	0212      	lsls	r2, r2, #8
 8000d50:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	210f      	movs	r1, #15
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	491a      	ldr	r1, [pc, #104]	; (8000dc8 <HAL_RCC_OscConfig+0x348>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_RCC_OscConfig+0x34c>)
 8000d64:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000d66:	2513      	movs	r5, #19
 8000d68:	197c      	adds	r4, r7, r5
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fbc8 	bl	8000500 <HAL_InitTick>
 8000d70:	0003      	movs	r3, r0
 8000d72:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000d74:	197b      	adds	r3, r7, r5
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d060      	beq.n	8000e3e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8000d7c:	2313      	movs	r3, #19
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	e243      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d03e      	beq.n	8000e0a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_RCC_OscConfig+0x338>)
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	0049      	lsls	r1, r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fbe7 	bl	800056c <HAL_GetTick>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000da2:	e017      	b.n	8000dd4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000da4:	f7ff fbe2 	bl	800056c <HAL_GetTick>
 8000da8:	0002      	movs	r2, r0
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d910      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e22a      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	fffeffff 	.word	0xfffeffff
 8000dc0:	fffbffff 	.word	0xfffbffff
 8000dc4:	ffffe0ff 	.word	0xffffe0ff
 8000dc8:	080015ec 	.word	0x080015ec
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dd4:	4bc6      	ldr	r3, [pc, #792]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d0e1      	beq.n	8000da4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000de0:	4bc3      	ldr	r3, [pc, #780]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4ac3      	ldr	r2, [pc, #780]	; (80010f4 <HAL_RCC_OscConfig+0x674>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	0019      	movs	r1, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dee:	4bc0      	ldr	r3, [pc, #768]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000df0:	430a      	orrs	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df4:	4bbe      	ldr	r3, [pc, #760]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	0a19      	lsrs	r1, r3, #8
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	061a      	lsls	r2, r3, #24
 8000e02:	4bbb      	ldr	r3, [pc, #748]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e04:	430a      	orrs	r2, r1
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	e019      	b.n	8000e3e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e0a:	4bb9      	ldr	r3, [pc, #740]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4bb8      	ldr	r3, [pc, #736]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e10:	49b9      	ldr	r1, [pc, #740]	; (80010f8 <HAL_RCC_OscConfig+0x678>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff fba9 	bl	800056c <HAL_GetTick>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e20:	f7ff fba4 	bl	800056c <HAL_GetTick>
 8000e24:	0002      	movs	r2, r0
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e1ec      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e32:	4baf      	ldr	r3, [pc, #700]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2208      	movs	r2, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	d036      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d019      	beq.n	8000e84 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e50:	4ba7      	ldr	r3, [pc, #668]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e54:	4ba6      	ldr	r3, [pc, #664]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fb86 	bl	800056c <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fb81 	bl	800056c <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1c9      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e78:	4b9d      	ldr	r3, [pc, #628]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d0f1      	beq.n	8000e66 <HAL_RCC_OscConfig+0x3e6>
 8000e82:	e018      	b.n	8000eb6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e84:	4b9a      	ldr	r3, [pc, #616]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e88:	4b99      	ldr	r3, [pc, #612]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fb6c 	bl	800056c <HAL_GetTick>
 8000e94:	0003      	movs	r3, r0
 8000e96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fb67 	bl	800056c <HAL_GetTick>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e1af      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000eac:	4b90      	ldr	r3, [pc, #576]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d1f1      	bne.n	8000e9a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x442>
 8000ec0:	e0af      	b.n	8001022 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec2:	2323      	movs	r3, #35	; 0x23
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eca:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	055b      	lsls	r3, r3, #21
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d10a      	bne.n	8000eec <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b86      	ldr	r3, [pc, #536]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eda:	4b85      	ldr	r3, [pc, #532]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0549      	lsls	r1, r1, #21
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000ee4:	2323      	movs	r3, #35	; 0x23
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	4b83      	ldr	r3, [pc, #524]	; (80010fc <HAL_RCC_OscConfig+0x67c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d11a      	bne.n	8000f2e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef8:	4b80      	ldr	r3, [pc, #512]	; (80010fc <HAL_RCC_OscConfig+0x67c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b7f      	ldr	r3, [pc, #508]	; (80010fc <HAL_RCC_OscConfig+0x67c>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0049      	lsls	r1, r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fb31 	bl	800056c <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f10:	f7ff fb2c 	bl	800056c <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e174      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f22:	4b76      	ldr	r3, [pc, #472]	; (80010fc <HAL_RCC_OscConfig+0x67c>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d107      	bne.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
 8000f3a:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f3e:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0049      	lsls	r1, r1, #1
 8000f44:	430a      	orrs	r2, r1
 8000f46:	651a      	str	r2, [r3, #80]	; 0x50
 8000f48:	e031      	b.n	8000fae <HAL_RCC_OscConfig+0x52e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f56:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f58:	4967      	ldr	r1, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x678>)
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8000f5e:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f62:	4b63      	ldr	r3, [pc, #396]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f64:	4966      	ldr	r1, [pc, #408]	; (8001100 <HAL_RCC_OscConfig+0x680>)
 8000f66:	400a      	ands	r2, r1
 8000f68:	651a      	str	r2, [r3, #80]	; 0x50
 8000f6a:	e020      	b.n	8000fae <HAL_RCC_OscConfig+0x52e>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	23a0      	movs	r3, #160	; 0xa0
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d10e      	bne.n	8000f96 <HAL_RCC_OscConfig+0x516>
 8000f78:	4b5d      	ldr	r3, [pc, #372]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f7c:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	00c9      	lsls	r1, r1, #3
 8000f82:	430a      	orrs	r2, r1
 8000f84:	651a      	str	r2, [r3, #80]	; 0x50
 8000f86:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f8a:	4b59      	ldr	r3, [pc, #356]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	0049      	lsls	r1, r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	651a      	str	r2, [r3, #80]	; 0x50
 8000f94:	e00b      	b.n	8000fae <HAL_RCC_OscConfig+0x52e>
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f9a:	4b55      	ldr	r3, [pc, #340]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000f9c:	4956      	ldr	r1, [pc, #344]	; (80010f8 <HAL_RCC_OscConfig+0x678>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	651a      	str	r2, [r3, #80]	; 0x50
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fa6:	4b52      	ldr	r3, [pc, #328]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000fa8:	4955      	ldr	r1, [pc, #340]	; (8001100 <HAL_RCC_OscConfig+0x680>)
 8000faa:	400a      	ands	r2, r1
 8000fac:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d015      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fad9 	bl	800056c <HAL_GetTick>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fbe:	e009      	b.n	8000fd4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fad4 	bl	800056c <HAL_GetTick>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_RCC_OscConfig+0x684>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e11b      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fd4:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8000fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d0ef      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x540>
 8000fe0:	e014      	b.n	800100c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fac3 	bl	800056c <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000fea:	e009      	b.n	8001000 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fec:	f7ff fabe 	bl	800056c <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a43      	ldr	r2, [pc, #268]	; (8001104 <HAL_RCC_OscConfig+0x684>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e105      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001000:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4013      	ands	r3, r2
 800100a:	d1ef      	bne.n	8000fec <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800100c:	2323      	movs	r3, #35	; 0x23
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d105      	bne.n	8001022 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001016:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800101a:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 800101c:	493a      	ldr	r1, [pc, #232]	; (8001108 <HAL_RCC_OscConfig+0x688>)
 800101e:	400a      	ands	r2, r1
 8001020:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2220      	movs	r2, #32
 8001028:	4013      	ands	r3, r2
 800102a:	d049      	beq.n	80010c0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d026      	beq.n	8001082 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001034:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001044:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001046:	2101      	movs	r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_RCC_OscConfig+0x68c>)
 800104e:	6a1a      	ldr	r2, [r3, #32]
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_RCC_OscConfig+0x68c>)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	0189      	lsls	r1, r1, #6
 8001056:	430a      	orrs	r2, r1
 8001058:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fa87 	bl	800056c <HAL_GetTick>
 800105e:	0003      	movs	r3, r0
 8001060:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001064:	f7ff fa82 	bl	800056c <HAL_GetTick>
 8001068:	0002      	movs	r2, r0
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e0ca      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d0f1      	beq.n	8001064 <HAL_RCC_OscConfig+0x5e4>
 8001080:	e01e      	b.n	80010c0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 8001088:	2101      	movs	r1, #1
 800108a:	438a      	bics	r2, r1
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_RCC_OscConfig+0x68c>)
 8001090:	6a1a      	ldr	r2, [r3, #32]
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_RCC_OscConfig+0x68c>)
 8001094:	491e      	ldr	r1, [pc, #120]	; (8001110 <HAL_RCC_OscConfig+0x690>)
 8001096:	400a      	ands	r2, r1
 8001098:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fa67 	bl	800056c <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010a4:	f7ff fa62 	bl	800056c <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e0aa      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d1f1      	bne.n	80010a4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d100      	bne.n	80010ca <HAL_RCC_OscConfig+0x64a>
 80010c8:	e09f      	b.n	800120a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	d100      	bne.n	80010d2 <HAL_RCC_OscConfig+0x652>
 80010d0:	e078      	b.n	80011c4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d159      	bne.n	800118e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_RCC_OscConfig+0x670>)
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <HAL_RCC_OscConfig+0x694>)
 80010e2:	400a      	ands	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fa41 	bl	800056c <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010ee:	e01c      	b.n	800112a <HAL_RCC_OscConfig+0x6aa>
 80010f0:	40021000 	.word	0x40021000
 80010f4:	ffff1fff 	.word	0xffff1fff
 80010f8:	fffffeff 	.word	0xfffffeff
 80010fc:	40007000 	.word	0x40007000
 8001100:	fffffbff 	.word	0xfffffbff
 8001104:	00001388 	.word	0x00001388
 8001108:	efffffff 	.word	0xefffffff
 800110c:	40010000 	.word	0x40010000
 8001110:	ffffdfff 	.word	0xffffdfff
 8001114:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fa28 	bl	800056c <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e070      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	049b      	lsls	r3, r3, #18
 8001132:	4013      	ands	r3, r2
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4a37      	ldr	r2, [pc, #220]	; (8001218 <HAL_RCC_OscConfig+0x798>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114e:	431a      	orrs	r2, r3
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0449      	lsls	r1, r1, #17
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fa02 	bl	800056c <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800116e:	f7ff f9fd 	bl	800056c <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e045      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	049b      	lsls	r3, r3, #18
 8001188:	4013      	ands	r3, r2
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x6ee>
 800118c:	e03d      	b.n	800120a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 8001194:	4921      	ldr	r1, [pc, #132]	; (800121c <HAL_RCC_OscConfig+0x79c>)
 8001196:	400a      	ands	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff f9e7 	bl	800056c <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a4:	f7ff f9e2 	bl	800056c <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e02a      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	049b      	lsls	r3, r3, #18
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x724>
 80011c2:	e022      	b.n	800120a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e01d      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_RCC_OscConfig+0x794>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	025b      	lsls	r3, r3, #9
 80011dc:	401a      	ands	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d10f      	bne.n	8001206 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	23f0      	movs	r3, #240	; 0xf0
 80011ea:	039b      	lsls	r3, r3, #14
 80011ec:	401a      	ands	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	23c0      	movs	r3, #192	; 0xc0
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	401a      	ands	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001202:	429a      	cmp	r2, r3
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b00a      	add	sp, #40	; 0x28
 8001212:	bdb0      	pop	{r4, r5, r7, pc}
 8001214:	40021000 	.word	0x40021000
 8001218:	ff02ffff 	.word	0xff02ffff
 800121c:	feffffff 	.word	0xfeffffff

08001220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e10d      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	4b88      	ldr	r3, [pc, #544]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	4013      	ands	r3, r2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d911      	bls.n	8001266 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	4393      	bics	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	4b82      	ldr	r3, [pc, #520]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001254:	4b80      	ldr	r3, [pc, #512]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	4013      	ands	r3, r2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d001      	beq.n	8001266 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0f4      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d009      	beq.n	8001284 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001270:	4b7a      	ldr	r3, [pc, #488]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	22f0      	movs	r2, #240	; 0xf0
 8001276:	4393      	bics	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4013      	ands	r3, r2
 800128c:	d100      	bne.n	8001290 <HAL_RCC_ClockConfig+0x70>
 800128e:	e089      	b.n	80013a4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001298:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	4013      	ands	r3, r2
 80012a2:	d120      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0d3      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	049b      	lsls	r3, r3, #18
 80012b8:	4013      	ands	r3, r2
 80012ba:	d114      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0c7      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2204      	movs	r2, #4
 80012ce:	4013      	ands	r3, r2
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0bc      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012d6:	4b61      	ldr	r3, [pc, #388]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0b4      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2203      	movs	r2, #3
 80012ec:	4393      	bics	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fa:	f7ff f937 	bl	800056c <HAL_GetTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d111      	bne.n	800132e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800130a:	e009      	b.n	8001320 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130c:	f7ff f92e 	bl	800056c <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <HAL_RCC_ClockConfig+0x240>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e097      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001320:	4b4e      	ldr	r3, [pc, #312]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	220c      	movs	r2, #12
 8001326:	4013      	ands	r3, r2
 8001328:	2b08      	cmp	r3, #8
 800132a:	d1ef      	bne.n	800130c <HAL_RCC_ClockConfig+0xec>
 800132c:	e03a      	b.n	80013a4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d111      	bne.n	800135a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001336:	e009      	b.n	800134c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7ff f918 	bl	800056c <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4a47      	ldr	r2, [pc, #284]	; (8001460 <HAL_RCC_ClockConfig+0x240>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e081      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134c:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	220c      	movs	r2, #12
 8001352:	4013      	ands	r3, r2
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d1ef      	bne.n	8001338 <HAL_RCC_ClockConfig+0x118>
 8001358:	e024      	b.n	80013a4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d11b      	bne.n	800139a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	e009      	b.n	8001378 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff f902 	bl	800056c <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a3c      	ldr	r2, [pc, #240]	; (8001460 <HAL_RCC_ClockConfig+0x240>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e06b      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001378:	4b38      	ldr	r3, [pc, #224]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	220c      	movs	r2, #12
 800137e:	4013      	ands	r3, r2
 8001380:	2b04      	cmp	r3, #4
 8001382:	d1ef      	bne.n	8001364 <HAL_RCC_ClockConfig+0x144>
 8001384:	e00e      	b.n	80013a4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001386:	f7ff f8f1 	bl	800056c <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	4a33      	ldr	r2, [pc, #204]	; (8001460 <HAL_RCC_ClockConfig+0x240>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e05a      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800139a:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	220c      	movs	r2, #12
 80013a0:	4013      	ands	r3, r2
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d211      	bcs.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2201      	movs	r2, #1
 80013b8:	4393      	bics	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_ClockConfig+0x238>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e03c      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d009      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_RCC_ClockConfig+0x244>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 80013f0:	430a      	orrs	r2, r1
 80013f2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2208      	movs	r2, #8
 80013fa:	4013      	ands	r3, r2
 80013fc:	d00a      	beq.n	8001414 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <HAL_RCC_ClockConfig+0x248>)
 8001404:	4013      	ands	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	00da      	lsls	r2, r3, #3
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 8001410:	430a      	orrs	r2, r1
 8001412:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001414:	f000 f82e 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8001418:	0001      	movs	r1, r0
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_RCC_ClockConfig+0x23c>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	220f      	movs	r2, #15
 8001422:	4013      	ands	r3, r2
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_RCC_ClockConfig+0x24c>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	000a      	movs	r2, r1
 800142a:	40da      	lsrs	r2, r3
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_RCC_ClockConfig+0x250>)
 800142e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001430:	250b      	movs	r5, #11
 8001432:	197c      	adds	r4, r7, r5
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff f863 	bl	8000500 <HAL_InitTick>
 800143a:	0003      	movs	r3, r0
 800143c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800143e:	197b      	adds	r3, r7, r5
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001446:	230b      	movs	r3, #11
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	e000      	b.n	8001450 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bdb0      	pop	{r4, r5, r7, pc}
 8001458:	40022000 	.word	0x40022000
 800145c:	40021000 	.word	0x40021000
 8001460:	00001388 	.word	0x00001388
 8001464:	fffff8ff 	.word	0xfffff8ff
 8001468:	ffffc7ff 	.word	0xffffc7ff
 800146c:	080015ec 	.word	0x080015ec
 8001470:	20000000 	.word	0x20000000

08001474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <HAL_RCC_GetSysClockFreq+0xf4>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	220c      	movs	r2, #12
 8001484:	4013      	ands	r3, r2
 8001486:	2b08      	cmp	r3, #8
 8001488:	d00e      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x34>
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d00f      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0x3a>
 800148e:	2b04      	cmp	r3, #4
 8001490:	d157      	bne.n	8001542 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2210      	movs	r2, #16
 8001498:	4013      	ands	r3, r2
 800149a:	d002      	beq.n	80014a2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <HAL_RCC_GetSysClockFreq+0xf8>)
 800149e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80014a0:	e05d      	b.n	800155e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014a4:	613b      	str	r3, [r7, #16]
      break;
 80014a6:	e05a      	b.n	800155e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_RCC_GetSysClockFreq+0x100>)
 80014aa:	613b      	str	r3, [r7, #16]
      break;
 80014ac:	e057      	b.n	800155e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	0c9b      	lsrs	r3, r3, #18
 80014b2:	220f      	movs	r2, #15
 80014b4:	4013      	ands	r3, r2
 80014b6:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_RCC_GetSysClockFreq+0x104>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	0d9b      	lsrs	r3, r3, #22
 80014c0:	2203      	movs	r2, #3
 80014c2:	4013      	ands	r3, r2
 80014c4:	3301      	adds	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	025b      	lsls	r3, r3, #9
 80014d0:	4013      	ands	r3, r2
 80014d2:	d00f      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	000a      	movs	r2, r1
 80014d8:	0152      	lsls	r2, r2, #5
 80014da:	1a52      	subs	r2, r2, r1
 80014dc:	0193      	lsls	r3, r2, #6
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	185b      	adds	r3, r3, r1
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7fe fe0d 	bl	8000108 <__udivsi3>
 80014ee:	0003      	movs	r3, r0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e023      	b.n	800153c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2210      	movs	r2, #16
 80014fa:	4013      	ands	r3, r2
 80014fc:	d00f      	beq.n	800151e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	000a      	movs	r2, r1
 8001502:	0152      	lsls	r2, r2, #5
 8001504:	1a52      	subs	r2, r2, r1
 8001506:	0193      	lsls	r3, r2, #6
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	185b      	adds	r3, r3, r1
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	0018      	movs	r0, r3
 8001514:	f7fe fdf8 	bl	8000108 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e00e      	b.n	800153c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	000a      	movs	r2, r1
 8001522:	0152      	lsls	r2, r2, #5
 8001524:	1a52      	subs	r2, r2, r1
 8001526:	0193      	lsls	r3, r2, #6
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	185b      	adds	r3, r3, r1
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	0018      	movs	r0, r3
 8001534:	f7fe fde8 	bl	8000108 <__udivsi3>
 8001538:	0003      	movs	r3, r0
 800153a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
      break;
 8001540:	e00d      	b.n	800155e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	0b5b      	lsrs	r3, r3, #13
 8001548:	2207      	movs	r2, #7
 800154a:	4013      	ands	r3, r2
 800154c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	0212      	lsls	r2, r2, #8
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
      break;
 800155c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800155e:	693b      	ldr	r3, [r7, #16]
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b006      	add	sp, #24
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	003d0900 	.word	0x003d0900
 8001570:	00f42400 	.word	0x00f42400
 8001574:	007a1200 	.word	0x007a1200
 8001578:	080015fc 	.word	0x080015fc

0800157c <__libc_init_array>:
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	2600      	movs	r6, #0
 8001580:	4d0c      	ldr	r5, [pc, #48]	; (80015b4 <__libc_init_array+0x38>)
 8001582:	4c0d      	ldr	r4, [pc, #52]	; (80015b8 <__libc_init_array+0x3c>)
 8001584:	1b64      	subs	r4, r4, r5
 8001586:	10a4      	asrs	r4, r4, #2
 8001588:	42a6      	cmp	r6, r4
 800158a:	d109      	bne.n	80015a0 <__libc_init_array+0x24>
 800158c:	2600      	movs	r6, #0
 800158e:	f000 f821 	bl	80015d4 <_init>
 8001592:	4d0a      	ldr	r5, [pc, #40]	; (80015bc <__libc_init_array+0x40>)
 8001594:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <__libc_init_array+0x44>)
 8001596:	1b64      	subs	r4, r4, r5
 8001598:	10a4      	asrs	r4, r4, #2
 800159a:	42a6      	cmp	r6, r4
 800159c:	d105      	bne.n	80015aa <__libc_init_array+0x2e>
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	00b3      	lsls	r3, r6, #2
 80015a2:	58eb      	ldr	r3, [r5, r3]
 80015a4:	4798      	blx	r3
 80015a6:	3601      	adds	r6, #1
 80015a8:	e7ee      	b.n	8001588 <__libc_init_array+0xc>
 80015aa:	00b3      	lsls	r3, r6, #2
 80015ac:	58eb      	ldr	r3, [r5, r3]
 80015ae:	4798      	blx	r3
 80015b0:	3601      	adds	r6, #1
 80015b2:	e7f2      	b.n	800159a <__libc_init_array+0x1e>
 80015b4:	08001608 	.word	0x08001608
 80015b8:	08001608 	.word	0x08001608
 80015bc:	08001608 	.word	0x08001608
 80015c0:	0800160c 	.word	0x0800160c

080015c4 <memset>:
 80015c4:	0003      	movs	r3, r0
 80015c6:	1812      	adds	r2, r2, r0
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d100      	bne.n	80015ce <memset+0xa>
 80015cc:	4770      	bx	lr
 80015ce:	7019      	strb	r1, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	e7f9      	b.n	80015c8 <memset+0x4>

080015d4 <_init>:
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015da:	bc08      	pop	{r3}
 80015dc:	469e      	mov	lr, r3
 80015de:	4770      	bx	lr

080015e0 <_fini>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015e6:	bc08      	pop	{r3}
 80015e8:	469e      	mov	lr, r3
 80015ea:	4770      	bx	lr
