
MBTCP_Software_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800358c  0800358c  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003594  08003594  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800359c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000004  080035a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080035a0  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcc7  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a8c  00000000  00000000  0002bcf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002d780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014be3  00000000  00000000  0002ef08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f53  00000000  00000000  00043aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008230e  00000000  00000000  0004da3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfd4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c00  00000000  00000000  000cfdc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034ac 	.word	0x080034ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080034ac 	.word	0x080034ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b5b0      	push	{r4, r5, r7, lr}
 800043a:	b098      	sub	sp, #96	; 0x60
 800043c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043e:	f000 fca7 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000442:	f000 f8d5 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000446:	f000 fa49 	bl	80008dc <MX_GPIO_Init>
  MX_ADC_Init();
 800044a:	f000 f93b 	bl	80006c4 <MX_ADC_Init>
  MX_I2C1_Init();
 800044e:	f000 f99d 	bl	800078c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000452:	f000 f9db 	bl	800080c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000456:	f000 fa11 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //**************************************************************************************************************
  // HAL Items
  uint8_t HAL_OK_Buffer[6] = {72, 65, 76, 32, 79, 75};								// Buffer for HAL_OK message
 800045a:	2354      	movs	r3, #84	; 0x54
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	4a57      	ldr	r2, [pc, #348]	; (80005bc <main+0x184>)
 8000460:	6811      	ldr	r1, [r2, #0]
 8000462:	6019      	str	r1, [r3, #0]
 8000464:	8892      	ldrh	r2, [r2, #4]
 8000466:	809a      	strh	r2, [r3, #4]
  uint8_t HAL_ERROR_Buffer[9] = {72, 65, 76, 32, 69, 82, 82, 79, 82};				// Buffer for HAL_ERROR message
 8000468:	2348      	movs	r3, #72	; 0x48
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	4a54      	ldr	r2, [pc, #336]	; (80005c0 <main+0x188>)
 800046e:	ca03      	ldmia	r2!, {r0, r1}
 8000470:	c303      	stmia	r3!, {r0, r1}
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	701a      	strb	r2, [r3, #0]
  uint8_t HAL_BUSY_Buffer[8] = {72, 65, 76, 32, 66, 85, 83, 89};					// Buffer for HAL_BUSY message
 8000476:	2340      	movs	r3, #64	; 0x40
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	4a52      	ldr	r2, [pc, #328]	; (80005c4 <main+0x18c>)
 800047c:	ca03      	ldmia	r2!, {r0, r1}
 800047e:	c303      	stmia	r3!, {r0, r1}
  uint8_t HAL_TIMEOUT_Buffer[11] = {72, 65, 76, 32, 84, 73, 77, 69, 79, 85, 84};	// Buffer for HAL_TIMEOUT message
 8000480:	2334      	movs	r3, #52	; 0x34
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	4a50      	ldr	r2, [pc, #320]	; (80005c8 <main+0x190>)
 8000486:	ca03      	ldmia	r2!, {r0, r1}
 8000488:	c303      	stmia	r3!, {r0, r1}
 800048a:	8811      	ldrh	r1, [r2, #0]
 800048c:	8019      	strh	r1, [r3, #0]
 800048e:	7892      	ldrb	r2, [r2, #2]
 8000490:	709a      	strb	r2, [r3, #2]
  uint8_t crlfBuffer[2] = {13, 10};													// Buffer for carriage return and line feed characters
 8000492:	2330      	movs	r3, #48	; 0x30
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	4a4d      	ldr	r2, [pc, #308]	; (80005cc <main+0x194>)
 8000498:	8812      	ldrh	r2, [r2, #0]
 800049a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef UART2_STATUS;													// UART2 status object
  HAL_StatusTypeDef I2C1_STATUS;													// I2C1 status object
  uint32_t timeout = 10000;															// HAL timeout value
 800049c:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <main+0x198>)
 800049e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // End HAL Items
  //*************************************************************************************************************

  //***************************************************************************************************************
  // Begin board bring-up specific items
  uint8_t message_ChargeGood[11] = {67, 104, 97, 114, 103, 101, 32, 71, 79, 79, 68};
 80004a0:	2324      	movs	r3, #36	; 0x24
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	4a4b      	ldr	r2, [pc, #300]	; (80005d4 <main+0x19c>)
 80004a6:	ca03      	ldmia	r2!, {r0, r1}
 80004a8:	c303      	stmia	r3!, {r0, r1}
 80004aa:	8811      	ldrh	r1, [r2, #0]
 80004ac:	8019      	strh	r1, [r3, #0]
 80004ae:	7892      	ldrb	r2, [r2, #2]
 80004b0:	709a      	strb	r2, [r3, #2]
  uint8_t message_ChargeBad[10] = {67, 104, 97, 114, 103, 101, 32, 66, 65, 68};
 80004b2:	2318      	movs	r3, #24
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	4a48      	ldr	r2, [pc, #288]	; (80005d8 <main+0x1a0>)
 80004b8:	ca03      	ldmia	r2!, {r0, r1}
 80004ba:	c303      	stmia	r3!, {r0, r1}
 80004bc:	8812      	ldrh	r2, [r2, #0]
 80004be:	801a      	strh	r2, [r3, #0]
  uint8_t message_FaultGood[10] = {70, 97, 117, 108, 116, 32, 71, 79, 79, 68};
 80004c0:	230c      	movs	r3, #12
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	4a45      	ldr	r2, [pc, #276]	; (80005dc <main+0x1a4>)
 80004c6:	ca03      	ldmia	r2!, {r0, r1}
 80004c8:	c303      	stmia	r3!, {r0, r1}
 80004ca:	8812      	ldrh	r2, [r2, #0]
 80004cc:	801a      	strh	r2, [r3, #0]
  uint8_t message_FaultBad[9] = {70, 97, 117, 108, 116, 32, 66, 65, 68};
 80004ce:	003b      	movs	r3, r7
 80004d0:	4a43      	ldr	r2, [pc, #268]	; (80005e0 <main+0x1a8>)
 80004d2:	ca03      	ldmia	r2!, {r0, r1}
 80004d4:	c303      	stmia	r3!, {r0, r1}
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Toggle the led
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80004da:	4b42      	ldr	r3, [pc, #264]	; (80005e4 <main+0x1ac>)
 80004dc:	2120      	movs	r1, #32
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 f972 	bl	80017c8 <HAL_GPIO_TogglePin>

	  // Delay a bit before looping
	  HAL_Delay(1000);
 80004e4:	23fa      	movs	r3, #250	; 0xfa
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fcb1 	bl	8000e50 <HAL_Delay>

	  // Check the status of the /CHRG and /FAULT pins, message accordingly
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET)
 80004ee:	4b3e      	ldr	r3, [pc, #248]	; (80005e8 <main+0x1b0>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 f92e 	bl	8001754 <HAL_GPIO_ReadPin>
 80004f8:	0003      	movs	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d115      	bne.n	800052a <main+0xf2>
	  {
		  // Charging pin is good
		  UART2_STATUS = HAL_UART_Transmit(&huart2, message_ChargeGood, sizeof(message_ChargeGood), timeout);
 80004fe:	255b      	movs	r5, #91	; 0x5b
 8000500:	197c      	adds	r4, r7, r5
 8000502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000504:	2224      	movs	r2, #36	; 0x24
 8000506:	18b9      	adds	r1, r7, r2
 8000508:	4838      	ldr	r0, [pc, #224]	; (80005ec <main+0x1b4>)
 800050a:	220b      	movs	r2, #11
 800050c:	f002 fa82 	bl	8002a14 <HAL_UART_Transmit>
 8000510:	0003      	movs	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 8000514:	197c      	adds	r4, r7, r5
 8000516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000518:	2230      	movs	r2, #48	; 0x30
 800051a:	18b9      	adds	r1, r7, r2
 800051c:	4833      	ldr	r0, [pc, #204]	; (80005ec <main+0x1b4>)
 800051e:	2202      	movs	r2, #2
 8000520:	f002 fa78 	bl	8002a14 <HAL_UART_Transmit>
 8000524:	0003      	movs	r3, r0
 8000526:	7023      	strb	r3, [r4, #0]
 8000528:	e014      	b.n	8000554 <main+0x11c>
	  }
	  else
	  {
		  // Charging pin is not good
		  UART2_STATUS = HAL_UART_Transmit(&huart2, message_ChargeBad, sizeof(message_ChargeBad), timeout);
 800052a:	255b      	movs	r5, #91	; 0x5b
 800052c:	197c      	adds	r4, r7, r5
 800052e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000530:	2218      	movs	r2, #24
 8000532:	18b9      	adds	r1, r7, r2
 8000534:	482d      	ldr	r0, [pc, #180]	; (80005ec <main+0x1b4>)
 8000536:	220a      	movs	r2, #10
 8000538:	f002 fa6c 	bl	8002a14 <HAL_UART_Transmit>
 800053c:	0003      	movs	r3, r0
 800053e:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 8000540:	197c      	adds	r4, r7, r5
 8000542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	18b9      	adds	r1, r7, r2
 8000548:	4828      	ldr	r0, [pc, #160]	; (80005ec <main+0x1b4>)
 800054a:	2202      	movs	r2, #2
 800054c:	f002 fa62 	bl	8002a14 <HAL_UART_Transmit>
 8000550:	0003      	movs	r3, r0
 8000552:	7023      	strb	r3, [r4, #0]
	  }

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <main+0x1b0>)
 8000556:	2102      	movs	r1, #2
 8000558:	0018      	movs	r0, r3
 800055a:	f001 f8fb 	bl	8001754 <HAL_GPIO_ReadPin>
 800055e:	0003      	movs	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d115      	bne.n	8000590 <main+0x158>
	  {
		  // Fault pin is good
		  UART2_STATUS = HAL_UART_Transmit(&huart2, message_FaultGood, sizeof(message_FaultGood), timeout);
 8000564:	255b      	movs	r5, #91	; 0x5b
 8000566:	197c      	adds	r4, r7, r5
 8000568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800056a:	220c      	movs	r2, #12
 800056c:	18b9      	adds	r1, r7, r2
 800056e:	481f      	ldr	r0, [pc, #124]	; (80005ec <main+0x1b4>)
 8000570:	220a      	movs	r2, #10
 8000572:	f002 fa4f 	bl	8002a14 <HAL_UART_Transmit>
 8000576:	0003      	movs	r3, r0
 8000578:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 800057a:	197c      	adds	r4, r7, r5
 800057c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	18b9      	adds	r1, r7, r2
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <main+0x1b4>)
 8000584:	2202      	movs	r2, #2
 8000586:	f002 fa45 	bl	8002a14 <HAL_UART_Transmit>
 800058a:	0003      	movs	r3, r0
 800058c:	7023      	strb	r3, [r4, #0]
 800058e:	e7a4      	b.n	80004da <main+0xa2>
	  }
	  else
	  {
		  // Fault pin is bad
		  UART2_STATUS = HAL_UART_Transmit(&huart2, message_FaultBad, sizeof(message_FaultBad), timeout);
 8000590:	255b      	movs	r5, #91	; 0x5b
 8000592:	197c      	adds	r4, r7, r5
 8000594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000596:	0039      	movs	r1, r7
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0x1b4>)
 800059a:	2209      	movs	r2, #9
 800059c:	f002 fa3a 	bl	8002a14 <HAL_UART_Transmit>
 80005a0:	0003      	movs	r3, r0
 80005a2:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 80005a4:	197c      	adds	r4, r7, r5
 80005a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005a8:	2230      	movs	r2, #48	; 0x30
 80005aa:	18b9      	adds	r1, r7, r2
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x1b4>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	f002 fa30 	bl	8002a14 <HAL_UART_Transmit>
 80005b4:	0003      	movs	r3, r0
 80005b6:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80005b8:	e78f      	b.n	80004da <main+0xa2>
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	080034c4 	.word	0x080034c4
 80005c0:	080034cc 	.word	0x080034cc
 80005c4:	080034d8 	.word	0x080034d8
 80005c8:	080034e0 	.word	0x080034e0
 80005cc:	080034ec 	.word	0x080034ec
 80005d0:	00002710 	.word	0x00002710
 80005d4:	080034f0 	.word	0x080034f0
 80005d8:	080034fc 	.word	0x080034fc
 80005dc:	08003508 	.word	0x08003508
 80005e0:	08003514 	.word	0x08003514
 80005e4:	50000400 	.word	0x50000400
 80005e8:	50000800 	.word	0x50000800
 80005ec:	200000c4 	.word	0x200000c4

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b09f      	sub	sp, #124	; 0x7c
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	2440      	movs	r4, #64	; 0x40
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	2338      	movs	r3, #56	; 0x38
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f002 ff4b 	bl	800349c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000606:	232c      	movs	r3, #44	; 0x2c
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	0018      	movs	r0, r3
 800060c:	2314      	movs	r3, #20
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f002 ff43 	bl	800349c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	0018      	movs	r0, r3
 800061a:	2328      	movs	r3, #40	; 0x28
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f002 ff3c 	bl	800349c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <SystemClock_Config+0xd0>)
 800062a:	401a      	ands	r2, r3
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xcc>)
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	0109      	lsls	r1, r1, #4
 8000632:	430a      	orrs	r2, r1
 8000634:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000636:	0021      	movs	r1, r4
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2202      	movs	r2, #2
 800063c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2210      	movs	r2, #16
 8000648:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	187b      	adds	r3, r7, r1
 8000652:	0018      	movs	r0, r3
 8000654:	f001 f9f8 	bl	8001a48 <HAL_RCC_OscConfig>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800065c:	f000 f9f2 	bl	8000a44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	212c      	movs	r1, #44	; 0x2c
 8000662:	187b      	adds	r3, r7, r1
 8000664:	220f      	movs	r2, #15
 8000666:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2100      	movs	r1, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fdaf 	bl	80021e8 <HAL_RCC_ClockConfig>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800068e:	f000 f9d9 	bl	8000a44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	220a      	movs	r2, #10
 8000696:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 ff82 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 f9c8 	bl	8000a44 <Error_Handler>
  }
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b01f      	add	sp, #124	; 0x7c
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	40007000 	.word	0x40007000
 80006c0:	ffffe7ff 	.word	0xffffe7ff

080006c4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	003b      	movs	r3, r7
 80006cc:	0018      	movs	r0, r3
 80006ce:	2308      	movs	r3, #8
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f002 fee2 	bl	800349c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_ADC_Init+0xbc>)
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_ADC_Init+0xc0>)
 80006dc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_ADC_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_ADC_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_ADC_Init+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_ADC_Init+0xbc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_ADC_Init+0xbc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_ADC_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC_Init+0xbc>)
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ADC_Init+0xbc>)
 800070c:	2221      	movs	r2, #33	; 0x21
 800070e:	2100      	movs	r1, #0
 8000710:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_ADC_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC_Init+0xbc>)
 800071a:	22c2      	movs	r2, #194	; 0xc2
 800071c:	32ff      	adds	r2, #255	; 0xff
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ADC_Init+0xbc>)
 8000722:	222c      	movs	r2, #44	; 0x2c
 8000724:	2100      	movs	r1, #0
 8000726:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_ADC_Init+0xbc>)
 800072a:	2204      	movs	r2, #4
 800072c:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_ADC_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_ADC_Init+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_ADC_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_ADC_Init+0xbc>)
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fb9f 	bl	8000e8c <HAL_ADC_Init>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8000752:	f000 f977 	bl	8000a44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000756:	003b      	movs	r3, r7
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <MX_ADC_Init+0xc4>)
 800075a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800075c:	003b      	movs	r3, r7
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0152      	lsls	r2, r2, #5
 8000762:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000764:	003a      	movs	r2, r7
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_ADC_Init+0xbc>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fd02 	bl	8001174 <HAL_ADC_ConfigChannel>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8000774:	f000 f966 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000144 	.word	0x20000144
 8000784:	40012400 	.word	0x40012400
 8000788:	30001000 	.word	0x30001000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_I2C1_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_I2C1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_I2C1_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_I2C1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f80f 	bl	80017ec <HAL_I2C_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d2:	f000 f937 	bl	8000a44 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_I2C1_Init+0x74>)
 80007d8:	2100      	movs	r1, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 f89c 	bl	8001918 <HAL_I2CEx_ConfigAnalogFilter>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f000 f92e 	bl	8000a44 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 f8df 	bl	80019b0 <HAL_I2CEx_ConfigDigitalFilter>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 f925 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000020 	.word	0x20000020
 8000804:	40005400 	.word	0x40005400
 8000808:	00303d5b 	.word	0x00303d5b

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_SPI1_Init+0x68>)
 8000812:	4a19      	ldr	r2, [pc, #100]	; (8000878 <MX_SPI1_Init+0x6c>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI1_Init+0x68>)
 8000818:	2282      	movs	r2, #130	; 0x82
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_SPI1_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_SPI1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_SPI1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x68>)
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_SPI1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SPI1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI1_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SPI1_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI1_Init+0x68>)
 8000858:	2207      	movs	r2, #7
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_SPI1_Init+0x68>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 f81a 	bl	8002898 <HAL_SPI_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f8ec 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	2000006c 	.word	0x2000006c
 8000878:	40013000 	.word	0x40013000

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <MX_USART2_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000888:	2296      	movs	r2, #150	; 0x96
 800088a:	0192      	lsls	r2, r2, #6
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f002 f853 	bl	800296c <HAL_UART_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f8bb 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000c4 	.word	0x200000c4
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	240c      	movs	r4, #12
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f002 fdd5 	bl	800349c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b51      	ldr	r3, [pc, #324]	; (8000a38 <MX_GPIO_Init+0x15c>)
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <MX_GPIO_Init+0x15c>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	430a      	orrs	r2, r1
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fe:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	2204      	movs	r2, #4
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b4b      	ldr	r3, [pc, #300]	; (8000a38 <MX_GPIO_Init+0x15c>)
 800090c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090e:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
 8000916:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000928:	2102      	movs	r1, #2
 800092a:	430a      	orrs	r2, r1
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <MX_GPIO_Init+0x15c>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	2202      	movs	r2, #2
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800093a:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x160>)
 800093c:	2200      	movs	r2, #0
 800093e:	2128      	movs	r1, #40	; 0x28
 8000940:	0018      	movs	r0, r3
 8000942:	f000 ff24 	bl	800178e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2201      	movs	r2, #1
 800094c:	2110      	movs	r1, #16
 800094e:	0018      	movs	r0, r3
 8000950:	f000 ff1d 	bl	800178e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000954:	23e0      	movs	r3, #224	; 0xe0
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	4838      	ldr	r0, [pc, #224]	; (8000a3c <MX_GPIO_Init+0x160>)
 800095a:	2201      	movs	r2, #1
 800095c:	0019      	movs	r1, r3
 800095e:	f000 ff16 	bl	800178e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000962:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <MX_GPIO_Init+0x164>)
 8000964:	2200      	movs	r2, #0
 8000966:	2120      	movs	r1, #32
 8000968:	0018      	movs	r0, r3
 800096a:	f000 ff10 	bl	800178e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC6 PC7 
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7 
 800096e:	193b      	adds	r3, r7, r4
 8000970:	22c4      	movs	r2, #196	; 0xc4
 8000972:	32ff      	adds	r2, #255	; 0xff
 8000974:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	193b      	adds	r3, r7, r4
 8000984:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <MX_GPIO_Init+0x160>)
 8000986:	0019      	movs	r1, r3
 8000988:	0010      	movs	r0, r2
 800098a:	f000 fd65 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800098e:	0021      	movs	r1, r4
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2228      	movs	r2, #40	; 0x28
 8000994:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2201      	movs	r2, #1
 800099a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	000c      	movs	r4, r1
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_GPIO_Init+0x160>)
 80009ae:	0019      	movs	r1, r3
 80009b0:	0010      	movs	r0, r2
 80009b2:	f000 fd51 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2210      	movs	r2, #16
 80009bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2201      	movs	r2, #1
 80009c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	000c      	movs	r4, r1
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	23a0      	movs	r3, #160	; 0xa0
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fd3c 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009e0:	0021      	movs	r1, r4
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	22e0      	movs	r2, #224	; 0xe0
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2201      	movs	r2, #1
 80009ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2201      	movs	r2, #1
 80009f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fc:	000c      	movs	r4, r1
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <MX_GPIO_Init+0x160>)
 8000a02:	0019      	movs	r1, r3
 8000a04:	0010      	movs	r0, r2
 8000a06:	f000 fd27 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a0a:	0021      	movs	r1, r4
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2220      	movs	r2, #32
 8000a10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2201      	movs	r2, #1
 8000a16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <MX_GPIO_Init+0x164>)
 8000a28:	0019      	movs	r1, r3
 8000a2a:	0010      	movs	r0, r2
 8000a2c:	f000 fd14 	bl	8001458 <HAL_GPIO_Init>

}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b009      	add	sp, #36	; 0x24
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	50000800 	.word	0x50000800
 8000a40:	50000400 	.word	0x50000400

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_MspInit+0x24>)
 8000a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x24>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <HAL_MspInit+0x24>)
 8000a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_MspInit+0x24>)
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	0549      	lsls	r1, r1, #21
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	230c      	movs	r3, #12
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f002 fd06 	bl	800349c <memset>
  if(hadc->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <HAL_ADC_MspInit+0x70>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d122      	bne.n	8000ae0 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_ADC_MspInit+0x74>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_ADC_MspInit+0x74>)
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	0089      	lsls	r1, r1, #2
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_ADC_MspInit+0x74>)
 8000aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_ADC_MspInit+0x74>)
 8000aae:	2104      	movs	r1, #4
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_ADC_MspInit+0x74>)
 8000ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab8:	2204      	movs	r2, #4
 8000aba:	4013      	ands	r3, r2
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PC2     ------> ADC_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac0:	210c      	movs	r1, #12
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2203      	movs	r2, #3
 8000acc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_ADC_MspInit+0x78>)
 8000ad8:	0019      	movs	r1, r3
 8000ada:	0010      	movs	r0, r2
 8000adc:	f000 fcbc 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b008      	add	sp, #32
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40012400 	.word	0x40012400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	50000800 	.word	0x50000800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	230c      	movs	r3, #12
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	0018      	movs	r0, r3
 8000b02:	2314      	movs	r3, #20
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f002 fcc8 	bl	800349c <memset>
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2C_MspInit+0x80>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12a      	bne.n	8000b6c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2e:	210c      	movs	r1, #12
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	22c0      	movs	r2, #192	; 0xc0
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2212      	movs	r2, #18
 8000b3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2201      	movs	r2, #1
 8000b42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2203      	movs	r2, #3
 8000b48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2206      	movs	r2, #6
 8000b4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	187a      	adds	r2, r7, r1
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fc7d 	bl	8001458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	0389      	lsls	r1, r1, #14
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b008      	add	sp, #32
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40005400 	.word	0x40005400
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	230c      	movs	r3, #12
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2314      	movs	r3, #20
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fc84 	bl	800349c <memset>
  if(hspi->Instance==SPI1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0x80>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d129      	bne.n	8000bf2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_SPI_MspInit+0x84>)
 8000ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_SPI_MspInit+0x84>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	0149      	lsls	r1, r1, #5
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_SPI_MspInit+0x84>)
 8000bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_SPI_MspInit+0x84>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_SPI_MspInit+0x84>)
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bc4:	210c      	movs	r1, #12
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	22e0      	movs	r2, #224	; 0xe0
 8000bca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2202      	movs	r2, #2
 8000bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	187a      	adds	r2, r7, r1
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 fc33 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b008      	add	sp, #32
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	40013000 	.word	0x40013000
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	2314      	movs	r3, #20
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f002 fc40 	bl	800349c <memset>
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d129      	bne.n	8000c7a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0289      	lsls	r1, r1, #10
 8000c30:	430a      	orrs	r2, r1
 8000c32:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	2201      	movs	r2, #1
 8000c46:	4013      	ands	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c4c:	210c      	movs	r1, #12
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	220c      	movs	r2, #12
 8000c52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2202      	movs	r2, #2
 8000c58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2203      	movs	r2, #3
 8000c64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2204      	movs	r2, #4
 8000c6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	187a      	adds	r2, r7, r1
 8000c6e:	23a0      	movs	r3, #160	; 0xa0
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 fbef 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b008      	add	sp, #32
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40021000 	.word	0x40021000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f8b6 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <SystemInit+0x64>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <SystemInit+0x64>)
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0049      	lsls	r1, r1, #1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <SystemInit+0x64>)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <SystemInit+0x64>)
 8000cd8:	4913      	ldr	r1, [pc, #76]	; (8000d28 <SystemInit+0x68>)
 8000cda:	400a      	ands	r2, r1
 8000cdc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <SystemInit+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <SystemInit+0x64>)
 8000ce4:	4911      	ldr	r1, [pc, #68]	; (8000d2c <SystemInit+0x6c>)
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <SystemInit+0x64>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <SystemInit+0x64>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <SystemInit+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <SystemInit+0x64>)
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <SystemInit+0x70>)
 8000cfe:	400a      	ands	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <SystemInit+0x64>)
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <SystemInit+0x64>)
 8000d08:	490a      	ldr	r1, [pc, #40]	; (8000d34 <SystemInit+0x74>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SystemInit+0x64>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <SystemInit+0x78>)
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	0512      	lsls	r2, r2, #20
 8000d1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40021000 	.word	0x40021000
 8000d28:	88ff400c 	.word	0x88ff400c
 8000d2c:	fef6fff6 	.word	0xfef6fff6
 8000d30:	fffbffff 	.word	0xfffbffff
 8000d34:	ff02ffff 	.word	0xff02ffff
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000d40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d42:	e003      	b.n	8000d4c <LoopCopyDataInit>

08000d44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000d46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d4a:	3104      	adds	r1, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <LoopForever+0xa>)
  ldr  r3, =_edata
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000d50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d54:	d3f6      	bcc.n	8000d44 <CopyDataInit>
  ldr  r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000d58:	e002      	b.n	8000d60 <LoopFillZerobss>

08000d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000d5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5e:	3204      	adds	r2, #4

08000d60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <LoopForever+0x16>)
  cmp  r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d64:	d3f9      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d66:	f7ff ffab 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 fb73 	bl	8003454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fb63 	bl	8000438 <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
   ldr   r0, =_estack
 8000d74:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000d78:	0800359c 	.word	0x0800359c
  ldr  r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d80:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000d84:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000d88:	200001a4 	.word	0x200001a4

08000d8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_COMP_IRQHandler>
	...

08000d90 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x3c>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Init+0x3c>)
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 f811 	bl	8000dd0 <HAL_InitTick>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d003      	beq.n	8000dba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e001      	b.n	8000dbe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dba:	f7ff fe49 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_InitTick+0x50>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	23fa      	movs	r3, #250	; 0xfa
 8000de6:	0099      	lsls	r1, r3, #2
 8000de8:	0010      	movs	r0, r2
 8000dea:	f7ff f98d 	bl	8000108 <__udivsi3>
 8000dee:	0003      	movs	r3, r0
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 fb24 	bl	800143e <HAL_SYSTICK_Config>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d004      	beq.n	8000e04 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e006      	b.n	8000e12 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 fb01 	bl	8001414 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000e12:	230f      	movs	r3, #15
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	781b      	ldrb	r3, [r3, #0]
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b004      	add	sp, #16
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000000 	.word	0x20000000

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  uwTick++;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_IncTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_IncTick+0x14>)
 8000e30:	601a      	str	r2, [r3, #0]
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200001a0 	.word	0x200001a0

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <HAL_GetTick+0x10>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	200001a0 	.word	0x200001a0

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff fff0 	bl	8000e3c <HAL_GetTick>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	3301      	adds	r3, #1
 8000e68:	d002      	beq.n	8000e70 <HAL_Delay+0x20>
  {
    wait++;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	f7ff ffe3 	bl	8000e3c <HAL_GetTick>
 8000e76:	0002      	movs	r2, r0
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d8f7      	bhi.n	8000e72 <HAL_Delay+0x22>
  {
  }
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e159      	b.n	8001152 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10a      	bne.n	8000ebc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2250      	movs	r2, #80	; 0x50
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fdde 	bl	8000a78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	d005      	beq.n	8000ed4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ed2:	d00b      	beq.n	8000eec <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed8:	2210      	movs	r2, #16
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2250      	movs	r2, #80	; 0x50
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e132      	b.n	8001152 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef0:	4a9a      	ldr	r2, [pc, #616]	; (800115c <HAL_ADC_Init+0x2d0>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2203      	movs	r2, #3
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_ADC_Init+0x90>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_ADC_Init+0x90>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_ADC_Init+0x92>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d149      	bne.n	8000fb6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	061b      	lsls	r3, r3, #24
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d00b      	beq.n	8000f46 <HAL_ADC_Init+0xba>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d005      	beq.n	8000f46 <HAL_ADC_Init+0xba>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	061b      	lsls	r3, r3, #24
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d111      	bne.n	8000f6a <HAL_ADC_Init+0xde>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	0892      	lsrs	r2, r2, #2
 8000f54:	611a      	str	r2, [r3, #16]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6919      	ldr	r1, [r3, #16]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	e014      	b.n	8000f94 <HAL_ADC_Init+0x108>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	0892      	lsrs	r2, r2, #2
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	4b79      	ldr	r3, [pc, #484]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b78      	ldr	r3, [pc, #480]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000f80:	4978      	ldr	r1, [pc, #480]	; (8001164 <HAL_ADC_Init+0x2d8>)
 8000f82:	400a      	ands	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	4b76      	ldr	r3, [pc, #472]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000f88:	6819      	ldr	r1, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	4b74      	ldr	r3, [pc, #464]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2118      	movs	r1, #24
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68d9      	ldr	r1, [r3, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000fb6:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b69      	ldr	r3, [pc, #420]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000fbc:	496a      	ldr	r1, [pc, #424]	; (8001168 <HAL_ADC_Init+0x2dc>)
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000fc2:	4b67      	ldr	r3, [pc, #412]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	065a      	lsls	r2, r3, #25
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <HAL_ADC_Init+0x2d4>)
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	055b      	lsls	r3, r3, #21
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d108      	bne.n	8000ff2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	0549      	lsls	r1, r1, #21
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	495b      	ldr	r1, [pc, #364]	; (800116c <HAL_ADC_Init+0x2e0>)
 8000ffe:	400a      	ands	r2, r1
 8001000:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68d9      	ldr	r1, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d101      	bne.n	8001018 <HAL_ADC_Init+0x18c>
 8001014:	2304      	movs	r3, #4
 8001016:	e000      	b.n	800101a <HAL_ADC_Init+0x18e>
 8001018:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800101a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2020      	movs	r0, #32
 8001020:	5c1b      	ldrb	r3, [r3, r0]
 8001022:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001024:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	202c      	movs	r0, #44	; 0x2c
 800102a:	5c1b      	ldrb	r3, [r3, r0]
 800102c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800102e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001034:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800103c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001044:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001052:	23c2      	movs	r3, #194	; 0xc2
 8001054:	33ff      	adds	r3, #255	; 0xff
 8001056:	429a      	cmp	r2, r3
 8001058:	d00b      	beq.n	8001072 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68d9      	ldr	r1, [r3, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2221      	movs	r2, #33	; 0x21
 8001076:	5c9b      	ldrb	r3, [r3, r2]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d11a      	bne.n	80010b2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	5c9b      	ldrb	r3, [r3, r2]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d109      	bne.n	800109a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0249      	lsls	r1, r1, #9
 8001094:	430a      	orrs	r2, r1
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	e00b      	b.n	80010b2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	2220      	movs	r2, #32
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	2201      	movs	r2, #1
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d11f      	bne.n	80010fa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	492a      	ldr	r1, [pc, #168]	; (8001170 <HAL_ADC_Init+0x2e4>)
 80010c6:	400a      	ands	r2, r1
 80010c8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6919      	ldr	r1, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80010d8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80010de:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2101      	movs	r1, #1
 80010f4:	430a      	orrs	r2, r1
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	e00e      	b.n	8001118 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2201      	movs	r2, #1
 8001102:	4013      	ands	r3, r2
 8001104:	2b01      	cmp	r3, #1
 8001106:	d107      	bne.n	8001118 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2107      	movs	r1, #7
 8001124:	438a      	bics	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6959      	ldr	r1, [r3, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001144:	2203      	movs	r2, #3
 8001146:	4393      	bics	r3, r2
 8001148:	2201      	movs	r2, #1
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	fffffefd 	.word	0xfffffefd
 8001160:	40012708 	.word	0x40012708
 8001164:	ffc3ffff 	.word	0xffc3ffff
 8001168:	fdffffff 	.word	0xfdffffff
 800116c:	fffe0219 	.word	0xfffe0219
 8001170:	fffffc03 	.word	0xfffffc03

08001174 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2250      	movs	r2, #80	; 0x50
 8001182:	5c9b      	ldrb	r3, [r3, r2]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_ADC_ConfigChannel+0x18>
 8001188:	2302      	movs	r3, #2
 800118a:	e085      	b.n	8001298 <HAL_ADC_ConfigChannel+0x124>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2250      	movs	r2, #80	; 0x50
 8001190:	2101      	movs	r1, #1
 8001192:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2204      	movs	r2, #4
 800119c:	4013      	ands	r3, r2
 800119e:	d00b      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a4:	2220      	movs	r2, #32
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2250      	movs	r2, #80	; 0x50
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e06f      	b.n	8001298 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a38      	ldr	r2, [pc, #224]	; (80012a0 <HAL_ADC_ConfigChannel+0x12c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d035      	beq.n	800122e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	035b      	lsls	r3, r3, #13
 80011ce:	0b5a      	lsrs	r2, r3, #13
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	02db      	lsls	r3, r3, #11
 80011e0:	4013      	ands	r3, r2
 80011e2:	d009      	beq.n	80011f8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0409      	lsls	r1, r1, #16
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f000 f85e 	bl	80012b4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	029b      	lsls	r3, r3, #10
 8001200:	4013      	ands	r3, r2
 8001202:	d006      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	03c9      	lsls	r1, r1, #15
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	025b      	lsls	r3, r3, #9
 800121a:	4013      	ands	r3, r2
 800121c:	d037      	beq.n	800128e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0449      	lsls	r1, r1, #17
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e02f      	b.n	800128e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	035b      	lsls	r3, r3, #13
 800123a:	0b5b      	lsrs	r3, r3, #13
 800123c:	43d9      	mvns	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	02db      	lsls	r3, r3, #11
 800124e:	4013      	ands	r3, r2
 8001250:	d005      	beq.n	800125e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001258:	4913      	ldr	r1, [pc, #76]	; (80012a8 <HAL_ADC_ConfigChannel+0x134>)
 800125a:	400a      	ands	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	029b      	lsls	r3, r3, #10
 8001266:	4013      	ands	r3, r2
 8001268:	d005      	beq.n	8001276 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001270:	490e      	ldr	r1, [pc, #56]	; (80012ac <HAL_ADC_ConfigChannel+0x138>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	025b      	lsls	r3, r3, #9
 800127e:	4013      	ands	r3, r2
 8001280:	d005      	beq.n	800128e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_ADC_ConfigChannel+0x130>)
 8001288:	4909      	ldr	r1, [pc, #36]	; (80012b0 <HAL_ADC_ConfigChannel+0x13c>)
 800128a:	400a      	ands	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2250      	movs	r2, #80	; 0x50
 8001292:	2100      	movs	r1, #0
 8001294:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	00001001 	.word	0x00001001
 80012a4:	40012708 	.word	0x40012708
 80012a8:	ff7fffff 	.word	0xff7fffff
 80012ac:	ffbfffff 	.word	0xffbfffff
 80012b0:	feffffff 	.word	0xfeffffff

080012b4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <ADC_DelayMicroSecond+0x34>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	490a      	ldr	r1, [pc, #40]	; (80012ec <ADC_DelayMicroSecond+0x38>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7fe ff20 	bl	8000108 <__udivsi3>
 80012c8:	0003      	movs	r3, r0
 80012ca:	001a      	movs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4353      	muls	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80012d2:	e002      	b.n	80012da <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f9      	bne.n	80012d4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	000f4240 	.word	0x000f4240

080012f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	0002      	movs	r2, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b7f      	cmp	r3, #127	; 0x7f
 8001304:	d932      	bls.n	800136c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <NVIC_SetPriority+0xd4>)
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	0019      	movs	r1, r3
 800130e:	230f      	movs	r3, #15
 8001310:	400b      	ands	r3, r1
 8001312:	3b08      	subs	r3, #8
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3306      	adds	r3, #6
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18d3      	adds	r3, r2, r3
 800131c:	3304      	adds	r3, #4
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	1dfa      	adds	r2, r7, #7
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	0011      	movs	r1, r2
 8001326:	2203      	movs	r2, #3
 8001328:	400a      	ands	r2, r1
 800132a:	00d2      	lsls	r2, r2, #3
 800132c:	21ff      	movs	r1, #255	; 0xff
 800132e:	4091      	lsls	r1, r2
 8001330:	000a      	movs	r2, r1
 8001332:	43d2      	mvns	r2, r2
 8001334:	401a      	ands	r2, r3
 8001336:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	22ff      	movs	r2, #255	; 0xff
 800133e:	401a      	ands	r2, r3
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	0018      	movs	r0, r3
 8001346:	2303      	movs	r3, #3
 8001348:	4003      	ands	r3, r0
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <NVIC_SetPriority+0xd4>)
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	001c      	movs	r4, r3
 8001356:	230f      	movs	r3, #15
 8001358:	4023      	ands	r3, r4
 800135a:	3b08      	subs	r3, #8
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	430a      	orrs	r2, r1
 8001360:	3306      	adds	r3, #6
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	18c3      	adds	r3, r0, r3
 8001366:	3304      	adds	r3, #4
 8001368:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800136a:	e027      	b.n	80013bc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136c:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <NVIC_SetPriority+0xd8>)
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	33c0      	adds	r3, #192	; 0xc0
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	589b      	ldr	r3, [r3, r2]
 800137c:	1dfa      	adds	r2, r7, #7
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	0011      	movs	r1, r2
 8001382:	2203      	movs	r2, #3
 8001384:	400a      	ands	r2, r1
 8001386:	00d2      	lsls	r2, r2, #3
 8001388:	21ff      	movs	r1, #255	; 0xff
 800138a:	4091      	lsls	r1, r2
 800138c:	000a      	movs	r2, r1
 800138e:	43d2      	mvns	r2, r2
 8001390:	401a      	ands	r2, r3
 8001392:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	019b      	lsls	r3, r3, #6
 8001398:	22ff      	movs	r2, #255	; 0xff
 800139a:	401a      	ands	r2, r3
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	2303      	movs	r3, #3
 80013a4:	4003      	ands	r3, r0
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <NVIC_SetPriority+0xd8>)
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	430a      	orrs	r2, r1
 80013b6:	33c0      	adds	r3, #192	; 0xc0
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	501a      	str	r2, [r3, r0]
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b003      	add	sp, #12
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	e000e100 	.word	0xe000e100

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <SysTick_Config+0x40>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e010      	b.n	8001404 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <SysTick_Config+0x44>)
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	3a01      	subs	r2, #1
 80013e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	2301      	movs	r3, #1
 80013ec:	425b      	negs	r3, r3
 80013ee:	2103      	movs	r1, #3
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ff7d 	bl	80012f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SysTick_Config+0x44>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x44>)
 80013fe:	2207      	movs	r2, #7
 8001400:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001402:	2300      	movs	r3, #0
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}
 800140c:	00ffffff 	.word	0x00ffffff
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	210f      	movs	r1, #15
 8001420:	187b      	adds	r3, r7, r1
 8001422:	1c02      	adds	r2, r0, #0
 8001424:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	187b      	adds	r3, r7, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <NVIC_SetPriority>
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ffbf 	bl	80013cc <SysTick_Config>
 800144e:	0003      	movs	r3, r0
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800146e:	e155      	b.n	800171c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4091      	lsls	r1, r2
 800147a:	000a      	movs	r2, r1
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d100      	bne.n	8001488 <HAL_GPIO_Init+0x30>
 8001486:	e146      	b.n	8001716 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x40>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b12      	cmp	r3, #18
 8001496:	d123      	bne.n	80014e0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	58d3      	ldr	r3, [r2, r3]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2207      	movs	r2, #7
 80014aa:	4013      	ands	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	409a      	lsls	r2, r3
 80014b2:	0013      	movs	r3, r2
 80014b4:	43da      	mvns	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2107      	movs	r1, #7
 80014c4:	400b      	ands	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	409a      	lsls	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d00b      	beq.n	8001500 <HAL_GPIO_Init+0xa8>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d007      	beq.n	8001500 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f4:	2b11      	cmp	r3, #17
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b12      	cmp	r3, #18
 80014fe:	d130      	bne.n	8001562 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	409a      	lsls	r2, r3
 8001522:	0013      	movs	r3, r2
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001536:	2201      	movs	r2, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	2201      	movs	r2, #1
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	401a      	ands	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	055b      	lsls	r3, r3, #21
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_GPIO_Init+0x17c>
 80015d2:	e0a0      	b.n	8001716 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d4:	4b57      	ldr	r3, [pc, #348]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 80015d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d8:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80015e0:	4a55      	ldr	r2, [pc, #340]	; (8001738 <HAL_GPIO_Init+0x2e0>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	589b      	ldr	r3, [r3, r2]
 80015ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2203      	movs	r2, #3
 80015f2:	4013      	ands	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	23a0      	movs	r3, #160	; 0xa0
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	429a      	cmp	r2, r3
 800160c:	d01f      	beq.n	800164e <HAL_GPIO_Init+0x1f6>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4a      	ldr	r2, [pc, #296]	; (800173c <HAL_GPIO_Init+0x2e4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d019      	beq.n	800164a <HAL_GPIO_Init+0x1f2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a49      	ldr	r2, [pc, #292]	; (8001740 <HAL_GPIO_Init+0x2e8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x1ee>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_GPIO_Init+0x2ec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x1ea>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a47      	ldr	r2, [pc, #284]	; (8001748 <HAL_GPIO_Init+0x2f0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x1e6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a46      	ldr	r2, [pc, #280]	; (800174c <HAL_GPIO_Init+0x2f4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x1e2>
 8001636:	2305      	movs	r3, #5
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800163a:	2306      	movs	r3, #6
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800163e:	2304      	movs	r3, #4
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800164e:	2300      	movs	r3, #0
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2103      	movs	r1, #3
 8001654:	400a      	ands	r2, r1
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4935      	ldr	r1, [pc, #212]	; (8001738 <HAL_GPIO_Init+0x2e0>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	035b      	lsls	r3, r3, #13
 80016da:	4013      	ands	r3, r2
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	039b      	lsls	r3, r3, #14
 8001704:	4013      	ands	r3, r2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	40da      	lsrs	r2, r3
 8001724:	1e13      	subs	r3, r2, #0
 8001726:	d000      	beq.n	800172a <HAL_GPIO_Init+0x2d2>
 8001728:	e6a2      	b.n	8001470 <HAL_GPIO_Init+0x18>
  }
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b006      	add	sp, #24
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	50000400 	.word	0x50000400
 8001740:	50000800 	.word	0x50000800
 8001744:	50000c00 	.word	0x50000c00
 8001748:	50001000 	.word	0x50001000
 800174c:	50001c00 	.word	0x50001c00
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	000a      	movs	r2, r1
 800175e:	1cbb      	adds	r3, r7, #2
 8001760:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	1cba      	adds	r2, r7, #2
 8001768:	8812      	ldrh	r2, [r2, #0]
 800176a:	4013      	ands	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800176e:	230f      	movs	r3, #15
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e003      	b.n	8001780 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001778:	230f      	movs	r3, #15
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001780:	230f      	movs	r3, #15
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781b      	ldrb	r3, [r3, #0]
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	0008      	movs	r0, r1
 8001798:	0011      	movs	r1, r2
 800179a:	1cbb      	adds	r3, r7, #2
 800179c:	1c02      	adds	r2, r0, #0
 800179e:	801a      	strh	r2, [r3, #0]
 80017a0:	1c7b      	adds	r3, r7, #1
 80017a2:	1c0a      	adds	r2, r1, #0
 80017a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80017a6:	1c7b      	adds	r3, r7, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	1cbb      	adds	r3, r7, #2
 80017b0:	881a      	ldrh	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017b6:	e003      	b.n	80017c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017b8:	1cbb      	adds	r3, r7, #2
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	000a      	movs	r2, r1
 80017d2:	1cbb      	adds	r3, r7, #2
 80017d4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	1cbb      	adds	r3, r7, #2
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	405a      	eors	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	615a      	str	r2, [r3, #20]
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e082      	b.n	8001904 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d107      	bne.n	800181a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff f96d 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	2124      	movs	r1, #36	; 0x24
 8001820:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	438a      	bics	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_I2C_Init+0x120>)
 800183c:	400a      	ands	r2, r1
 800183e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4931      	ldr	r1, [pc, #196]	; (8001910 <HAL_I2C_Init+0x124>)
 800184c:	400a      	ands	r2, r1
 800184e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	0209      	lsls	r1, r1, #8
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e007      	b.n	800187a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2184      	movs	r1, #132	; 0x84
 8001874:	0209      	lsls	r1, r1, #8
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d104      	bne.n	800188c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	491f      	ldr	r1, [pc, #124]	; (8001914 <HAL_I2C_Init+0x128>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	491a      	ldr	r1, [pc, #104]	; (8001910 <HAL_I2C_Init+0x124>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	0011      	movs	r1, r2
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69d9      	ldr	r1, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	2120      	movs	r1, #32
 80018f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2242      	movs	r2, #66	; 0x42
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f0ffffff 	.word	0xf0ffffff
 8001910:	ffff7fff 	.word	0xffff7fff
 8001914:	02008000 	.word	0x02008000

08001918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2241      	movs	r2, #65	; 0x41
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b20      	cmp	r3, #32
 800192c:	d138      	bne.n	80019a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2240      	movs	r2, #64	; 0x40
 8001932:	5c9b      	ldrb	r3, [r3, r2]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001938:	2302      	movs	r3, #2
 800193a:	e032      	b.n	80019a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	2101      	movs	r1, #1
 8001942:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2241      	movs	r2, #65	; 0x41
 8001948:	2124      	movs	r1, #36	; 0x24
 800194a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	438a      	bics	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4911      	ldr	r1, [pc, #68]	; (80019ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001968:	400a      	ands	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2241      	movs	r2, #65	; 0x41
 8001990:	2120      	movs	r1, #32
 8001992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	2100      	movs	r1, #0
 800199a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
  }
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	ffffefff 	.word	0xffffefff

080019b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2241      	movs	r2, #65	; 0x41
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d139      	bne.n	8001a3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e033      	b.n	8001a3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2240      	movs	r2, #64	; 0x40
 80019d8:	2101      	movs	r1, #1
 80019da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2241      	movs	r2, #65	; 0x41
 80019e0:	2124      	movs	r1, #36	; 0x24
 80019e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	438a      	bics	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2241      	movs	r2, #65	; 0x41
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	2100      	movs	r1, #0
 8001a34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
  }
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	fffff0ff 	.word	0xfffff0ff

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f000 fbbc 	bl	80021d4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5c:	4bc8      	ldr	r3, [pc, #800]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	220c      	movs	r2, #12
 8001a62:	4013      	ands	r3, r2
 8001a64:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a66:	4bc6      	ldr	r3, [pc, #792]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	025b      	lsls	r3, r3, #9
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_OscConfig+0x36>
 8001a7c:	e07e      	b.n	8001b7c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d007      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x68>
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d10d      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	4bba      	ldr	r3, [pc, #744]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5a>
 8001aa0:	e06b      	b.n	8001b7a <HAL_RCC_OscConfig+0x132>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d167      	bne.n	8001b7a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f000 fb92 	bl	80021d4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x84>
 8001abc:	4bb0      	ldr	r3, [pc, #704]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4baf      	ldr	r3, [pc, #700]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0249      	lsls	r1, r1, #9
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e027      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	23a0      	movs	r3, #160	; 0xa0
 8001ad2:	02db      	lsls	r3, r3, #11
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10e      	bne.n	8001af6 <HAL_RCC_OscConfig+0xae>
 8001ad8:	4ba9      	ldr	r3, [pc, #676]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4ba8      	ldr	r3, [pc, #672]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	02c9      	lsls	r1, r1, #11
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4ba6      	ldr	r3, [pc, #664]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4ba5      	ldr	r3, [pc, #660]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0249      	lsls	r1, r1, #9
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e012      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001af6:	4ba2      	ldr	r3, [pc, #648]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001afc:	49a1      	ldr	r1, [pc, #644]	; (8001d84 <HAL_RCC_OscConfig+0x33c>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4b9f      	ldr	r3, [pc, #636]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4b9b      	ldr	r3, [pc, #620]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b9a      	ldr	r3, [pc, #616]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b16:	499c      	ldr	r1, [pc, #624]	; (8001d88 <HAL_RCC_OscConfig+0x340>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f98a 	bl	8000e3c <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b2c:	e009      	b.n	8001b42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f985 	bl	8000e3c <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d902      	bls.n	8001b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f000 fb49 	bl	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b42:	4b8f      	ldr	r3, [pc, #572]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	029b      	lsls	r3, r3, #10
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d0ef      	beq.n	8001b2e <HAL_RCC_OscConfig+0xe6>
 8001b4e:	e015      	b.n	8001b7c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f974 	bl	8000e3c <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f96f 	bl	8000e3c <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e333      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b6c:	4b84      	ldr	r3, [pc, #528]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	4013      	ands	r3, r2
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x112>
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d100      	bne.n	8001b88 <HAL_RCC_OscConfig+0x140>
 8001b86:	e098      	b.n	8001cba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	2220      	movs	r2, #32
 8001b92:	4013      	ands	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b96:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b79      	ldr	r3, [pc, #484]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d13d      	bne.n	8001c32 <HAL_RCC_OscConfig+0x1ea>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d13a      	bne.n	8001c32 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x188>
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e301      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b6b      	ldr	r3, [pc, #428]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a6d      	ldr	r2, [pc, #436]	; (8001d8c <HAL_RCC_OscConfig+0x344>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	021a      	lsls	r2, r3, #8
 8001be0:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001be6:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2209      	movs	r2, #9
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf8:	f000 fc20 	bl	800243c <HAL_RCC_GetSysClockFreq>
 8001bfc:	0001      	movs	r1, r0
 8001bfe:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	220f      	movs	r2, #15
 8001c06:	4013      	ands	r3, r2
 8001c08:	4a61      	ldr	r2, [pc, #388]	; (8001d90 <HAL_RCC_OscConfig+0x348>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	40da      	lsrs	r2, r3
 8001c10:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <HAL_RCC_OscConfig+0x34c>)
 8001c12:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c14:	2513      	movs	r5, #19
 8001c16:	197c      	adds	r4, r7, r5
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff f8d9 	bl	8000dd0 <HAL_InitTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c22:	197b      	adds	r3, r7, r5
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d047      	beq.n	8001cba <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c2a:	2313      	movs	r3, #19
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	e2d0      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d027      	beq.n	8001c88 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c38:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2209      	movs	r2, #9
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f8f7 	bl	8000e3c <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f8f2 	bl	8000e3c <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e2b6      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c66:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d0f1      	beq.n	8001c54 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a45      	ldr	r2, [pc, #276]	; (8001d8c <HAL_RCC_OscConfig+0x344>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	021a      	lsls	r2, r3, #8
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	e018      	b.n	8001cba <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	438a      	bics	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f8d2 	bl	8000e3c <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f8cd 	bl	8000e3c <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e291      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f1      	bne.n	8001c9e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x27e>
 8001cc4:	e09f      	b.n	8001e06 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d13f      	bne.n	8001d4c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x29c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e277      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x350>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	0a19      	lsrs	r1, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	061a      	lsls	r2, r3, #24
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	0b5b      	lsrs	r3, r3, #13
 8001d12:	3301      	adds	r3, #1
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0212      	lsls	r2, r2, #8
 8001d18:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	210f      	movs	r1, #15
 8001d22:	400b      	ands	r3, r1
 8001d24:	491a      	ldr	r1, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x348>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_RCC_OscConfig+0x34c>)
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d2e:	2513      	movs	r5, #19
 8001d30:	197c      	adds	r4, r7, r5
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff f84c 	bl	8000dd0 <HAL_InitTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d3c:	197b      	adds	r3, r7, r5
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d060      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001d44:	2313      	movs	r3, #19
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	e243      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d03e      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_OscConfig+0x338>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0049      	lsls	r1, r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff f86b 	bl	8000e3c <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d6a:	e017      	b.n	8001d9c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f866 	bl	8000e3c <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e22a      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	fffeffff 	.word	0xfffeffff
 8001d88:	fffbffff 	.word	0xfffbffff
 8001d8c:	ffffe0ff 	.word	0xffffe0ff
 8001d90:	08003520 	.word	0x08003520
 8001d94:	20000000 	.word	0x20000000
 8001d98:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d9c:	4bc6      	ldr	r3, [pc, #792]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0e1      	beq.n	8001d6c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	4bc3      	ldr	r3, [pc, #780]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4ac3      	ldr	r2, [pc, #780]	; (80020bc <HAL_RCC_OscConfig+0x674>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db6:	4bc0      	ldr	r3, [pc, #768]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbc:	4bbe      	ldr	r3, [pc, #760]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	0a19      	lsrs	r1, r3, #8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	061a      	lsls	r2, r3, #24
 8001dca:	4bbb      	ldr	r3, [pc, #748]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	e019      	b.n	8001e06 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd2:	4bb9      	ldr	r3, [pc, #740]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4bb8      	ldr	r3, [pc, #736]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001dd8:	49b9      	ldr	r1, [pc, #740]	; (80020c0 <HAL_RCC_OscConfig+0x678>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff f82d 	bl	8000e3c <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de8:	f7ff f828 	bl	8000e3c <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1ec      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dfa:	4baf      	ldr	r3, [pc, #700]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d036      	beq.n	8001e7e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e18:	4ba7      	ldr	r3, [pc, #668]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e1c:	4ba6      	ldr	r3, [pc, #664]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f80a 	bl	8000e3c <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f805 	bl	8000e3c <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1c9      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e40:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d0f1      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3e6>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b9a      	ldr	r3, [pc, #616]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e50:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	438a      	bics	r2, r1
 8001e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7fe fff0 	bl	8000e3c <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e62:	f7fe ffeb 	bl	8000e3c <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1af      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e74:	4b90      	ldr	r3, [pc, #576]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f1      	bne.n	8001e62 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2204      	movs	r2, #4
 8001e84:	4013      	ands	r3, r2
 8001e86:	d100      	bne.n	8001e8a <HAL_RCC_OscConfig+0x442>
 8001e88:	e0af      	b.n	8001fea <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2323      	movs	r3, #35	; 0x23
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	055b      	lsls	r3, r3, #21
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0549      	lsls	r1, r1, #21
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001eac:	2323      	movs	r3, #35	; 0x23
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d11a      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x67c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x67c>)
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	0049      	lsls	r1, r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ece:	f7fe ffb5 	bl	8000e3c <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7fe ffb0 	bl	8000e3c <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e174      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0x67c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4ca>
 8001f02:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f06:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0049      	lsls	r1, r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f10:	e031      	b.n	8001f76 <HAL_RCC_OscConfig+0x52e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f20:	4967      	ldr	r1, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x678>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	651a      	str	r2, [r3, #80]	; 0x50
 8001f26:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f2c:	4966      	ldr	r1, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	651a      	str	r2, [r3, #80]	; 0x50
 8001f32:	e020      	b.n	8001f76 <HAL_RCC_OscConfig+0x52e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	23a0      	movs	r3, #160	; 0xa0
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10e      	bne.n	8001f5e <HAL_RCC_OscConfig+0x516>
 8001f40:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f44:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	00c9      	lsls	r1, r1, #3
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f52:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0049      	lsls	r1, r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x52e>
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f62:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f64:	4956      	ldr	r1, [pc, #344]	; (80020c0 <HAL_RCC_OscConfig+0x678>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	651a      	str	r2, [r3, #80]	; 0x50
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f6e:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f70:	4955      	ldr	r1, [pc, #340]	; (80020c8 <HAL_RCC_OscConfig+0x680>)
 8001f72:	400a      	ands	r2, r1
 8001f74:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe ff5d 	bl	8000e3c <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f86:	e009      	b.n	8001f9c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe ff58 	bl	8000e3c <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_RCC_OscConfig+0x684>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e11b      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0ef      	beq.n	8001f88 <HAL_RCC_OscConfig+0x540>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe ff47 	bl	8000e3c <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ff42 	bl	8000e3c <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x684>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e105      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1ef      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fd4:	2323      	movs	r3, #35	; 0x23
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d105      	bne.n	8001fea <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001fe4:	493a      	ldr	r1, [pc, #232]	; (80020d0 <HAL_RCC_OscConfig+0x688>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d049      	beq.n	8002088 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d026      	beq.n	800204a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8002002:	2101      	movs	r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 800200a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 800200e:	2101      	movs	r1, #1
 8002010:	430a      	orrs	r2, r1
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	0189      	lsls	r1, r1, #6
 800201e:	430a      	orrs	r2, r1
 8002020:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe ff0b 	bl	8000e3c <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202c:	f7fe ff06 	bl	8000e3c <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0ca      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d0f1      	beq.n	800202c <HAL_RCC_OscConfig+0x5e4>
 8002048:	e01e      	b.n	8002088 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8002050:	2101      	movs	r1, #1
 8002052:	438a      	bics	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_OscConfig+0x68c>)
 800205c:	491e      	ldr	r1, [pc, #120]	; (80020d8 <HAL_RCC_OscConfig+0x690>)
 800205e:	400a      	ands	r2, r1
 8002060:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe feeb 	bl	8000e3c <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206c:	f7fe fee6 	bl	8000e3c <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0aa      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d1f1      	bne.n	800206c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d100      	bne.n	8002092 <HAL_RCC_OscConfig+0x64a>
 8002090:	e09f      	b.n	80021d2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d100      	bne.n	800209a <HAL_RCC_OscConfig+0x652>
 8002098:	e078      	b.n	800218c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d159      	bne.n	8002156 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_RCC_OscConfig+0x670>)
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x694>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe fec5 	bl	8000e3c <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020b6:	e01c      	b.n	80020f2 <HAL_RCC_OscConfig+0x6aa>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	ffff1fff 	.word	0xffff1fff
 80020c0:	fffffeff 	.word	0xfffffeff
 80020c4:	40007000 	.word	0x40007000
 80020c8:	fffffbff 	.word	0xfffffbff
 80020cc:	00001388 	.word	0x00001388
 80020d0:	efffffff 	.word	0xefffffff
 80020d4:	40010000 	.word	0x40010000
 80020d8:	ffffdfff 	.word	0xffffdfff
 80020dc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe feac 	bl	8000e3c <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e070      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	049b      	lsls	r3, r3, #18
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fe:	4b37      	ldr	r3, [pc, #220]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a37      	ldr	r2, [pc, #220]	; (80021e0 <HAL_RCC_OscConfig+0x798>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	431a      	orrs	r2, r3
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 800211a:	430a      	orrs	r2, r1
 800211c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	0449      	lsls	r1, r1, #17
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fe86 	bl	8000e3c <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fe81 	bl	8000e3c <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e045      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	049b      	lsls	r3, r3, #18
 8002150:	4013      	ands	r3, r2
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x6ee>
 8002154:	e03d      	b.n	80021d2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 800215c:	4921      	ldr	r1, [pc, #132]	; (80021e4 <HAL_RCC_OscConfig+0x79c>)
 800215e:	400a      	ands	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe fe6b 	bl	8000e3c <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fe66 	bl	8000e3c <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e02a      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	049b      	lsls	r3, r3, #18
 8002186:	4013      	ands	r3, r2
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x724>
 800218a:	e022      	b.n	80021d2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x794>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	025b      	lsls	r3, r3, #9
 80021a4:	401a      	ands	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10f      	bne.n	80021ce <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	23f0      	movs	r3, #240	; 0xf0
 80021b2:	039b      	lsls	r3, r3, #14
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	401a      	ands	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b00a      	add	sp, #40	; 0x28
 80021da:	bdb0      	pop	{r4, r5, r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	ff02ffff 	.word	0xff02ffff
 80021e4:	feffffff 	.word	0xfeffffff

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e10d      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d911      	bls.n	800222e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b85      	ldr	r3, [pc, #532]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0f4      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	22f0      	movs	r2, #240	; 0xf0
 800223e:	4393      	bics	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b77      	ldr	r3, [pc, #476]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d100      	bne.n	8002258 <HAL_RCC_ClockConfig+0x70>
 8002256:	e089      	b.n	800236c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d107      	bne.n	8002270 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002260:	4b70      	ldr	r3, [pc, #448]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	4013      	ands	r3, r2
 800226a:	d120      	bne.n	80022ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0d3      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	049b      	lsls	r3, r3, #18
 8002280:	4013      	ands	r3, r2
 8002282:	d114      	bne.n	80022ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0c7      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d106      	bne.n	800229e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002290:	4b64      	ldr	r3, [pc, #400]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2204      	movs	r2, #4
 8002296:	4013      	ands	r3, r2
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0bc      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800229e:	4b61      	ldr	r3, [pc, #388]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0b4      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2203      	movs	r2, #3
 80022b4:	4393      	bics	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fdbb 	bl	8000e3c <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d111      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d2:	e009      	b.n	80022e8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d4:	f7fe fdb2 	bl	8000e3c <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_RCC_ClockConfig+0x240>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e097      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e8:	4b4e      	ldr	r3, [pc, #312]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	220c      	movs	r2, #12
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d1ef      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xec>
 80022f4:	e03a      	b.n	800236c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d111      	bne.n	8002322 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fe:	e009      	b.n	8002314 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7fe fd9c 	bl	8000e3c <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	4a47      	ldr	r2, [pc, #284]	; (8002428 <HAL_RCC_ClockConfig+0x240>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e081      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	220c      	movs	r2, #12
 800231a:	4013      	ands	r3, r2
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d1ef      	bne.n	8002300 <HAL_RCC_ClockConfig+0x118>
 8002320:	e024      	b.n	800236c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d11b      	bne.n	8002362 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800232a:	e009      	b.n	8002340 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7fe fd86 	bl	8000e3c <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	4a3c      	ldr	r2, [pc, #240]	; (8002428 <HAL_RCC_ClockConfig+0x240>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e06b      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	220c      	movs	r2, #12
 8002346:	4013      	ands	r3, r2
 8002348:	2b04      	cmp	r3, #4
 800234a:	d1ef      	bne.n	800232c <HAL_RCC_ClockConfig+0x144>
 800234c:	e00e      	b.n	800236c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234e:	f7fe fd75 	bl	8000e3c <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a33      	ldr	r2, [pc, #204]	; (8002428 <HAL_RCC_ClockConfig+0x240>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e05a      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	220c      	movs	r2, #12
 8002368:	4013      	ands	r3, r2
 800236a:	d1f0      	bne.n	800234e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d211      	bcs.n	800239e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_ClockConfig+0x238>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d001      	beq.n	800239e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e03c      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2204      	movs	r2, #4
 80023a4:	4013      	ands	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	; (800242c <HAL_RCC_ClockConfig+0x244>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2208      	movs	r2, #8
 80023c2:	4013      	ands	r3, r2
 80023c4:	d00a      	beq.n	80023dc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x248>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	00da      	lsls	r2, r3, #3
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023dc:	f000 f82e 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023e0:	0001      	movs	r1, r0
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_ClockConfig+0x23c>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	220f      	movs	r2, #15
 80023ea:	4013      	ands	r3, r2
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_RCC_ClockConfig+0x24c>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	000a      	movs	r2, r1
 80023f2:	40da      	lsrs	r2, r3
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_ClockConfig+0x250>)
 80023f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80023f8:	250b      	movs	r5, #11
 80023fa:	197c      	adds	r4, r7, r5
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe fce7 	bl	8000dd0 <HAL_InitTick>
 8002402:	0003      	movs	r3, r0
 8002404:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002406:	197b      	adds	r3, r7, r5
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800240e:	230b      	movs	r3, #11
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	e000      	b.n	8002418 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b004      	add	sp, #16
 800241e:	bdb0      	pop	{r4, r5, r7, pc}
 8002420:	40022000 	.word	0x40022000
 8002424:	40021000 	.word	0x40021000
 8002428:	00001388 	.word	0x00001388
 800242c:	fffff8ff 	.word	0xfffff8ff
 8002430:	ffffc7ff 	.word	0xffffc7ff
 8002434:	08003520 	.word	0x08003520
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	220c      	movs	r2, #12
 800244c:	4013      	ands	r3, r2
 800244e:	2b08      	cmp	r3, #8
 8002450:	d00e      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x34>
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d00f      	beq.n	8002476 <HAL_RCC_GetSysClockFreq+0x3a>
 8002456:	2b04      	cmp	r3, #4
 8002458:	d157      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800245a:	4b35      	ldr	r3, [pc, #212]	; (8002530 <HAL_RCC_GetSysClockFreq+0xf4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	4013      	ands	r3, r2
 8002462:	d002      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002466:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002468:	e05d      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <HAL_RCC_GetSysClockFreq+0xfc>)
 800246c:	613b      	str	r3, [r7, #16]
      break;
 800246e:	e05a      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_RCC_GetSysClockFreq+0x100>)
 8002472:	613b      	str	r3, [r7, #16]
      break;
 8002474:	e057      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	0c9b      	lsrs	r3, r3, #18
 800247a:	220f      	movs	r2, #15
 800247c:	4013      	ands	r3, r2
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_RCC_GetSysClockFreq+0x104>)
 8002480:	5cd3      	ldrb	r3, [r2, r3]
 8002482:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	0d9b      	lsrs	r3, r3, #22
 8002488:	2203      	movs	r2, #3
 800248a:	4013      	ands	r3, r2
 800248c:	3301      	adds	r3, #1
 800248e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	025b      	lsls	r3, r3, #9
 8002498:	4013      	ands	r3, r2
 800249a:	d00f      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	000a      	movs	r2, r1
 80024a0:	0152      	lsls	r2, r2, #5
 80024a2:	1a52      	subs	r2, r2, r1
 80024a4:	0193      	lsls	r3, r2, #6
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	185b      	adds	r3, r3, r1
 80024ac:	025b      	lsls	r3, r3, #9
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fd fe29 	bl	8000108 <__udivsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e023      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2210      	movs	r2, #16
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00f      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	000a      	movs	r2, r1
 80024ca:	0152      	lsls	r2, r2, #5
 80024cc:	1a52      	subs	r2, r2, r1
 80024ce:	0193      	lsls	r3, r2, #6
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	185b      	adds	r3, r3, r1
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	0018      	movs	r0, r3
 80024dc:	f7fd fe14 	bl	8000108 <__udivsi3>
 80024e0:	0003      	movs	r3, r0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e00e      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	000a      	movs	r2, r1
 80024ea:	0152      	lsls	r2, r2, #5
 80024ec:	1a52      	subs	r2, r2, r1
 80024ee:	0193      	lsls	r3, r2, #6
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	185b      	adds	r3, r3, r1
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fd fe04 	bl	8000108 <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
      break;
 8002508:	e00d      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_GetSysClockFreq+0xf4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	0b5b      	lsrs	r3, r3, #13
 8002510:	2207      	movs	r2, #7
 8002512:	4013      	ands	r3, r2
 8002514:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	0212      	lsls	r2, r2, #8
 800251e:	409a      	lsls	r2, r3
 8002520:	0013      	movs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002526:	693b      	ldr	r3, [r7, #16]
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b006      	add	sp, #24
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	003d0900 	.word	0x003d0900
 8002538:	00f42400 	.word	0x00f42400
 800253c:	007a1200 	.word	0x007a1200
 8002540:	08003538 	.word	0x08003538

08002544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <HAL_RCC_GetHCLKFreq+0x10>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	20000000 	.word	0x20000000

08002558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800255c:	f7ff fff2 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002560:	0001      	movs	r1, r0
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	2207      	movs	r2, #7
 800256a:	4013      	ands	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	40d9      	lsrs	r1, r3
 8002572:	000b      	movs	r3, r1
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	40021000 	.word	0x40021000
 8002580:	08003530 	.word	0x08003530

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffdc 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 800258c:	0001      	movs	r1, r0
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	2207      	movs	r2, #7
 8002596:	4013      	ands	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	40d9      	lsrs	r1, r3
 800259e:	000b      	movs	r3, r1
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08003530 	.word	0x08003530

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2220      	movs	r2, #32
 80025be:	4013      	ands	r3, r2
 80025c0:	d106      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	4013      	ands	r3, r2
 80025cc:	d100      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80025ce:	e0dd      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80025d0:	2317      	movs	r3, #23
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d8:	4ba4      	ldr	r3, [pc, #656]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	055b      	lsls	r3, r3, #21
 80025e0:	4013      	ands	r3, r2
 80025e2:	d10a      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	4ba1      	ldr	r3, [pc, #644]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e8:	4ba0      	ldr	r3, [pc, #640]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0549      	lsls	r1, r1, #21
 80025ee:	430a      	orrs	r2, r1
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025f2:	2317      	movs	r3, #23
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b9d      	ldr	r3, [pc, #628]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4013      	ands	r3, r2
 8002604:	d11a      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b9a      	ldr	r3, [pc, #616]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0049      	lsls	r1, r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002614:	f7fe fc12 	bl	8000e3c <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe fc0d 	bl	8000e3c <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e118      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4013      	ands	r3, r2
 800263a:	d0f0      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800263c:	4b8b      	ldr	r3, [pc, #556]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	23c0      	movs	r3, #192	; 0xc0
 8002642:	039b      	lsls	r3, r3, #14
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	23c0      	movs	r3, #192	; 0xc0
 800264e:	039b      	lsls	r3, r3, #14
 8002650:	4013      	ands	r3, r2
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d107      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	039b      	lsls	r3, r3, #14
 8002660:	4013      	ands	r3, r2
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d013      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	23c0      	movs	r3, #192	; 0xc0
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	401a      	ands	r2, r3
 8002672:	23c0      	movs	r3, #192	; 0xc0
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	429a      	cmp	r2, r3
 8002678:	d10a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800267a:	4b7c      	ldr	r3, [pc, #496]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	029b      	lsls	r3, r3, #10
 8002682:	401a      	ands	r2, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	429a      	cmp	r2, r3
 800268a:	d101      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0e8      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002690:	4b76      	ldr	r3, [pc, #472]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002694:	23c0      	movs	r3, #192	; 0xc0
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d049      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	4013      	ands	r3, r2
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d004      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2220      	movs	r2, #32
 80026b8:	4013      	ands	r3, r2
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	23c0      	movs	r3, #192	; 0xc0
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	4013      	ands	r3, r2
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d034      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4013      	ands	r3, r2
 80026d6:	d02e      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80026d8:	4b64      	ldr	r3, [pc, #400]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026dc:	4a65      	ldr	r2, [pc, #404]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026de:	4013      	ands	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e2:	4b62      	ldr	r3, [pc, #392]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e6:	4b61      	ldr	r3, [pc, #388]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0309      	lsls	r1, r1, #12
 80026ec:	430a      	orrs	r2, r1
 80026ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f0:	4b5e      	ldr	r3, [pc, #376]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f4:	4b5d      	ldr	r3, [pc, #372]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026f6:	4960      	ldr	r1, [pc, #384]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026fc:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d014      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fb96 	bl	8000e3c <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002714:	e009      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe fb91 	bl	8000e3c <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	4a56      	ldr	r2, [pc, #344]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e09b      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800272c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d0ef      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	23c0      	movs	r3, #192	; 0xc0
 800273c:	029b      	lsls	r3, r3, #10
 800273e:	401a      	ands	r2, r3
 8002740:	23c0      	movs	r3, #192	; 0xc0
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	429a      	cmp	r2, r3
 8002746:	d10c      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002748:	4b48      	ldr	r3, [pc, #288]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	23c0      	movs	r3, #192	; 0xc0
 8002758:	039b      	lsls	r3, r3, #14
 800275a:	401a      	ands	r2, r3
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	4b42      	ldr	r3, [pc, #264]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002764:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	23c0      	movs	r3, #192	; 0xc0
 800276c:	029b      	lsls	r3, r3, #10
 800276e:	401a      	ands	r2, r3
 8002770:	4b3e      	ldr	r3, [pc, #248]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002772:	430a      	orrs	r2, r1
 8002774:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002776:	2317      	movs	r3, #23
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002784:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002786:	493f      	ldr	r1, [pc, #252]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002788:	400a      	ands	r2, r1
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002796:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	2203      	movs	r2, #3
 800279c:	4393      	bics	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2202      	movs	r2, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	220c      	movs	r2, #12
 80027ba:	4393      	bics	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2204      	movs	r2, #4
 80027ce:	4013      	ands	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027d8:	4013      	ands	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027e2:	430a      	orrs	r2, r1
 80027e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2208      	movs	r2, #8
 80027ec:	4013      	ands	r3, r2
 80027ee:	d009      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	4a25      	ldr	r2, [pc, #148]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002800:	430a      	orrs	r2, r1
 8002802:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4a17      	ldr	r2, [pc, #92]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002820:	430a      	orrs	r2, r1
 8002822:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2240      	movs	r2, #64	; 0x40
 800282a:	4013      	ands	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800283e:	430a      	orrs	r2, r1
 8002840:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	4013      	ands	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002850:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800285c:	430a      	orrs	r2, r1
 800285e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b006      	add	sp, #24
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	40021000 	.word	0x40021000
 8002870:	40007000 	.word	0x40007000
 8002874:	fffcffff 	.word	0xfffcffff
 8002878:	fff7ffff 	.word	0xfff7ffff
 800287c:	00001388 	.word	0x00001388
 8002880:	ffcfffff 	.word	0xffcfffff
 8002884:	efffffff 	.word	0xefffffff
 8002888:	fffff3ff 	.word	0xfffff3ff
 800288c:	ffffcfff 	.word	0xffffcfff
 8002890:	fbffffff 	.word	0xfbffffff
 8002894:	fff3ffff 	.word	0xfff3ffff

08002898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e059      	b.n	800295e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2251      	movs	r2, #81	; 0x51
 80028b4:	5c9b      	ldrb	r3, [r3, r2]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2250      	movs	r2, #80	; 0x50
 80028c0:	2100      	movs	r1, #0
 80028c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7fe f958 	bl	8000b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2251      	movs	r2, #81	; 0x51
 80028d0:	2102      	movs	r1, #2
 80028d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	438a      	bics	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6999      	ldr	r1, [r3, #24]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	400b      	ands	r3, r1
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	0011      	movs	r1, r2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	2204      	movs	r2, #4
 800292e:	4013      	ands	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <HAL_SPI_Init+0xd0>)
 800294a:	400a      	ands	r2, r1
 800294c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2251      	movs	r2, #81	; 0x51
 8002958:	2101      	movs	r1, #1
 800295a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b002      	add	sp, #8
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	fffff7ff 	.word	0xfffff7ff

0800296c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e044      	b.n	8002a08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2270      	movs	r2, #112	; 0x70
 800298a:	2100      	movs	r1, #0
 800298c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0018      	movs	r0, r3
 8002992:	f7fe f937 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2224      	movs	r2, #36	; 0x24
 800299a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2101      	movs	r1, #1
 80029a8:	438a      	bics	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f8d8 	bl	8002b64 <UART_SetConfig>
 80029b4:	0003      	movs	r3, r0
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e024      	b.n	8002a08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 fbff 	bl	80031cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	490d      	ldr	r1, [pc, #52]	; (8002a10 <HAL_UART_Init+0xa4>)
 80029da:	400a      	ands	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	212a      	movs	r1, #42	; 0x2a
 80029ea:	438a      	bics	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fc97 	bl	8003334 <UART_CheckIdleState>
 8002a06:	0003      	movs	r3, r0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	ffffb7ff 	.word	0xffffb7ff

08002a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	1dbb      	adds	r3, r7, #6
 8002a22:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d000      	beq.n	8002a2e <HAL_UART_Transmit+0x1a>
 8002a2c:	e094      	b.n	8002b58 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_UART_Transmit+0x28>
 8002a34:	1dbb      	adds	r3, r7, #6
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e08c      	b.n	8002b5a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	015b      	lsls	r3, r3, #5
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d109      	bne.n	8002a60 <HAL_UART_Transmit+0x4c>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e07c      	b.n	8002b5a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2270      	movs	r2, #112	; 0x70
 8002a64:	5c9b      	ldrb	r3, [r3, r2]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_UART_Transmit+0x5a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e075      	b.n	8002b5a <HAL_UART_Transmit+0x146>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2270      	movs	r2, #112	; 0x70
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2221      	movs	r2, #33	; 0x21
 8002a80:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a82:	f7fe f9db 	bl	8000e3c <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1dba      	adds	r2, r7, #6
 8002a8e:	2150      	movs	r1, #80	; 0x50
 8002a90:	8812      	ldrh	r2, [r2, #0]
 8002a92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1dba      	adds	r2, r7, #6
 8002a98:	2152      	movs	r1, #82	; 0x52
 8002a9a:	8812      	ldrh	r2, [r2, #0]
 8002a9c:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	015b      	lsls	r3, r3, #5
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d108      	bne.n	8002abc <HAL_UART_Transmit+0xa8>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e003      	b.n	8002ac4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ac4:	e02c      	b.n	8002b20 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	0013      	movs	r3, r2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	f000 fc74 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e03c      	b.n	8002b5a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	001a      	movs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	05d2      	lsls	r2, r2, #23
 8002af2:	0dd2      	lsrs	r2, r2, #23
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3302      	adds	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e007      	b.n	8002b0e <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2252      	movs	r2, #82	; 0x52
 8002b12:	5a9b      	ldrh	r3, [r3, r2]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b299      	uxth	r1, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2252      	movs	r2, #82	; 0x52
 8002b1e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2252      	movs	r2, #82	; 0x52
 8002b24:	5a9b      	ldrh	r3, [r3, r2]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1cc      	bne.n	8002ac6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	0013      	movs	r3, r2
 8002b36:	2200      	movs	r2, #0
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	f000 fc41 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 8002b3e:	1e03      	subs	r3, r0, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e009      	b.n	8002b5a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2270      	movs	r2, #112	; 0x70
 8002b50:	2100      	movs	r1, #0
 8002b52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e000      	b.n	8002b5a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
  }
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b008      	add	sp, #32
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002b6c:	231b      	movs	r3, #27
 8002b6e:	2218      	movs	r2, #24
 8002b70:	4694      	mov	ip, r2
 8002b72:	44bc      	add	ip, r7
 8002b74:	4463      	add	r3, ip
 8002b76:	2210      	movs	r2, #16
 8002b78:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b7e:	2313      	movs	r3, #19
 8002b80:	2218      	movs	r2, #24
 8002b82:	4694      	mov	ip, r2
 8002b84:	44bc      	add	ip, r7
 8002b86:	4463      	add	r3, ip
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4aca      	ldr	r2, [pc, #808]	; (8002ed8 <UART_SetConfig+0x374>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4ac5      	ldr	r2, [pc, #788]	; (8002edc <UART_SetConfig+0x378>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4abf      	ldr	r2, [pc, #764]	; (8002ee0 <UART_SetConfig+0x37c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bec:	4313      	orrs	r3, r2
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4abb      	ldr	r2, [pc, #748]	; (8002ee4 <UART_SetConfig+0x380>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4ab7      	ldr	r2, [pc, #732]	; (8002ee8 <UART_SetConfig+0x384>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d134      	bne.n	8002c7a <UART_SetConfig+0x116>
 8002c10:	4bb6      	ldr	r3, [pc, #728]	; (8002eec <UART_SetConfig+0x388>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	2203      	movs	r2, #3
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d015      	beq.n	8002c48 <UART_SetConfig+0xe4>
 8002c1c:	d304      	bcc.n	8002c28 <UART_SetConfig+0xc4>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d00a      	beq.n	8002c38 <UART_SetConfig+0xd4>
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d018      	beq.n	8002c58 <UART_SetConfig+0xf4>
 8002c26:	e01f      	b.n	8002c68 <UART_SetConfig+0x104>
 8002c28:	231b      	movs	r3, #27
 8002c2a:	2218      	movs	r2, #24
 8002c2c:	4694      	mov	ip, r2
 8002c2e:	44bc      	add	ip, r7
 8002c30:	4463      	add	r3, ip
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e0c5      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002c38:	231b      	movs	r3, #27
 8002c3a:	2218      	movs	r2, #24
 8002c3c:	4694      	mov	ip, r2
 8002c3e:	44bc      	add	ip, r7
 8002c40:	4463      	add	r3, ip
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e0bd      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002c48:	231b      	movs	r3, #27
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	4694      	mov	ip, r2
 8002c4e:	44bc      	add	ip, r7
 8002c50:	4463      	add	r3, ip
 8002c52:	2204      	movs	r2, #4
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e0b5      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	44bc      	add	ip, r7
 8002c60:	4463      	add	r3, ip
 8002c62:	2208      	movs	r2, #8
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e0ad      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002c68:	231b      	movs	r3, #27
 8002c6a:	2218      	movs	r2, #24
 8002c6c:	4694      	mov	ip, r2
 8002c6e:	44bc      	add	ip, r7
 8002c70:	4463      	add	r3, ip
 8002c72:	2210      	movs	r2, #16
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	e0a4      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a9c      	ldr	r2, [pc, #624]	; (8002ef0 <UART_SetConfig+0x38c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d137      	bne.n	8002cf4 <UART_SetConfig+0x190>
 8002c84:	4b99      	ldr	r3, [pc, #612]	; (8002eec <UART_SetConfig+0x388>)
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	220c      	movs	r2, #12
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d018      	beq.n	8002cc2 <UART_SetConfig+0x15e>
 8002c90:	d802      	bhi.n	8002c98 <UART_SetConfig+0x134>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <UART_SetConfig+0x13e>
 8002c96:	e024      	b.n	8002ce2 <UART_SetConfig+0x17e>
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d00a      	beq.n	8002cb2 <UART_SetConfig+0x14e>
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	d018      	beq.n	8002cd2 <UART_SetConfig+0x16e>
 8002ca0:	e01f      	b.n	8002ce2 <UART_SetConfig+0x17e>
 8002ca2:	231b      	movs	r3, #27
 8002ca4:	2218      	movs	r2, #24
 8002ca6:	4694      	mov	ip, r2
 8002ca8:	44bc      	add	ip, r7
 8002caa:	4463      	add	r3, ip
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e088      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002cb2:	231b      	movs	r3, #27
 8002cb4:	2218      	movs	r2, #24
 8002cb6:	4694      	mov	ip, r2
 8002cb8:	44bc      	add	ip, r7
 8002cba:	4463      	add	r3, ip
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e080      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002cc2:	231b      	movs	r3, #27
 8002cc4:	2218      	movs	r2, #24
 8002cc6:	4694      	mov	ip, r2
 8002cc8:	44bc      	add	ip, r7
 8002cca:	4463      	add	r3, ip
 8002ccc:	2204      	movs	r2, #4
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e078      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002cd2:	231b      	movs	r3, #27
 8002cd4:	2218      	movs	r2, #24
 8002cd6:	4694      	mov	ip, r2
 8002cd8:	44bc      	add	ip, r7
 8002cda:	4463      	add	r3, ip
 8002cdc:	2208      	movs	r2, #8
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e070      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002ce2:	231b      	movs	r3, #27
 8002ce4:	2218      	movs	r2, #24
 8002ce6:	4694      	mov	ip, r2
 8002ce8:	44bc      	add	ip, r7
 8002cea:	4463      	add	r3, ip
 8002cec:	2210      	movs	r2, #16
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	e067      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7e      	ldr	r2, [pc, #504]	; (8002ef4 <UART_SetConfig+0x390>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d107      	bne.n	8002d0e <UART_SetConfig+0x1aa>
 8002cfe:	231b      	movs	r3, #27
 8002d00:	2218      	movs	r2, #24
 8002d02:	4694      	mov	ip, r2
 8002d04:	44bc      	add	ip, r7
 8002d06:	4463      	add	r3, ip
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e05a      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a79      	ldr	r2, [pc, #484]	; (8002ef8 <UART_SetConfig+0x394>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d107      	bne.n	8002d28 <UART_SetConfig+0x1c4>
 8002d18:	231b      	movs	r3, #27
 8002d1a:	2218      	movs	r2, #24
 8002d1c:	4694      	mov	ip, r2
 8002d1e:	44bc      	add	ip, r7
 8002d20:	4463      	add	r3, ip
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e04d      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6c      	ldr	r2, [pc, #432]	; (8002ee0 <UART_SetConfig+0x37c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d141      	bne.n	8002db6 <UART_SetConfig+0x252>
 8002d32:	4b6e      	ldr	r3, [pc, #440]	; (8002eec <UART_SetConfig+0x388>)
 8002d34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d36:	23c0      	movs	r3, #192	; 0xc0
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	00d2      	lsls	r2, r2, #3
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01f      	beq.n	8002d84 <UART_SetConfig+0x220>
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	00d2      	lsls	r2, r2, #3
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d802      	bhi.n	8002d52 <UART_SetConfig+0x1ee>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <UART_SetConfig+0x200>
 8002d50:	e028      	b.n	8002da4 <UART_SetConfig+0x240>
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00c      	beq.n	8002d74 <UART_SetConfig+0x210>
 8002d5a:	22c0      	movs	r2, #192	; 0xc0
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <UART_SetConfig+0x230>
 8002d62:	e01f      	b.n	8002da4 <UART_SetConfig+0x240>
 8002d64:	231b      	movs	r3, #27
 8002d66:	2218      	movs	r2, #24
 8002d68:	4694      	mov	ip, r2
 8002d6a:	44bc      	add	ip, r7
 8002d6c:	4463      	add	r3, ip
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e027      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002d74:	231b      	movs	r3, #27
 8002d76:	2218      	movs	r2, #24
 8002d78:	4694      	mov	ip, r2
 8002d7a:	44bc      	add	ip, r7
 8002d7c:	4463      	add	r3, ip
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e01f      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002d84:	231b      	movs	r3, #27
 8002d86:	2218      	movs	r2, #24
 8002d88:	4694      	mov	ip, r2
 8002d8a:	44bc      	add	ip, r7
 8002d8c:	4463      	add	r3, ip
 8002d8e:	2204      	movs	r2, #4
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e017      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002d94:	231b      	movs	r3, #27
 8002d96:	2218      	movs	r2, #24
 8002d98:	4694      	mov	ip, r2
 8002d9a:	44bc      	add	ip, r7
 8002d9c:	4463      	add	r3, ip
 8002d9e:	2208      	movs	r2, #8
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e00f      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002da4:	231b      	movs	r3, #27
 8002da6:	2218      	movs	r2, #24
 8002da8:	4694      	mov	ip, r2
 8002daa:	44bc      	add	ip, r7
 8002dac:	4463      	add	r3, ip
 8002dae:	2210      	movs	r2, #16
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	e006      	b.n	8002dc4 <UART_SetConfig+0x260>
 8002db6:	231b      	movs	r3, #27
 8002db8:	2218      	movs	r2, #24
 8002dba:	4694      	mov	ip, r2
 8002dbc:	44bc      	add	ip, r7
 8002dbe:	4463      	add	r3, ip
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a45      	ldr	r2, [pc, #276]	; (8002ee0 <UART_SetConfig+0x37c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d000      	beq.n	8002dd0 <UART_SetConfig+0x26c>
 8002dce:	e09d      	b.n	8002f0c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	2218      	movs	r2, #24
 8002dd4:	4694      	mov	ip, r2
 8002dd6:	44bc      	add	ip, r7
 8002dd8:	4463      	add	r3, ip
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d00d      	beq.n	8002dfc <UART_SetConfig+0x298>
 8002de0:	dc02      	bgt.n	8002de8 <UART_SetConfig+0x284>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <UART_SetConfig+0x28e>
 8002de6:	e01d      	b.n	8002e24 <UART_SetConfig+0x2c0>
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d012      	beq.n	8002e12 <UART_SetConfig+0x2ae>
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d015      	beq.n	8002e1c <UART_SetConfig+0x2b8>
 8002df0:	e018      	b.n	8002e24 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002df2:	f7ff fbb1 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8002df6:	0003      	movs	r3, r0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dfa:	e01b      	b.n	8002e34 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dfc:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <UART_SetConfig+0x388>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2210      	movs	r2, #16
 8002e02:	4013      	ands	r3, r2
 8002e04:	d002      	beq.n	8002e0c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <UART_SetConfig+0x398>)
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002e0a:	e013      	b.n	8002e34 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002e0c:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <UART_SetConfig+0x39c>)
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e10:	e010      	b.n	8002e34 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002e12:	f7ff fb13 	bl	800243c <HAL_RCC_GetSysClockFreq>
 8002e16:	0003      	movs	r3, r0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e1a:	e00b      	b.n	8002e34 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e22:	e007      	b.n	8002e34 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e24:	2313      	movs	r3, #19
 8002e26:	2218      	movs	r2, #24
 8002e28:	4694      	mov	ip, r2
 8002e2a:	44bc      	add	ip, r7
 8002e2c:	4463      	add	r3, ip
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
        break;
 8002e32:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d100      	bne.n	8002e3c <UART_SetConfig+0x2d8>
 8002e3a:	e1a6      	b.n	800318a <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	0013      	movs	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	189b      	adds	r3, r3, r2
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d305      	bcc.n	8002e58 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d907      	bls.n	8002e68 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8002e58:	2313      	movs	r3, #19
 8002e5a:	2218      	movs	r2, #24
 8002e5c:	4694      	mov	ip, r2
 8002e5e:	44bc      	add	ip, r7
 8002e60:	4463      	add	r3, ip
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e190      	b.n	800318a <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	6939      	ldr	r1, [r7, #16]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	000b      	movs	r3, r1
 8002e76:	0e1b      	lsrs	r3, r3, #24
 8002e78:	0010      	movs	r0, r2
 8002e7a:	0205      	lsls	r5, r0, #8
 8002e7c:	431d      	orrs	r5, r3
 8002e7e:	000b      	movs	r3, r1
 8002e80:	021c      	lsls	r4, r3, #8
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	68f9      	ldr	r1, [r7, #12]
 8002e92:	1900      	adds	r0, r0, r4
 8002e94:	4169      	adcs	r1, r5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f7fd f9bc 	bl	8000220 <__aeabi_uldivmod>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	000c      	movs	r4, r1
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <UART_SetConfig+0x3a0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d908      	bls.n	8002ec8 <UART_SetConfig+0x364>
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <UART_SetConfig+0x3a4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d804      	bhi.n	8002ec8 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	e160      	b.n	800318a <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8002ec8:	2313      	movs	r3, #19
 8002eca:	2218      	movs	r2, #24
 8002ecc:	4694      	mov	ip, r2
 8002ece:	44bc      	add	ip, r7
 8002ed0:	4463      	add	r3, ip
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e158      	b.n	800318a <UART_SetConfig+0x626>
 8002ed8:	efff69f3 	.word	0xefff69f3
 8002edc:	ffffcfff 	.word	0xffffcfff
 8002ee0:	40004800 	.word	0x40004800
 8002ee4:	fffff4ff 	.word	0xfffff4ff
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40004400 	.word	0x40004400
 8002ef4:	40004c00 	.word	0x40004c00
 8002ef8:	40005000 	.word	0x40005000
 8002efc:	003d0900 	.word	0x003d0900
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	000002ff 	.word	0x000002ff
 8002f08:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d000      	beq.n	8002f1a <UART_SetConfig+0x3b6>
 8002f18:	e0a9      	b.n	800306e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8002f1a:	231b      	movs	r3, #27
 8002f1c:	2218      	movs	r2, #24
 8002f1e:	4694      	mov	ip, r2
 8002f20:	44bc      	add	ip, r7
 8002f22:	4463      	add	r3, ip
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d86d      	bhi.n	8003006 <UART_SetConfig+0x4a2>
 8002f2a:	009a      	lsls	r2, r3, #2
 8002f2c:	4b9f      	ldr	r3, [pc, #636]	; (80031ac <UART_SetConfig+0x648>)
 8002f2e:	18d3      	adds	r3, r2, r3
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f34:	f7ff fb10 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	005a      	lsls	r2, r3, #1
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	18d2      	adds	r2, r2, r3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0019      	movs	r1, r3
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	f7fd f8dc 	bl	8000108 <__udivsi3>
 8002f50:	0003      	movs	r3, r0
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f56:	e05e      	b.n	8003016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f58:	f7ff fb14 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	005a      	lsls	r2, r3, #1
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	18d2      	adds	r2, r2, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	0010      	movs	r0, r2
 8002f70:	f7fd f8ca 	bl	8000108 <__udivsi3>
 8002f74:	0003      	movs	r3, r0
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f7a:	e04c      	b.n	8003016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f7c:	4b8c      	ldr	r3, [pc, #560]	; (80031b0 <UART_SetConfig+0x64c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	4013      	ands	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	4a89      	ldr	r2, [pc, #548]	; (80031b4 <UART_SetConfig+0x650>)
 8002f8e:	189a      	adds	r2, r3, r2
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0019      	movs	r1, r3
 8002f96:	0010      	movs	r0, r2
 8002f98:	f7fd f8b6 	bl	8000108 <__udivsi3>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002fa2:	e038      	b.n	8003016 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	4a83      	ldr	r2, [pc, #524]	; (80031b8 <UART_SetConfig+0x654>)
 8002fac:	189a      	adds	r2, r3, r2
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	f7fd f8a7 	bl	8000108 <__udivsi3>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fc0:	e029      	b.n	8003016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fc2:	f7ff fa3b 	bl	800243c <HAL_RCC_GetSysClockFreq>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	005a      	lsls	r2, r3, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	18d2      	adds	r2, r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	0010      	movs	r0, r2
 8002fda:	f7fd f895 	bl	8000108 <__udivsi3>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fe4:	e017      	b.n	8003016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	0252      	lsls	r2, r2, #9
 8002ff0:	189a      	adds	r2, r3, r2
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	0010      	movs	r0, r2
 8002ffa:	f7fd f885 	bl	8000108 <__udivsi3>
 8002ffe:	0003      	movs	r3, r0
 8003000:	b29b      	uxth	r3, r3
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003004:	e007      	b.n	8003016 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003006:	2313      	movs	r3, #19
 8003008:	2218      	movs	r2, #24
 800300a:	4694      	mov	ip, r2
 800300c:	44bc      	add	ip, r7
 800300e:	4463      	add	r3, ip
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
        break;
 8003014:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2b0f      	cmp	r3, #15
 800301a:	d920      	bls.n	800305e <UART_SetConfig+0x4fa>
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	4a67      	ldr	r2, [pc, #412]	; (80031bc <UART_SetConfig+0x658>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d81c      	bhi.n	800305e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	b29a      	uxth	r2, r3
 8003028:	200a      	movs	r0, #10
 800302a:	2418      	movs	r4, #24
 800302c:	193b      	adds	r3, r7, r4
 800302e:	181b      	adds	r3, r3, r0
 8003030:	210f      	movs	r1, #15
 8003032:	438a      	bics	r2, r1
 8003034:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	2207      	movs	r2, #7
 800303e:	4013      	ands	r3, r2
 8003040:	b299      	uxth	r1, r3
 8003042:	193b      	adds	r3, r7, r4
 8003044:	181b      	adds	r3, r3, r0
 8003046:	193a      	adds	r2, r7, r4
 8003048:	1812      	adds	r2, r2, r0
 800304a:	8812      	ldrh	r2, [r2, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	193a      	adds	r2, r7, r4
 8003056:	1812      	adds	r2, r2, r0
 8003058:	8812      	ldrh	r2, [r2, #0]
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	e095      	b.n	800318a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800305e:	2313      	movs	r3, #19
 8003060:	2218      	movs	r2, #24
 8003062:	4694      	mov	ip, r2
 8003064:	44bc      	add	ip, r7
 8003066:	4463      	add	r3, ip
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e08d      	b.n	800318a <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800306e:	231b      	movs	r3, #27
 8003070:	2218      	movs	r2, #24
 8003072:	4694      	mov	ip, r2
 8003074:	44bc      	add	ip, r7
 8003076:	4463      	add	r3, ip
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b08      	cmp	r3, #8
 800307c:	d86a      	bhi.n	8003154 <UART_SetConfig+0x5f0>
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	4b4f      	ldr	r3, [pc, #316]	; (80031c0 <UART_SetConfig+0x65c>)
 8003082:	18d3      	adds	r3, r2, r3
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003088:	f7ff fa66 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 800308c:	0002      	movs	r2, r0
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	18d2      	adds	r2, r2, r3
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f7fd f833 	bl	8000108 <__udivsi3>
 80030a2:	0003      	movs	r3, r0
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030a8:	e05c      	b.n	8003164 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030aa:	f7ff fa6b 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 80030ae:	0002      	movs	r2, r0
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	18d2      	adds	r2, r2, r3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0019      	movs	r1, r3
 80030be:	0010      	movs	r0, r2
 80030c0:	f7fd f822 	bl	8000108 <__udivsi3>
 80030c4:	0003      	movs	r3, r0
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ca:	e04b      	b.n	8003164 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030cc:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <UART_SetConfig+0x64c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	4013      	ands	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	4a39      	ldr	r2, [pc, #228]	; (80031c4 <UART_SetConfig+0x660>)
 80030de:	189a      	adds	r2, r3, r2
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0019      	movs	r1, r3
 80030e6:	0010      	movs	r0, r2
 80030e8:	f7fd f80e 	bl	8000108 <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80030f2:	e037      	b.n	8003164 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	4a33      	ldr	r2, [pc, #204]	; (80031c8 <UART_SetConfig+0x664>)
 80030fc:	189a      	adds	r2, r3, r2
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0019      	movs	r1, r3
 8003104:	0010      	movs	r0, r2
 8003106:	f7fc ffff 	bl	8000108 <__udivsi3>
 800310a:	0003      	movs	r3, r0
 800310c:	b29b      	uxth	r3, r3
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003110:	e028      	b.n	8003164 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003112:	f7ff f993 	bl	800243c <HAL_RCC_GetSysClockFreq>
 8003116:	0002      	movs	r2, r0
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	18d2      	adds	r2, r2, r3
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0019      	movs	r1, r3
 8003126:	0010      	movs	r0, r2
 8003128:	f7fc ffee 	bl	8000108 <__udivsi3>
 800312c:	0003      	movs	r3, r0
 800312e:	b29b      	uxth	r3, r3
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003132:	e017      	b.n	8003164 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	0212      	lsls	r2, r2, #8
 800313e:	189a      	adds	r2, r3, r2
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0019      	movs	r1, r3
 8003146:	0010      	movs	r0, r2
 8003148:	f7fc ffde 	bl	8000108 <__udivsi3>
 800314c:	0003      	movs	r3, r0
 800314e:	b29b      	uxth	r3, r3
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003152:	e007      	b.n	8003164 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003154:	2313      	movs	r3, #19
 8003156:	2218      	movs	r2, #24
 8003158:	4694      	mov	ip, r2
 800315a:	44bc      	add	ip, r7
 800315c:	4463      	add	r3, ip
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
        break;
 8003162:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	2b0f      	cmp	r3, #15
 8003168:	d908      	bls.n	800317c <UART_SetConfig+0x618>
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	4a13      	ldr	r2, [pc, #76]	; (80031bc <UART_SetConfig+0x658>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d804      	bhi.n	800317c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e006      	b.n	800318a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800317c:	2313      	movs	r3, #19
 800317e:	2218      	movs	r2, #24
 8003180:	4694      	mov	ip, r2
 8003182:	44bc      	add	ip, r7
 8003184:	4463      	add	r3, ip
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2200      	movs	r2, #0
 8003194:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003196:	2313      	movs	r3, #19
 8003198:	2218      	movs	r2, #24
 800319a:	4694      	mov	ip, r2
 800319c:	44bc      	add	ip, r7
 800319e:	4463      	add	r3, ip
 80031a0:	781b      	ldrb	r3, [r3, #0]
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b00e      	add	sp, #56	; 0x38
 80031a8:	bdb0      	pop	{r4, r5, r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	08003544 	.word	0x08003544
 80031b0:	40021000 	.word	0x40021000
 80031b4:	007a1200 	.word	0x007a1200
 80031b8:	01e84800 	.word	0x01e84800
 80031bc:	0000ffff 	.word	0x0000ffff
 80031c0:	08003568 	.word	0x08003568
 80031c4:	003d0900 	.word	0x003d0900
 80031c8:	00f42400 	.word	0x00f42400

080031cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2201      	movs	r2, #1
 80031da:	4013      	ands	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <UART_AdvFeatureConfig+0x144>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d00b      	beq.n	8003218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a43      	ldr	r2, [pc, #268]	; (8003314 <UART_AdvFeatureConfig+0x148>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2204      	movs	r2, #4
 800321e:	4013      	ands	r3, r2
 8003220:	d00b      	beq.n	800323a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a3b      	ldr	r2, [pc, #236]	; (8003318 <UART_AdvFeatureConfig+0x14c>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2208      	movs	r2, #8
 8003240:	4013      	ands	r3, r2
 8003242:	d00b      	beq.n	800325c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <UART_AdvFeatureConfig+0x150>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2210      	movs	r2, #16
 8003262:	4013      	ands	r3, r2
 8003264:	d00b      	beq.n	800327e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <UART_AdvFeatureConfig+0x154>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2220      	movs	r2, #32
 8003284:	4013      	ands	r3, r2
 8003286:	d00b      	beq.n	80032a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4a25      	ldr	r2, [pc, #148]	; (8003324 <UART_AdvFeatureConfig+0x158>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	4013      	ands	r3, r2
 80032a8:	d01d      	beq.n	80032e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <UART_AdvFeatureConfig+0x15c>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	035b      	lsls	r3, r3, #13
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10b      	bne.n	80032e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <UART_AdvFeatureConfig+0x160>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	4013      	ands	r3, r2
 80032ee:	d00b      	beq.n	8003308 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <UART_AdvFeatureConfig+0x164>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  }
}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}
 8003310:	fffdffff 	.word	0xfffdffff
 8003314:	fffeffff 	.word	0xfffeffff
 8003318:	fffbffff 	.word	0xfffbffff
 800331c:	ffff7fff 	.word	0xffff7fff
 8003320:	ffffefff 	.word	0xffffefff
 8003324:	ffffdfff 	.word	0xffffdfff
 8003328:	ffefffff 	.word	0xffefffff
 800332c:	ff9fffff 	.word	0xff9fffff
 8003330:	fff7ffff 	.word	0xfff7ffff

08003334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af02      	add	r7, sp, #8
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003342:	f7fd fd7b 	bl	8000e3c <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2208      	movs	r2, #8
 8003352:	4013      	ands	r3, r2
 8003354:	2b08      	cmp	r3, #8
 8003356:	d10d      	bne.n	8003374 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	0399      	lsls	r1, r3, #14
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <UART_CheckIdleState+0x88>)
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	0013      	movs	r3, r2
 8003366:	2200      	movs	r2, #0
 8003368:	f000 f82a 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d001      	beq.n	8003374 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e01f      	b.n	80033b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2204      	movs	r2, #4
 800337c:	4013      	ands	r3, r2
 800337e:	2b04      	cmp	r3, #4
 8003380:	d10d      	bne.n	800339e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	03d9      	lsls	r1, r3, #15
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <UART_CheckIdleState+0x88>)
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	0013      	movs	r3, r2
 8003390:	2200      	movs	r2, #0
 8003392:	f000 f815 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d001      	beq.n	800339e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00a      	b.n	80033b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2270      	movs	r2, #112	; 0x70
 80033ae:	2100      	movs	r1, #0
 80033b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	01ffffff 	.word	0x01ffffff

080033c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	e029      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	3301      	adds	r3, #1
 80033d6:	d026      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fd fd30 	bl	8000e3c <HAL_GetTick>
 80033dc:	0002      	movs	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11b      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4915      	ldr	r1, [pc, #84]	; (8003450 <UART_WaitOnFlagUntilTimeout+0x90>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	438a      	bics	r2, r1
 800340c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2270      	movs	r2, #112	; 0x70
 800341e:	2100      	movs	r1, #0
 8003420:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e00f      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	425a      	negs	r2, r3
 8003436:	4153      	adcs	r3, r2
 8003438:	b2db      	uxtb	r3, r3
 800343a:	001a      	movs	r2, r3
 800343c:	1dfb      	adds	r3, r7, #7
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d0c6      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	fffffe5f 	.word	0xfffffe5f

08003454 <__libc_init_array>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	2600      	movs	r6, #0
 8003458:	4d0c      	ldr	r5, [pc, #48]	; (800348c <__libc_init_array+0x38>)
 800345a:	4c0d      	ldr	r4, [pc, #52]	; (8003490 <__libc_init_array+0x3c>)
 800345c:	1b64      	subs	r4, r4, r5
 800345e:	10a4      	asrs	r4, r4, #2
 8003460:	42a6      	cmp	r6, r4
 8003462:	d109      	bne.n	8003478 <__libc_init_array+0x24>
 8003464:	2600      	movs	r6, #0
 8003466:	f000 f821 	bl	80034ac <_init>
 800346a:	4d0a      	ldr	r5, [pc, #40]	; (8003494 <__libc_init_array+0x40>)
 800346c:	4c0a      	ldr	r4, [pc, #40]	; (8003498 <__libc_init_array+0x44>)
 800346e:	1b64      	subs	r4, r4, r5
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	42a6      	cmp	r6, r4
 8003474:	d105      	bne.n	8003482 <__libc_init_array+0x2e>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	00b3      	lsls	r3, r6, #2
 800347a:	58eb      	ldr	r3, [r5, r3]
 800347c:	4798      	blx	r3
 800347e:	3601      	adds	r6, #1
 8003480:	e7ee      	b.n	8003460 <__libc_init_array+0xc>
 8003482:	00b3      	lsls	r3, r6, #2
 8003484:	58eb      	ldr	r3, [r5, r3]
 8003486:	4798      	blx	r3
 8003488:	3601      	adds	r6, #1
 800348a:	e7f2      	b.n	8003472 <__libc_init_array+0x1e>
 800348c:	08003594 	.word	0x08003594
 8003490:	08003594 	.word	0x08003594
 8003494:	08003594 	.word	0x08003594
 8003498:	08003598 	.word	0x08003598

0800349c <memset>:
 800349c:	0003      	movs	r3, r0
 800349e:	1812      	adds	r2, r2, r0
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d100      	bne.n	80034a6 <memset+0xa>
 80034a4:	4770      	bx	lr
 80034a6:	7019      	strb	r1, [r3, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	e7f9      	b.n	80034a0 <memset+0x4>

080034ac <_init>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr

080034b8 <_fini>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr
