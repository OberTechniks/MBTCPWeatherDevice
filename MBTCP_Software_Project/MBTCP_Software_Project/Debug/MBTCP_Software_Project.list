
MBTCP_Software_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003734  08003734  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800373c  0800373c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000004  08003748  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003748  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f2f  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001653  00000000  00000000  00028f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002af00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001479a  00000000  00000000  0002b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c8b  00000000  00000000  0003ff22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000812c4  00000000  00000000  00047bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8e71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d4  00000000  00000000  000c8eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003674 	.word	0x08003674

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003674 	.word	0x08003674

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b097      	sub	sp, #92	; 0x5c
 800043c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043e:	f000 fc7d 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000442:	f000 f917 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000446:	f000 fa49 	bl	80008dc <MX_GPIO_Init>
  MX_ADC_Init();
 800044a:	f000 f97b 	bl	8000744 <MX_ADC_Init>
  MX_SPI1_Init();
 800044e:	f000 f9dd 	bl	800080c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000452:	f000 fa13 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t timeout = 10000;
 8000456:	4b7b      	ldr	r3, [pc, #492]	; (8000644 <main+0x20c>)
 8000458:	64fb      	str	r3, [r7, #76]	; 0x4c

  // turn on the led
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800045a:	4b7b      	ldr	r3, [pc, #492]	; (8000648 <main+0x210>)
 800045c:	2201      	movs	r2, #1
 800045e:	2120      	movs	r1, #32
 8000460:	0018      	movs	r0, r3
 8000462:	f001 f94d 	bl	8001700 <HAL_GPIO_WritePin>

  // buffer for HAL_OK message
  uint8_t HAL_OK_Buffer[6] = {72, 65, 76, 32, 79, 75};
 8000466:	233c      	movs	r3, #60	; 0x3c
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	4a78      	ldr	r2, [pc, #480]	; (800064c <main+0x214>)
 800046c:	6811      	ldr	r1, [r2, #0]
 800046e:	6019      	str	r1, [r3, #0]
 8000470:	8892      	ldrh	r2, [r2, #4]
 8000472:	809a      	strh	r2, [r3, #4]

  // buffer for HAL_ERROR message
  uint8_t HAL_ERROR_Buffer[9] = {72, 65, 76, 32, 69, 82, 82, 79, 82};
 8000474:	2330      	movs	r3, #48	; 0x30
 8000476:	18fb      	adds	r3, r7, r3
 8000478:	4a75      	ldr	r2, [pc, #468]	; (8000650 <main+0x218>)
 800047a:	ca03      	ldmia	r2!, {r0, r1}
 800047c:	c303      	stmia	r3!, {r0, r1}
 800047e:	7812      	ldrb	r2, [r2, #0]
 8000480:	701a      	strb	r2, [r3, #0]

  // buffer for HAL_BUSY message
  uint8_t HAL_BUSY_Buffer[6] = {72, 65, 76, 32, 66, 85, 83, 89};
 8000482:	2328      	movs	r3, #40	; 0x28
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	4a73      	ldr	r2, [pc, #460]	; (8000654 <main+0x21c>)
 8000488:	6811      	ldr	r1, [r2, #0]
 800048a:	6019      	str	r1, [r3, #0]
 800048c:	8892      	ldrh	r2, [r2, #4]
 800048e:	809a      	strh	r2, [r3, #4]

  // buffer for HAL_TIMEOUT message
  uint8_t HAL_TIMEOUT_Buffer[11] = {72, 65, 76, 32, 84, 73, 77, 69, 79, 85, 84};
 8000490:	231c      	movs	r3, #28
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	4a70      	ldr	r2, [pc, #448]	; (8000658 <main+0x220>)
 8000496:	ca03      	ldmia	r2!, {r0, r1}
 8000498:	c303      	stmia	r3!, {r0, r1}
 800049a:	8811      	ldrh	r1, [r2, #0]
 800049c:	8019      	strh	r1, [r3, #0]
 800049e:	7892      	ldrb	r2, [r2, #2]
 80004a0:	709a      	strb	r2, [r3, #2]

  // buffer for carriage return and line feed characters
  uint8_t crlfBuffer[2] = {13, 10};
 80004a2:	2318      	movs	r3, #24
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	4a6d      	ldr	r2, [pc, #436]	; (800065c <main+0x224>)
 80004a8:	8812      	ldrh	r2, [r2, #0]
 80004aa:	801a      	strh	r2, [r3, #0]

  // SPI1 status object
  HAL_StatusTypeDef SPI1_STATUS;

  // FRAM SPI Op-Codes
  uint8_t WREN = 0x06;	// Set Write Enable Latch, must be set before WRSR or WRITE commands are executed
 80004ac:	234b      	movs	r3, #75	; 0x4b
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	2206      	movs	r2, #6
 80004b2:	701a      	strb	r2, [r3, #0]
  uint8_t WRDI = 0x04;	// Reset Write Enable Latch, WRSR and WRITE commands are not executed while Write Enable is reset
 80004b4:	234a      	movs	r3, #74	; 0x4a
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	2204      	movs	r2, #4
 80004ba:	701a      	strb	r2, [r3, #0]
  uint8_t RDSR = 0x05;	// Read Status Register
 80004bc:	2349      	movs	r3, #73	; 0x49
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	2205      	movs	r2, #5
 80004c2:	701a      	strb	r2, [r3, #0]
  uint8_t WRSR = 0x01;	// Write Status Register
 80004c4:	2348      	movs	r3, #72	; 0x48
 80004c6:	18fb      	adds	r3, r7, r3
 80004c8:	2201      	movs	r2, #1
 80004ca:	701a      	strb	r2, [r3, #0]
  uint8_t READ = 0x03;	// Read memory code
 80004cc:	2347      	movs	r3, #71	; 0x47
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2203      	movs	r2, #3
 80004d2:	701a      	strb	r2, [r3, #0]
  uint8_t WRITE = 0x02; // Write memory code
 80004d4:	2346      	movs	r3, #70	; 0x46
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2202      	movs	r2, #2
 80004da:	701a      	strb	r2, [r3, #0]
  uint8_t RDID = 0x9F;	// Read Device ID
 80004dc:	2345      	movs	r3, #69	; 0x45
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	229f      	movs	r2, #159	; 0x9f
 80004e2:	701a      	strb	r2, [r3, #0]
  char data[6] = "";
 80004e4:	2310      	movs	r3, #16
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	809a      	strh	r2, [r3, #4]

  uint8_t TxData[5] = {159, 8, 8, 8, 8};
 80004f0:	2308      	movs	r3, #8
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	4a5a      	ldr	r2, [pc, #360]	; (8000660 <main+0x228>)
 80004f6:	6811      	ldr	r1, [r2, #0]
 80004f8:	6019      	str	r1, [r3, #0]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	711a      	strb	r2, [r3, #4]
  uint8_t RxData[5] = {255, 255, 255, 255, 255};
 80004fe:	003b      	movs	r3, r7
 8000500:	4a58      	ldr	r2, [pc, #352]	; (8000664 <main+0x22c>)
 8000502:	6811      	ldr	r1, [r2, #0]
 8000504:	6019      	str	r1, [r3, #0]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	711a      	strb	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

	  // SPI transaction
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);	// set chip select low
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	011b      	lsls	r3, r3, #4
 800050e:	4856      	ldr	r0, [pc, #344]	; (8000668 <main+0x230>)
 8000510:	2200      	movs	r2, #0
 8000512:	0019      	movs	r1, r3
 8000514:	f001 f8f4 	bl	8001700 <HAL_GPIO_WritePin>
	  SPI1_STATUS = HAL_SPI_TransmitReceive(&hspi1, &TxData, &RxData, 5, timeout);
 8000518:	2544      	movs	r5, #68	; 0x44
 800051a:	197c      	adds	r4, r7, r5
 800051c:	003a      	movs	r2, r7
 800051e:	2308      	movs	r3, #8
 8000520:	18f9      	adds	r1, r7, r3
 8000522:	4852      	ldr	r0, [pc, #328]	; (800066c <main+0x234>)
 8000524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2305      	movs	r3, #5
 800052a:	f002 f899 	bl	8002660 <HAL_SPI_TransmitReceive>
 800052e:	0003      	movs	r3, r0
 8000530:	7023      	strb	r3, [r4, #0]

	  // End the SPI transaction
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);	// set chip select high
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	484c      	ldr	r0, [pc, #304]	; (8000668 <main+0x230>)
 8000538:	2201      	movs	r2, #1
 800053a:	0019      	movs	r1, r3
 800053c:	f001 f8e0 	bl	8001700 <HAL_GPIO_WritePin>

	  // Evaluate if HAL functions were successful
	  if(SPI1_STATUS == HAL_OK)
 8000540:	197b      	adds	r3, r7, r5
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d127      	bne.n	8000598 <main+0x160>
	  {
		  // Seems like it was successful
		  // Extract the data and send the data out the serial port
		  UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_OK_Buffer, sizeof(HAL_OK_Buffer), timeout);
 8000548:	2543      	movs	r5, #67	; 0x43
 800054a:	197c      	adds	r4, r7, r5
 800054c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800054e:	223c      	movs	r2, #60	; 0x3c
 8000550:	18b9      	adds	r1, r7, r2
 8000552:	4847      	ldr	r0, [pc, #284]	; (8000670 <main+0x238>)
 8000554:	2206      	movs	r2, #6
 8000556:	f002 fb41 	bl	8002bdc <HAL_UART_Transmit>
 800055a:	0003      	movs	r3, r0
 800055c:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 800055e:	197c      	adds	r4, r7, r5
 8000560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000562:	2618      	movs	r6, #24
 8000564:	19b9      	adds	r1, r7, r6
 8000566:	4842      	ldr	r0, [pc, #264]	; (8000670 <main+0x238>)
 8000568:	2202      	movs	r2, #2
 800056a:	f002 fb37 	bl	8002bdc <HAL_UART_Transmit>
 800056e:	0003      	movs	r3, r0
 8000570:	7023      	strb	r3, [r4, #0]

		  //sprintf(data, "%d", RxData);
		  UART2_STATUS = HAL_UART_Transmit(&huart2, RxData, sizeof(RxData), timeout);
 8000572:	197c      	adds	r4, r7, r5
 8000574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000576:	0039      	movs	r1, r7
 8000578:	483d      	ldr	r0, [pc, #244]	; (8000670 <main+0x238>)
 800057a:	2205      	movs	r2, #5
 800057c:	f002 fb2e 	bl	8002bdc <HAL_UART_Transmit>
 8000580:	0003      	movs	r3, r0
 8000582:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 8000584:	197c      	adds	r4, r7, r5
 8000586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000588:	19b9      	adds	r1, r7, r6
 800058a:	4839      	ldr	r0, [pc, #228]	; (8000670 <main+0x238>)
 800058c:	2202      	movs	r2, #2
 800058e:	f002 fb25 	bl	8002bdc <HAL_UART_Transmit>
 8000592:	0003      	movs	r3, r0
 8000594:	7023      	strb	r3, [r4, #0]
 8000596:	e04f      	b.n	8000638 <main+0x200>
	  }
	  else if(SPI1_STATUS == HAL_ERROR)
 8000598:	2344      	movs	r3, #68	; 0x44
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d115      	bne.n	80005ce <main+0x196>
	  {
		  // There was an error, send it out the serial port
		  UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_ERROR_Buffer, sizeof(HAL_ERROR_Buffer), timeout);
 80005a2:	2543      	movs	r5, #67	; 0x43
 80005a4:	197c      	adds	r4, r7, r5
 80005a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a8:	2230      	movs	r2, #48	; 0x30
 80005aa:	18b9      	adds	r1, r7, r2
 80005ac:	4830      	ldr	r0, [pc, #192]	; (8000670 <main+0x238>)
 80005ae:	2209      	movs	r2, #9
 80005b0:	f002 fb14 	bl	8002bdc <HAL_UART_Transmit>
 80005b4:	0003      	movs	r3, r0
 80005b6:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 80005b8:	197c      	adds	r4, r7, r5
 80005ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005bc:	2218      	movs	r2, #24
 80005be:	18b9      	adds	r1, r7, r2
 80005c0:	482b      	ldr	r0, [pc, #172]	; (8000670 <main+0x238>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	f002 fb0a 	bl	8002bdc <HAL_UART_Transmit>
 80005c8:	0003      	movs	r3, r0
 80005ca:	7023      	strb	r3, [r4, #0]
 80005cc:	e034      	b.n	8000638 <main+0x200>
	  }
	  else if(SPI1_STATUS == HAL_BUSY)
 80005ce:	2344      	movs	r3, #68	; 0x44
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d115      	bne.n	8000604 <main+0x1cc>
	  {
		  // HAL is busy, send it out the serial port
		  UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_BUSY_Buffer, sizeof(HAL_BUSY_Buffer), timeout);
 80005d8:	2543      	movs	r5, #67	; 0x43
 80005da:	197c      	adds	r4, r7, r5
 80005dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005de:	2228      	movs	r2, #40	; 0x28
 80005e0:	18b9      	adds	r1, r7, r2
 80005e2:	4823      	ldr	r0, [pc, #140]	; (8000670 <main+0x238>)
 80005e4:	2206      	movs	r2, #6
 80005e6:	f002 faf9 	bl	8002bdc <HAL_UART_Transmit>
 80005ea:	0003      	movs	r3, r0
 80005ec:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 80005ee:	197c      	adds	r4, r7, r5
 80005f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005f2:	2218      	movs	r2, #24
 80005f4:	18b9      	adds	r1, r7, r2
 80005f6:	481e      	ldr	r0, [pc, #120]	; (8000670 <main+0x238>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	f002 faef 	bl	8002bdc <HAL_UART_Transmit>
 80005fe:	0003      	movs	r3, r0
 8000600:	7023      	strb	r3, [r4, #0]
 8000602:	e019      	b.n	8000638 <main+0x200>
	  }
	  else if(SPI1_STATUS == HAL_TIMEOUT)
 8000604:	2344      	movs	r3, #68	; 0x44
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d114      	bne.n	8000638 <main+0x200>
	  {
		  // There was a HAL timeout, send it out the serial port
		  UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_TIMEOUT_Buffer, sizeof(HAL_TIMEOUT_Buffer), timeout);
 800060e:	2543      	movs	r5, #67	; 0x43
 8000610:	197c      	adds	r4, r7, r5
 8000612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000614:	221c      	movs	r2, #28
 8000616:	18b9      	adds	r1, r7, r2
 8000618:	4815      	ldr	r0, [pc, #84]	; (8000670 <main+0x238>)
 800061a:	220b      	movs	r2, #11
 800061c:	f002 fade 	bl	8002bdc <HAL_UART_Transmit>
 8000620:	0003      	movs	r3, r0
 8000622:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 8000624:	197c      	adds	r4, r7, r5
 8000626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000628:	2218      	movs	r2, #24
 800062a:	18b9      	adds	r1, r7, r2
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <main+0x238>)
 800062e:	2202      	movs	r2, #2
 8000630:	f002 fad4 	bl	8002bdc <HAL_UART_Transmit>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]
	  {
		  // do nothing, just to avoid a build warning
	  }

	  // Delay a while before trying again
	  HAL_Delay(2000);
 8000638:	23fa      	movs	r3, #250	; 0xfa
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fbdd 	bl	8000dfc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);	// set chip select low
 8000642:	e762      	b.n	800050a <main+0xd2>
 8000644:	00002710 	.word	0x00002710
 8000648:	50000400 	.word	0x50000400
 800064c:	0800368c 	.word	0x0800368c
 8000650:	08003694 	.word	0x08003694
 8000654:	080036a0 	.word	0x080036a0
 8000658:	080036a8 	.word	0x080036a8
 800065c:	080036b4 	.word	0x080036b4
 8000660:	080036b8 	.word	0x080036b8
 8000664:	080036c0 	.word	0x080036c0
 8000668:	50000800 	.word	0x50000800
 800066c:	20000020 	.word	0x20000020
 8000670:	20000078 	.word	0x20000078

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b09f      	sub	sp, #124	; 0x7c
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2440      	movs	r4, #64	; 0x40
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2338      	movs	r3, #56	; 0x38
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f002 ffed 	bl	8003664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	232c      	movs	r3, #44	; 0x2c
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	2314      	movs	r3, #20
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f002 ffe5 	bl	8003664 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	0018      	movs	r0, r3
 800069e:	2328      	movs	r3, #40	; 0x28
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f002 ffde 	bl	8003664 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xc8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a24      	ldr	r2, [pc, #144]	; (8000740 <SystemClock_Config+0xcc>)
 80006ae:	401a      	ands	r2, r3
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xc8>)
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	0109      	lsls	r1, r1, #4
 80006b6:	430a      	orrs	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2202      	movs	r2, #2
 80006c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2210      	movs	r2, #16
 80006cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 f830 	bl	800173c <HAL_RCC_OscConfig>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80006e0:	f000 f9ca 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	212c      	movs	r1, #44	; 0x2c
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	220f      	movs	r2, #15
 80006ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2100      	movs	r1, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fbe7 	bl	8001edc <HAL_RCC_ClockConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000712:	f000 f9b1 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2202      	movs	r2, #2
 800071a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fdbd 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800072e:	f000 f9a3 	bl	8000a78 <Error_Handler>
  }
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b01f      	add	sp, #124	; 0x7c
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40007000 	.word	0x40007000
 8000740:	ffffe7ff 	.word	0xffffe7ff

08000744 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	2308      	movs	r3, #8
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 ff86 	bl	8003664 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_ADC_Init+0xbc>)
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <MX_ADC_Init+0xc0>)
 800075c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_ADC_Init+0xbc>)
 8000760:	2200      	movs	r2, #0
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_ADC_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_ADC_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_ADC_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_ADC_Init+0xbc>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_ADC_Init+0xbc>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC_Init+0xbc>)
 8000784:	2220      	movs	r2, #32
 8000786:	2100      	movs	r1, #0
 8000788:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC_Init+0xbc>)
 800078c:	2221      	movs	r2, #33	; 0x21
 800078e:	2100      	movs	r1, #0
 8000790:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_ADC_Init+0xbc>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ADC_Init+0xbc>)
 800079a:	22c2      	movs	r2, #194	; 0xc2
 800079c:	32ff      	adds	r2, #255	; 0xff
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_ADC_Init+0xbc>)
 80007a2:	222c      	movs	r2, #44	; 0x2c
 80007a4:	2100      	movs	r1, #0
 80007a6:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_ADC_Init+0xbc>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_ADC_Init+0xbc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_ADC_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_ADC_Init+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_ADC_Init+0xbc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_ADC_Init+0xbc>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fb35 	bl	8000e38 <HAL_ADC_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 80007d2:	f000 f951 	bl	8000a78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007d6:	003b      	movs	r3, r7
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <MX_ADC_Init+0xc4>)
 80007da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007dc:	003b      	movs	r3, r7
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	0152      	lsls	r2, r2, #5
 80007e2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e4:	003a      	movs	r2, r7
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_ADC_Init+0xbc>)
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fc98 	bl	8001120 <HAL_ADC_ConfigChannel>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 80007f4:	f000 f940 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000f8 	.word	0x200000f8
 8000804:	40012400 	.word	0x40012400
 8000808:	30001000 	.word	0x30001000

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_SPI1_Init+0x68>)
 8000812:	4a19      	ldr	r2, [pc, #100]	; (8000878 <MX_SPI1_Init+0x6c>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI1_Init+0x68>)
 8000818:	2282      	movs	r2, #130	; 0x82
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_SPI1_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_SPI1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_SPI1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x68>)
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_SPI1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SPI1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI1_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SPI1_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI1_Init+0x68>)
 8000858:	2207      	movs	r2, #7
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_SPI1_Init+0x68>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fe94 	bl	800258c <HAL_SPI_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f906 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000020 	.word	0x20000020
 8000878:	40013000 	.word	0x40013000

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <MX_USART2_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000888:	2296      	movs	r2, #150	; 0x96
 800088a:	0192      	lsls	r2, r2, #6
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f002 f937 	bl	8002b34 <HAL_UART_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f8d5 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000078 	.word	0x20000078
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	240c      	movs	r4, #12
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f002 feb9 	bl	8003664 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <MX_GPIO_Init+0x190>)
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4b5d      	ldr	r3, [pc, #372]	; (8000a6c <MX_GPIO_Init+0x190>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	430a      	orrs	r2, r1
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fe:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <MX_GPIO_Init+0x190>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	2204      	movs	r2, #4
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <MX_GPIO_Init+0x190>)
 800090c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090e:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <MX_GPIO_Init+0x190>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <MX_GPIO_Init+0x190>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b52      	ldr	r3, [pc, #328]	; (8000a6c <MX_GPIO_Init+0x190>)
 8000924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000926:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <MX_GPIO_Init+0x190>)
 8000928:	2102      	movs	r1, #2
 800092a:	430a      	orrs	r2, r1
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
 800092e:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <MX_GPIO_Init+0x190>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	2202      	movs	r2, #2
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800093a:	4b4d      	ldr	r3, [pc, #308]	; (8000a70 <MX_GPIO_Init+0x194>)
 800093c:	2200      	movs	r2, #0
 800093e:	2128      	movs	r1, #40	; 0x28
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fedd 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2201      	movs	r2, #1
 800094c:	2110      	movs	r1, #16
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fed6 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000954:	23e0      	movs	r3, #224	; 0xe0
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	4845      	ldr	r0, [pc, #276]	; (8000a70 <MX_GPIO_Init+0x194>)
 800095a:	2201      	movs	r2, #1
 800095c:	0019      	movs	r1, r3
 800095e:	f000 fecf 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	00d9      	lsls	r1, r3, #3
 8000966:	23a0      	movs	r3, #160	; 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2200      	movs	r2, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fec7 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000972:	4b40      	ldr	r3, [pc, #256]	; (8000a74 <MX_GPIO_Init+0x198>)
 8000974:	2200      	movs	r2, #0
 8000976:	2120      	movs	r1, #32
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fec1 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2228      	movs	r2, #40	; 0x28
 8000982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2201      	movs	r2, #1
 8000988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a35      	ldr	r2, [pc, #212]	; (8000a70 <MX_GPIO_Init+0x194>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f000 fd31 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2210      	movs	r2, #16
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2201      	movs	r2, #1
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	193a      	adds	r2, r7, r4
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fd1e 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	22c0      	movs	r2, #192	; 0xc0
 80009cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <MX_GPIO_Init+0x194>)
 80009de:	0019      	movs	r1, r3
 80009e0:	0010      	movs	r0, r2
 80009e2:	f000 fd0f 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009e6:	0021      	movs	r1, r4
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	22e0      	movs	r2, #224	; 0xe0
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2201      	movs	r2, #1
 80009fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	000c      	movs	r4, r1
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <MX_GPIO_Init+0x194>)
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	f000 fcfa 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a10:	0021      	movs	r1, r4
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	00d2      	lsls	r2, r2, #3
 8000a18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	000c      	movs	r4, r1
 8000a2e:	187a      	adds	r2, r7, r1
 8000a30:	23a0      	movs	r3, #160	; 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fce4 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a3c:	0021      	movs	r1, r4
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2220      	movs	r2, #32
 8000a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2201      	movs	r2, #1
 8000a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x198>)
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	f000 fcd1 	bl	8001404 <HAL_GPIO_Init>

}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b009      	add	sp, #36	; 0x24
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	50000800 	.word	0x50000800
 8000a74:	50000400 	.word	0x50000400

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_MspInit+0x24>)
 8000a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x24>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	430a      	orrs	r2, r1
 8000a92:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_MspInit+0x24>)
 8000a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_MspInit+0x24>)
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	0549      	lsls	r1, r1, #21
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2314      	movs	r3, #20
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f002 fdd0 	bl	8003664 <memset>
  if(hadc->Instance==ADC1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <HAL_ADC_MspInit+0x70>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d122      	bne.n	8000b14 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_ADC_MspInit+0x74>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_ADC_MspInit+0x74>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0089      	lsls	r1, r1, #2
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_ADC_MspInit+0x74>)
 8000ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_ADC_MspInit+0x74>)
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_ADC_MspInit+0x74>)
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	2204      	movs	r2, #4
 8000aee:	4013      	ands	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PC2     ------> ADC_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af4:	210c      	movs	r1, #12
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2204      	movs	r2, #4
 8000afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2203      	movs	r2, #3
 8000b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_ADC_MspInit+0x78>)
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	0010      	movs	r0, r2
 8000b10:	f000 fc78 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b008      	add	sp, #32
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40012400 	.word	0x40012400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	50000800 	.word	0x50000800

08000b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	230c      	movs	r3, #12
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	2314      	movs	r3, #20
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f002 fd92 	bl	8003664 <memset>
  if(hspi->Instance==SPI1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_SPI_MspInit+0x80>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d129      	bne.n	8000b9e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0149      	lsls	r1, r1, #5
 8000b54:	430a      	orrs	r2, r1
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	430a      	orrs	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b70:	210c      	movs	r1, #12
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	22e0      	movs	r2, #224	; 0xe0
 8000b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2203      	movs	r2, #3
 8000b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	187a      	adds	r2, r7, r1
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f000 fc33 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b008      	add	sp, #32
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	230c      	movs	r3, #12
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f002 fd4e 	bl	8003664 <memset>
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x80>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d129      	bne.n	8000c26 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x84>)
 8000bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0x84>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0289      	lsls	r1, r1, #10
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0x84>)
 8000be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0x84>)
 8000be6:	2101      	movs	r1, #1
 8000be8:	430a      	orrs	r2, r1
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0x84>)
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2202      	movs	r2, #2
 8000c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2204      	movs	r2, #4
 8000c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	187a      	adds	r2, r7, r1
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fbef 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b008      	add	sp, #32
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40021000 	.word	0x40021000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f8b6 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <SystemInit+0x64>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <SystemInit+0x64>)
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	0049      	lsls	r1, r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <SystemInit+0x64>)
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <SystemInit+0x64>)
 8000c84:	4913      	ldr	r1, [pc, #76]	; (8000cd4 <SystemInit+0x68>)
 8000c86:	400a      	ands	r2, r1
 8000c88:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <SystemInit+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <SystemInit+0x64>)
 8000c90:	4911      	ldr	r1, [pc, #68]	; (8000cd8 <SystemInit+0x6c>)
 8000c92:	400a      	ands	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <SystemInit+0x64>)
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <SystemInit+0x64>)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <SystemInit+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <SystemInit+0x64>)
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <SystemInit+0x70>)
 8000caa:	400a      	ands	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <SystemInit+0x64>)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <SystemInit+0x64>)
 8000cb4:	490a      	ldr	r1, [pc, #40]	; (8000ce0 <SystemInit+0x74>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SystemInit+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <SystemInit+0x78>)
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	0512      	lsls	r2, r2, #20
 8000cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	88ff400c 	.word	0x88ff400c
 8000cd8:	fef6fff6 	.word	0xfef6fff6
 8000cdc:	fffbffff 	.word	0xfffbffff
 8000ce0:	ff02ffff 	.word	0xff02ffff
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000cec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cee:	e003      	b.n	8000cf8 <LoopCopyDataInit>

08000cf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000cf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cf6:	3104      	adds	r1, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cf8:	480b      	ldr	r0, [pc, #44]	; (8000d28 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <LoopForever+0xe>)
  adds  r2, r0, r1
 8000cfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d00:	d3f6      	bcc.n	8000cf0 <CopyDataInit>
  ldr  r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000d04:	e002      	b.n	8000d0c <LoopFillZerobss>

08000d06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000d06:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d08:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0a:	3204      	adds	r2, #4

08000d0c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <LoopForever+0x16>)
  cmp  r2, r3
 8000d0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d10:	d3f9      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d12:	f7ff ffab 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f002 fc81 	bl	800361c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fb8d 	bl	8000438 <main>

08000d1e <LoopForever>:

LoopForever:
    b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
   ldr   r0, =_estack
 8000d20:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000d24:	08003744 	.word	0x08003744
  ldr  r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d2c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000d30:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000d34:	20000158 	.word	0x20000158

08000d38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_COMP_IRQHandler>
	...

08000d3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x3c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_Init+0x3c>)
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	430a      	orrs	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 f811 	bl	8000d7c <HAL_InitTick>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e001      	b.n	8000d6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d66:	f7ff fe8d 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_InitTick+0x50>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	23fa      	movs	r3, #250	; 0xfa
 8000d92:	0099      	lsls	r1, r3, #2
 8000d94:	0010      	movs	r0, r2
 8000d96:	f7ff f9b7 	bl	8000108 <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fb24 	bl	80013ea <HAL_SYSTICK_Config>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d004      	beq.n	8000db0 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000da6:	230f      	movs	r3, #15
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e006      	b.n	8000dbe <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	2301      	movs	r3, #1
 8000db4:	425b      	negs	r3, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fb01 	bl	80013c0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b004      	add	sp, #16
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick++;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_IncTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <HAL_IncTick+0x14>)
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000154 	.word	0x20000154

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000154 	.word	0x20000154

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fff0 	bl	8000de8 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	d002      	beq.n	8000e1c <HAL_Delay+0x20>
  {
    wait++;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	f7ff ffe3 	bl	8000de8 <HAL_GetTick>
 8000e22:	0002      	movs	r2, r0
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d8f7      	bhi.n	8000e1e <HAL_Delay+0x22>
  {
  }
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b004      	add	sp, #16
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e159      	b.n	80010fe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10a      	bne.n	8000e68 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2250      	movs	r2, #80	; 0x50
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fe22 	bl	8000aac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d005      	beq.n	8000e80 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e7e:	d00b      	beq.n	8000e98 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e84:	2210      	movs	r2, #16
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2250      	movs	r2, #80	; 0x50
 8000e90:	2100      	movs	r1, #0
 8000e92:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e132      	b.n	80010fe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9c:	4a9a      	ldr	r2, [pc, #616]	; (8001108 <HAL_ADC_Init+0x2d0>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_ADC_Init+0x90>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_Init+0x90>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <HAL_ADC_Init+0x92>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d149      	bne.n	8000f62 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	23c0      	movs	r3, #192	; 0xc0
 8000ed4:	061b      	lsls	r3, r3, #24
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_ADC_Init+0xba>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d005      	beq.n	8000ef2 <HAL_ADC_Init+0xba>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	061b      	lsls	r3, r3, #24
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d111      	bne.n	8000f16 <HAL_ADC_Init+0xde>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	0892      	lsrs	r2, r2, #2
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6919      	ldr	r1, [r3, #16]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	e014      	b.n	8000f40 <HAL_ADC_Init+0x108>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	0892      	lsrs	r2, r2, #2
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	4b79      	ldr	r3, [pc, #484]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b78      	ldr	r3, [pc, #480]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f2c:	4978      	ldr	r1, [pc, #480]	; (8001110 <HAL_ADC_Init+0x2d8>)
 8000f2e:	400a      	ands	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	4b76      	ldr	r3, [pc, #472]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	4b74      	ldr	r3, [pc, #464]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2118      	movs	r1, #24
 8000f4c:	438a      	bics	r2, r1
 8000f4e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68d9      	ldr	r1, [r3, #12]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000f62:	4b6a      	ldr	r3, [pc, #424]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b69      	ldr	r3, [pc, #420]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f68:	496a      	ldr	r1, [pc, #424]	; (8001114 <HAL_ADC_Init+0x2dc>)
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000f6e:	4b67      	ldr	r3, [pc, #412]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f70:	6819      	ldr	r1, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	065a      	lsls	r2, r3, #25
 8000f78:	4b64      	ldr	r3, [pc, #400]	; (800110c <HAL_ADC_Init+0x2d4>)
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	055b      	lsls	r3, r3, #21
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d108      	bne.n	8000f9e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0549      	lsls	r1, r1, #21
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	495b      	ldr	r1, [pc, #364]	; (8001118 <HAL_ADC_Init+0x2e0>)
 8000faa:	400a      	ands	r2, r1
 8000fac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68d9      	ldr	r1, [r3, #12]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_Init+0x18c>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_Init+0x18e>
 8000fc4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fc6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2020      	movs	r0, #32
 8000fcc:	5c1b      	ldrb	r3, [r3, r0]
 8000fce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000fd0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	202c      	movs	r0, #44	; 0x2c
 8000fd6:	5c1b      	ldrb	r3, [r3, r0]
 8000fd8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fda:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fe0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000fe8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ff0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ffe:	23c2      	movs	r3, #194	; 0xc2
 8001000:	33ff      	adds	r3, #255	; 0xff
 8001002:	429a      	cmp	r2, r3
 8001004:	d00b      	beq.n	800101e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68d9      	ldr	r1, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2221      	movs	r2, #33	; 0x21
 8001022:	5c9b      	ldrb	r3, [r3, r2]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d11a      	bne.n	800105e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	5c9b      	ldrb	r3, [r3, r2]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	0249      	lsls	r1, r1, #9
 8001040:	430a      	orrs	r2, r1
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	e00b      	b.n	800105e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104a:	2220      	movs	r2, #32
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	2201      	movs	r2, #1
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d11f      	bne.n	80010a6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	492a      	ldr	r1, [pc, #168]	; (800111c <HAL_ADC_Init+0x2e4>)
 8001072:	400a      	ands	r2, r1
 8001074:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6919      	ldr	r1, [r3, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001084:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800108a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2101      	movs	r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	e00e      	b.n	80010c4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d107      	bne.n	80010c4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2101      	movs	r1, #1
 80010c0:	438a      	bics	r2, r1
 80010c2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2107      	movs	r1, #7
 80010d0:	438a      	bics	r2, r1
 80010d2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6959      	ldr	r1, [r3, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f0:	2203      	movs	r2, #3
 80010f2:	4393      	bics	r3, r2
 80010f4:	2201      	movs	r2, #1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	fffffefd 	.word	0xfffffefd
 800110c:	40012708 	.word	0x40012708
 8001110:	ffc3ffff 	.word	0xffc3ffff
 8001114:	fdffffff 	.word	0xfdffffff
 8001118:	fffe0219 	.word	0xfffe0219
 800111c:	fffffc03 	.word	0xfffffc03

08001120 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2250      	movs	r2, #80	; 0x50
 800112e:	5c9b      	ldrb	r3, [r3, r2]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x18>
 8001134:	2302      	movs	r3, #2
 8001136:	e085      	b.n	8001244 <HAL_ADC_ConfigChannel+0x124>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2250      	movs	r2, #80	; 0x50
 800113c:	2101      	movs	r1, #1
 800113e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2204      	movs	r2, #4
 8001148:	4013      	ands	r3, r2
 800114a:	d00b      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	2220      	movs	r2, #32
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2250      	movs	r2, #80	; 0x50
 800115c:	2100      	movs	r1, #0
 800115e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e06f      	b.n	8001244 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a38      	ldr	r2, [pc, #224]	; (800124c <HAL_ADC_ConfigChannel+0x12c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d035      	beq.n	80011da <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	035b      	lsls	r3, r3, #13
 800117a:	0b5a      	lsrs	r2, r3, #13
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	02db      	lsls	r3, r3, #11
 800118c:	4013      	ands	r3, r2
 800118e:	d009      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0409      	lsls	r1, r1, #16
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800119e:	200a      	movs	r0, #10
 80011a0:	f000 f85e 	bl	8001260 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	029b      	lsls	r3, r3, #10
 80011ac:	4013      	ands	r3, r2
 80011ae:	d006      	beq.n	80011be <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	03c9      	lsls	r1, r1, #15
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	4013      	ands	r3, r2
 80011c8:	d037      	beq.n	800123a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0449      	lsls	r1, r1, #17
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e02f      	b.n	800123a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	035b      	lsls	r3, r3, #13
 80011e6:	0b5b      	lsrs	r3, r3, #13
 80011e8:	43d9      	mvns	r1, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	400a      	ands	r2, r1
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	02db      	lsls	r3, r3, #11
 80011fa:	4013      	ands	r3, r2
 80011fc:	d005      	beq.n	800120a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 8001204:	4913      	ldr	r1, [pc, #76]	; (8001254 <HAL_ADC_ConfigChannel+0x134>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	029b      	lsls	r3, r3, #10
 8001212:	4013      	ands	r3, r2
 8001214:	d005      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 800121c:	490e      	ldr	r1, [pc, #56]	; (8001258 <HAL_ADC_ConfigChannel+0x138>)
 800121e:	400a      	ands	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	4013      	ands	r3, r2
 800122c:	d005      	beq.n	800123a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_ADC_ConfigChannel+0x130>)
 8001234:	4909      	ldr	r1, [pc, #36]	; (800125c <HAL_ADC_ConfigChannel+0x13c>)
 8001236:	400a      	ands	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2250      	movs	r2, #80	; 0x50
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	00001001 	.word	0x00001001
 8001250:	40012708 	.word	0x40012708
 8001254:	ff7fffff 	.word	0xff7fffff
 8001258:	ffbfffff 	.word	0xffbfffff
 800125c:	feffffff 	.word	0xfeffffff

08001260 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <ADC_DelayMicroSecond+0x34>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	490a      	ldr	r1, [pc, #40]	; (8001298 <ADC_DelayMicroSecond+0x38>)
 800126e:	0018      	movs	r0, r3
 8001270:	f7fe ff4a 	bl	8000108 <__udivsi3>
 8001274:	0003      	movs	r3, r0
 8001276:	001a      	movs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4353      	muls	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800127e:	e002      	b.n	8001286 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f9      	bne.n	8001280 <ADC_DelayMicroSecond+0x20>
  } 
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	000f4240 	.word	0x000f4240

0800129c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	0002      	movs	r2, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b7f      	cmp	r3, #127	; 0x7f
 80012b0:	d932      	bls.n	8001318 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b2:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <NVIC_SetPriority+0xd4>)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	0019      	movs	r1, r3
 80012ba:	230f      	movs	r3, #15
 80012bc:	400b      	ands	r3, r1
 80012be:	3b08      	subs	r3, #8
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3306      	adds	r3, #6
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	18d3      	adds	r3, r2, r3
 80012c8:	3304      	adds	r3, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1dfa      	adds	r2, r7, #7
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	0011      	movs	r1, r2
 80012d2:	2203      	movs	r2, #3
 80012d4:	400a      	ands	r2, r1
 80012d6:	00d2      	lsls	r2, r2, #3
 80012d8:	21ff      	movs	r1, #255	; 0xff
 80012da:	4091      	lsls	r1, r2
 80012dc:	000a      	movs	r2, r1
 80012de:	43d2      	mvns	r2, r2
 80012e0:	401a      	ands	r2, r3
 80012e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	019b      	lsls	r3, r3, #6
 80012e8:	22ff      	movs	r2, #255	; 0xff
 80012ea:	401a      	ands	r2, r3
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	2303      	movs	r3, #3
 80012f4:	4003      	ands	r3, r0
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fa:	481d      	ldr	r0, [pc, #116]	; (8001370 <NVIC_SetPriority+0xd4>)
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	001c      	movs	r4, r3
 8001302:	230f      	movs	r3, #15
 8001304:	4023      	ands	r3, r4
 8001306:	3b08      	subs	r3, #8
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	430a      	orrs	r2, r1
 800130c:	3306      	adds	r3, #6
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	18c3      	adds	r3, r0, r3
 8001312:	3304      	adds	r3, #4
 8001314:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001316:	e027      	b.n	8001368 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001318:	4a16      	ldr	r2, [pc, #88]	; (8001374 <NVIC_SetPriority+0xd8>)
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	33c0      	adds	r3, #192	; 0xc0
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	589b      	ldr	r3, [r3, r2]
 8001328:	1dfa      	adds	r2, r7, #7
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	0011      	movs	r1, r2
 800132e:	2203      	movs	r2, #3
 8001330:	400a      	ands	r2, r1
 8001332:	00d2      	lsls	r2, r2, #3
 8001334:	21ff      	movs	r1, #255	; 0xff
 8001336:	4091      	lsls	r1, r2
 8001338:	000a      	movs	r2, r1
 800133a:	43d2      	mvns	r2, r2
 800133c:	401a      	ands	r2, r3
 800133e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	019b      	lsls	r3, r3, #6
 8001344:	22ff      	movs	r2, #255	; 0xff
 8001346:	401a      	ands	r2, r3
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	0018      	movs	r0, r3
 800134e:	2303      	movs	r3, #3
 8001350:	4003      	ands	r3, r0
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <NVIC_SetPriority+0xd8>)
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	430a      	orrs	r2, r1
 8001362:	33c0      	adds	r3, #192	; 0xc0
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	501a      	str	r2, [r3, r0]
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b003      	add	sp, #12
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	e000e100 	.word	0xe000e100

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <SysTick_Config+0x40>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e010      	b.n	80013b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <SysTick_Config+0x44>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	3a01      	subs	r2, #1
 8001394:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	2301      	movs	r3, #1
 8001398:	425b      	negs	r3, r3
 800139a:	2103      	movs	r1, #3
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ff7d 	bl	800129c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SysTick_Config+0x44>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x44>)
 80013aa:	2207      	movs	r2, #7
 80013ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	00ffffff 	.word	0x00ffffff
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	210f      	movs	r1, #15
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	1c02      	adds	r2, r0, #0
 80013d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <NVIC_SetPriority>
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff ffbf 	bl	8001378 <SysTick_Config>
 80013fa:	0003      	movs	r3, r0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800141a:	e155      	b.n	80016c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4091      	lsls	r1, r2
 8001426:	000a      	movs	r2, r1
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d100      	bne.n	8001434 <HAL_GPIO_Init+0x30>
 8001432:	e146      	b.n	80016c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x40>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b12      	cmp	r3, #18
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	58d3      	ldr	r3, [r2, r3]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2207      	movs	r2, #7
 8001456:	4013      	ands	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	409a      	lsls	r2, r3
 800145e:	0013      	movs	r3, r2
 8001460:	43da      	mvns	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2107      	movs	r1, #7
 8001470:	400b      	ands	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d00b      	beq.n	80014ac <HAL_GPIO_Init+0xa8>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d007      	beq.n	80014ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a0:	2b11      	cmp	r3, #17
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b12      	cmp	r3, #18
 80014aa:	d130      	bne.n	800150e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	409a      	lsls	r2, r3
 80014ba:	0013      	movs	r3, r2
 80014bc:	43da      	mvns	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	409a      	lsls	r2, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e2:	2201      	movs	r2, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	2201      	movs	r2, #1
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	401a      	ands	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	055b      	lsls	r3, r3, #21
 800157a:	4013      	ands	r3, r2
 800157c:	d100      	bne.n	8001580 <HAL_GPIO_Init+0x17c>
 800157e:	e0a0      	b.n	80016c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HAL_GPIO_Init+0x2dc>)
 8001582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001584:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <HAL_GPIO_Init+0x2dc>)
 8001586:	2101      	movs	r1, #1
 8001588:	430a      	orrs	r2, r1
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800158c:	4a55      	ldr	r2, [pc, #340]	; (80016e4 <HAL_GPIO_Init+0x2e0>)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	589b      	ldr	r3, [r3, r2]
 8001598:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2203      	movs	r2, #3
 800159e:	4013      	ands	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	409a      	lsls	r2, r3
 80015a6:	0013      	movs	r3, r2
 80015a8:	43da      	mvns	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	23a0      	movs	r3, #160	; 0xa0
 80015b4:	05db      	lsls	r3, r3, #23
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x1f6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <HAL_GPIO_Init+0x2e4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x1f2>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a49      	ldr	r2, [pc, #292]	; (80016ec <HAL_GPIO_Init+0x2e8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_GPIO_Init+0x2ec>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x1ea>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a47      	ldr	r2, [pc, #284]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x1e6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a46      	ldr	r2, [pc, #280]	; (80016f8 <HAL_GPIO_Init+0x2f4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x1e2>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e00a      	b.n	80015fc <HAL_GPIO_Init+0x1f8>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x1f8>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x1f8>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x1f8>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x1f8>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x1f8>
 80015fa:	2300      	movs	r3, #0
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	2103      	movs	r1, #3
 8001600:	400a      	ands	r2, r1
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x2e0>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	4013      	ands	r3, r2
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	029b      	lsls	r3, r3, #10
 800165c:	4013      	ands	r3, r2
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	035b      	lsls	r3, r3, #13
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	039b      	lsls	r3, r3, #14
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_GPIO_Init+0x2f8>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	40da      	lsrs	r2, r3
 80016d0:	1e13      	subs	r3, r2, #0
 80016d2:	d000      	beq.n	80016d6 <HAL_GPIO_Init+0x2d2>
 80016d4:	e6a2      	b.n	800141c <HAL_GPIO_Init+0x18>
  }
}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b006      	add	sp, #24
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	50000400 	.word	0x50000400
 80016ec:	50000800 	.word	0x50000800
 80016f0:	50000c00 	.word	0x50000c00
 80016f4:	50001000 	.word	0x50001000
 80016f8:	50001c00 	.word	0x50001c00
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	0008      	movs	r0, r1
 800170a:	0011      	movs	r1, r2
 800170c:	1cbb      	adds	r3, r7, #2
 800170e:	1c02      	adds	r2, r0, #0
 8001710:	801a      	strh	r2, [r3, #0]
 8001712:	1c7b      	adds	r3, r7, #1
 8001714:	1c0a      	adds	r2, r1, #0
 8001716:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001718:	1c7b      	adds	r3, r7, #1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001720:	1cbb      	adds	r3, r7, #2
 8001722:	881a      	ldrh	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800172a:	1cbb      	adds	r3, r7, #2
 800172c:	881a      	ldrh	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 fbbc 	bl	8001ec8 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001750:	4bc8      	ldr	r3, [pc, #800]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	220c      	movs	r2, #12
 8001756:	4013      	ands	r3, r2
 8001758:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800175a:	4bc6      	ldr	r3, [pc, #792]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	025b      	lsls	r3, r3, #9
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d100      	bne.n	8001772 <HAL_RCC_OscConfig+0x36>
 8001770:	e07e      	b.n	8001870 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	2b08      	cmp	r3, #8
 8001776:	d007      	beq.n	8001788 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x68>
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	429a      	cmp	r2, r3
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4bba      	ldr	r3, [pc, #744]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	029b      	lsls	r3, r3, #10
 8001790:	4013      	ands	r3, r2
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x5a>
 8001794:	e06b      	b.n	800186e <HAL_RCC_OscConfig+0x132>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d167      	bne.n	800186e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f000 fb92 	bl	8001ec8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	025b      	lsls	r3, r3, #9
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x84>
 80017b0:	4bb0      	ldr	r3, [pc, #704]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4baf      	ldr	r3, [pc, #700]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	0249      	lsls	r1, r1, #9
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e027      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	23a0      	movs	r3, #160	; 0xa0
 80017c6:	02db      	lsls	r3, r3, #11
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d10e      	bne.n	80017ea <HAL_RCC_OscConfig+0xae>
 80017cc:	4ba9      	ldr	r3, [pc, #676]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4ba8      	ldr	r3, [pc, #672]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	02c9      	lsls	r1, r1, #11
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	4ba6      	ldr	r3, [pc, #664]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4ba5      	ldr	r3, [pc, #660]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0249      	lsls	r1, r1, #9
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e012      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017ea:	4ba2      	ldr	r3, [pc, #648]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4ba1      	ldr	r3, [pc, #644]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017f0:	49a1      	ldr	r1, [pc, #644]	; (8001a78 <HAL_RCC_OscConfig+0x33c>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	4b9f      	ldr	r3, [pc, #636]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	4013      	ands	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4b9b      	ldr	r3, [pc, #620]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b9a      	ldr	r3, [pc, #616]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 800180a:	499c      	ldr	r1, [pc, #624]	; (8001a7c <HAL_RCC_OscConfig+0x340>)
 800180c:	400a      	ands	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d015      	beq.n	8001844 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fae6 	bl	8000de8 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001820:	e009      	b.n	8001836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001822:	f7ff fae1 	bl	8000de8 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b64      	cmp	r3, #100	; 0x64
 800182e:	d902      	bls.n	8001836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	f000 fb49 	bl	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001836:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d0ef      	beq.n	8001822 <HAL_RCC_OscConfig+0xe6>
 8001842:	e015      	b.n	8001870 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fad0 	bl	8000de8 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184e:	f7ff facb 	bl	8000de8 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e333      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001860:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	029b      	lsls	r3, r3, #10
 8001868:	4013      	ands	r3, r2
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x112>
 800186c:	e000      	b.n	8001870 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2202      	movs	r2, #2
 8001876:	4013      	ands	r3, r2
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x140>
 800187a:	e098      	b.n	80019ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	2220      	movs	r2, #32
 8001886:	4013      	ands	r3, r2
 8001888:	d009      	beq.n	800189e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800188a:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b79      	ldr	r3, [pc, #484]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001890:	2120      	movs	r1, #32
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	2220      	movs	r2, #32
 800189a:	4393      	bics	r3, r2
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d13d      	bne.n	8001926 <HAL_RCC_OscConfig+0x1ea>
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d13a      	bne.n	8001926 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80018b0:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2204      	movs	r2, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_RCC_OscConfig+0x188>
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e301      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a6d      	ldr	r2, [pc, #436]	; (8001a80 <HAL_RCC_OscConfig+0x344>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	021a      	lsls	r2, r3, #8
 80018d4:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80018da:	4b66      	ldr	r3, [pc, #408]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2209      	movs	r2, #9
 80018e0:	4393      	bics	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80018e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ec:	f000 fc20 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80018f0:	0001      	movs	r1, r0
 80018f2:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	220f      	movs	r2, #15
 80018fa:	4013      	ands	r3, r2
 80018fc:	4a61      	ldr	r2, [pc, #388]	; (8001a84 <HAL_RCC_OscConfig+0x348>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	000a      	movs	r2, r1
 8001902:	40da      	lsrs	r2, r3
 8001904:	4b60      	ldr	r3, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x34c>)
 8001906:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001908:	2513      	movs	r5, #19
 800190a:	197c      	adds	r4, r7, r5
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fa35 	bl	8000d7c <HAL_InitTick>
 8001912:	0003      	movs	r3, r0
 8001914:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001916:	197b      	adds	r3, r7, r5
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d047      	beq.n	80019ae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800191e:	2313      	movs	r3, #19
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	e2d0      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	d027      	beq.n	800197c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800192c:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2209      	movs	r2, #9
 8001932:	4393      	bics	r3, r2
 8001934:	0019      	movs	r1, r3
 8001936:	4b4f      	ldr	r3, [pc, #316]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fa53 	bl	8000de8 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fa4e 	bl	8000de8 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e2b6      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2204      	movs	r2, #4
 8001960:	4013      	ands	r3, r2
 8001962:	d0f1      	beq.n	8001948 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a45      	ldr	r2, [pc, #276]	; (8001a80 <HAL_RCC_OscConfig+0x344>)
 800196a:	4013      	ands	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	021a      	lsls	r2, r3, #8
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	e018      	b.n	80019ae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197c:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fa2e 	bl	8000de8 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fa29 	bl	8000de8 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e291      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019a4:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2204      	movs	r2, #4
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1f1      	bne.n	8001992 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2210      	movs	r2, #16
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x27e>
 80019b8:	e09f      	b.n	8001afa <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d13f      	bne.n	8001a40 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x29c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e277      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <HAL_RCC_OscConfig+0x350>)
 80019de:	4013      	ands	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	0a19      	lsrs	r1, r3, #8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	061a      	lsls	r2, r3, #24
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	0b5b      	lsrs	r3, r3, #13
 8001a06:	3301      	adds	r3, #1
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0212      	lsls	r2, r2, #8
 8001a0c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	210f      	movs	r1, #15
 8001a16:	400b      	ands	r3, r1
 8001a18:	491a      	ldr	r1, [pc, #104]	; (8001a84 <HAL_RCC_OscConfig+0x348>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_RCC_OscConfig+0x34c>)
 8001a20:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a22:	2513      	movs	r5, #19
 8001a24:	197c      	adds	r4, r7, r5
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff f9a8 	bl	8000d7c <HAL_InitTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a30:	197b      	adds	r3, r7, r5
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d060      	beq.n	8001afa <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001a38:	2313      	movs	r3, #19
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	e243      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03e      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_OscConfig+0x338>)
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0049      	lsls	r1, r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff f9c7 	bl	8000de8 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a5e:	e017      	b.n	8001a90 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a60:	f7ff f9c2 	bl	8000de8 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d910      	bls.n	8001a90 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e22a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40021000 	.word	0x40021000
 8001a78:	fffeffff 	.word	0xfffeffff
 8001a7c:	fffbffff 	.word	0xfffbffff
 8001a80:	ffffe0ff 	.word	0xffffe0ff
 8001a84:	080036c8 	.word	0x080036c8
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a90:	4bc6      	ldr	r3, [pc, #792]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0e1      	beq.n	8001a60 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9c:	4bc3      	ldr	r3, [pc, #780]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4ac3      	ldr	r2, [pc, #780]	; (8001db0 <HAL_RCC_OscConfig+0x674>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aaa:	4bc0      	ldr	r3, [pc, #768]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab0:	4bbe      	ldr	r3, [pc, #760]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	0a19      	lsrs	r1, r3, #8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	061a      	lsls	r2, r3, #24
 8001abe:	4bbb      	ldr	r3, [pc, #748]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	e019      	b.n	8001afa <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ac6:	4bb9      	ldr	r3, [pc, #740]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4bb8      	ldr	r3, [pc, #736]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001acc:	49b9      	ldr	r1, [pc, #740]	; (8001db4 <HAL_RCC_OscConfig+0x678>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f989 	bl	8000de8 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001adc:	f7ff f984 	bl	8000de8 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1ec      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001aee:	4baf      	ldr	r3, [pc, #700]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2208      	movs	r2, #8
 8001b00:	4013      	ands	r3, r2
 8001b02:	d036      	beq.n	8001b72 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d019      	beq.n	8001b40 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0c:	4ba7      	ldr	r3, [pc, #668]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b10:	4ba6      	ldr	r3, [pc, #664]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f966 	bl	8000de8 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff f961 	bl	8000de8 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1c9      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d0f1      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3e6>
 8001b3e:	e018      	b.n	8001b72 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b40:	4b9a      	ldr	r3, [pc, #616]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b44:	4b99      	ldr	r3, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	438a      	bics	r2, r1
 8001b4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f94c 	bl	8000de8 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b56:	f7ff f947 	bl	8000de8 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1af      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b68:	4b90      	ldr	r3, [pc, #576]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d1f1      	bne.n	8001b56 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <HAL_RCC_OscConfig+0x442>
 8001b7c:	e0af      	b.n	8001cde <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2323      	movs	r3, #35	; 0x23
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	055b      	lsls	r3, r3, #21
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d10a      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b86      	ldr	r3, [pc, #536]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b96:	4b85      	ldr	r3, [pc, #532]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0549      	lsls	r1, r1, #21
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ba0:	2323      	movs	r3, #35	; 0x23
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b83      	ldr	r3, [pc, #524]	; (8001db8 <HAL_RCC_OscConfig+0x67c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d11a      	bne.n	8001bea <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb4:	4b80      	ldr	r3, [pc, #512]	; (8001db8 <HAL_RCC_OscConfig+0x67c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b7f      	ldr	r3, [pc, #508]	; (8001db8 <HAL_RCC_OscConfig+0x67c>)
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	0049      	lsls	r1, r1, #1
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f911 	bl	8000de8 <HAL_GetTick>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff f90c 	bl	8000de8 <HAL_GetTick>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e174      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x67c>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4ca>
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bfa:	4b6c      	ldr	r3, [pc, #432]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	0049      	lsls	r1, r1, #1
 8001c00:	430a      	orrs	r2, r1
 8001c02:	651a      	str	r2, [r3, #80]	; 0x50
 8001c04:	e031      	b.n	8001c6a <HAL_RCC_OscConfig+0x52e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c14:	4967      	ldr	r1, [pc, #412]	; (8001db4 <HAL_RCC_OscConfig+0x678>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	651a      	str	r2, [r3, #80]	; 0x50
 8001c1a:	4b64      	ldr	r3, [pc, #400]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c20:	4966      	ldr	r1, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x680>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	651a      	str	r2, [r3, #80]	; 0x50
 8001c26:	e020      	b.n	8001c6a <HAL_RCC_OscConfig+0x52e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	23a0      	movs	r3, #160	; 0xa0
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10e      	bne.n	8001c52 <HAL_RCC_OscConfig+0x516>
 8001c34:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c38:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	00c9      	lsls	r1, r1, #3
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	0049      	lsls	r1, r1, #1
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c50:	e00b      	b.n	8001c6a <HAL_RCC_OscConfig+0x52e>
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c56:	4b55      	ldr	r3, [pc, #340]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c58:	4956      	ldr	r1, [pc, #344]	; (8001db4 <HAL_RCC_OscConfig+0x678>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c62:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c64:	4955      	ldr	r1, [pc, #340]	; (8001dbc <HAL_RCC_OscConfig+0x680>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d015      	beq.n	8001c9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f8b9 	bl	8000de8 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c7a:	e009      	b.n	8001c90 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f8b4 	bl	8000de8 <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	4a4e      	ldr	r2, [pc, #312]	; (8001dc0 <HAL_RCC_OscConfig+0x684>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e11b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001c92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d0ef      	beq.n	8001c7c <HAL_RCC_OscConfig+0x540>
 8001c9c:	e014      	b.n	8001cc8 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f8a3 	bl	8000de8 <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ca6:	e009      	b.n	8001cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f89e 	bl	8000de8 <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x684>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e105      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001cbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d1ef      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cc8:	2323      	movs	r3, #35	; 0x23
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cd6:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001cd8:	493a      	ldr	r1, [pc, #232]	; (8001dc4 <HAL_RCC_OscConfig+0x688>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d049      	beq.n	8001d7c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d026      	beq.n	8001d3e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCC_OscConfig+0x68c>)
 8001d0a:	6a1a      	ldr	r2, [r3, #32]
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_RCC_OscConfig+0x68c>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0189      	lsls	r1, r1, #6
 8001d12:	430a      	orrs	r2, r1
 8001d14:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f867 	bl	8000de8 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d20:	f7ff f862 	bl	8000de8 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0ca      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f1      	beq.n	8001d20 <HAL_RCC_OscConfig+0x5e4>
 8001d3c:	e01e      	b.n	8001d7c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001d44:	2101      	movs	r1, #1
 8001d46:	438a      	bics	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x68c>)
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_OscConfig+0x68c>)
 8001d50:	491e      	ldr	r1, [pc, #120]	; (8001dcc <HAL_RCC_OscConfig+0x690>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff f847 	bl	8000de8 <HAL_GetTick>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d60:	f7ff f842 	bl	8000de8 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0aa      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2202      	movs	r2, #2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1f1      	bne.n	8001d60 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d100      	bne.n	8001d86 <HAL_RCC_OscConfig+0x64a>
 8001d84:	e09f      	b.n	8001ec6 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d100      	bne.n	8001d8e <HAL_RCC_OscConfig+0x652>
 8001d8c:	e078      	b.n	8001e80 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d159      	bne.n	8001e4a <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_OscConfig+0x670>)
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <HAL_RCC_OscConfig+0x694>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f821 	bl	8000de8 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001daa:	e01c      	b.n	8001de6 <HAL_RCC_OscConfig+0x6aa>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	ffff1fff 	.word	0xffff1fff
 8001db4:	fffffeff 	.word	0xfffffeff
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	fffffbff 	.word	0xfffffbff
 8001dc0:	00001388 	.word	0x00001388
 8001dc4:	efffffff 	.word	0xefffffff
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	ffffdfff 	.word	0xffffdfff
 8001dd0:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f808 	bl	8000de8 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e070      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	4013      	ands	r3, r2
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a37      	ldr	r2, [pc, #220]	; (8001ed4 <HAL_RCC_OscConfig+0x798>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0449      	lsls	r1, r1, #17
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7fe ffe2 	bl	8000de8 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7fe ffdd 	bl	8000de8 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e045      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	049b      	lsls	r3, r3, #18
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x6ee>
 8001e48:	e03d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e50:	4921      	ldr	r1, [pc, #132]	; (8001ed8 <HAL_RCC_OscConfig+0x79c>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7fe ffc7 	bl	8000de8 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe ffc2 	bl	8000de8 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e02a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	049b      	lsls	r3, r3, #18
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x724>
 8001e7e:	e022      	b.n	8001ec6 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_OscConfig+0x794>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	025b      	lsls	r3, r3, #9
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	23f0      	movs	r3, #240	; 0xf0
 8001ea6:	039b      	lsls	r3, r3, #14
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	23c0      	movs	r3, #192	; 0xc0
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	401a      	ands	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b00a      	add	sp, #40	; 0x28
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	ff02ffff 	.word	0xff02ffff
 8001ed8:	feffffff 	.word	0xfeffffff

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e10d      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d911      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b85      	ldr	r3, [pc, #532]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4393      	bics	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	4b82      	ldr	r3, [pc, #520]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f10:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0f4      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	22f0      	movs	r2, #240	; 0xf0
 8001f32:	4393      	bics	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	4b77      	ldr	r3, [pc, #476]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	d100      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x70>
 8001f4a:	e089      	b.n	8002060 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f54:	4b70      	ldr	r3, [pc, #448]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	029b      	lsls	r3, r3, #10
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d120      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0d3      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	049b      	lsls	r3, r3, #18
 8001f74:	4013      	ands	r3, r2
 8001f76:	d114      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0c7      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f84:	4b64      	ldr	r3, [pc, #400]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0bc      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0b4      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe ff17 	bl	8000de8 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d111      	bne.n	8001fea <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc6:	e009      	b.n	8001fdc <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7fe ff0e 	bl	8000de8 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_RCC_ClockConfig+0x240>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e097      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fdc:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d1ef      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xec>
 8001fe8:	e03a      	b.n	8002060 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d111      	bne.n	8002016 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff2:	e009      	b.n	8002008 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7fe fef8 	bl	8000de8 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_RCC_ClockConfig+0x240>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e081      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	220c      	movs	r2, #12
 800200e:	4013      	ands	r3, r2
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d1ef      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x118>
 8002014:	e024      	b.n	8002060 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d11b      	bne.n	8002056 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	e009      	b.n	8002034 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fee2 	bl	8000de8 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	4a3c      	ldr	r2, [pc, #240]	; (800211c <HAL_RCC_ClockConfig+0x240>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e06b      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	220c      	movs	r2, #12
 800203a:	4013      	ands	r3, r2
 800203c:	2b04      	cmp	r3, #4
 800203e:	d1ef      	bne.n	8002020 <HAL_RCC_ClockConfig+0x144>
 8002040:	e00e      	b.n	8002060 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe fed1 	bl	8000de8 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4a33      	ldr	r2, [pc, #204]	; (800211c <HAL_RCC_ClockConfig+0x240>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e05a      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	220c      	movs	r2, #12
 800205c:	4013      	ands	r3, r2
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	4013      	ands	r3, r2
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d211      	bcs.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	4393      	bics	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCC_ClockConfig+0x238>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4013      	ands	r3, r2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e03c      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2208      	movs	r2, #8
 80020b6:	4013      	ands	r3, r2
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x248>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	00da      	lsls	r2, r3, #3
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d0:	f000 f82e 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020d4:	0001      	movs	r1, r0
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_RCC_ClockConfig+0x23c>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	220f      	movs	r2, #15
 80020de:	4013      	ands	r3, r2
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_RCC_ClockConfig+0x24c>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	000a      	movs	r2, r1
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_ClockConfig+0x250>)
 80020ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80020ec:	250b      	movs	r5, #11
 80020ee:	197c      	adds	r4, r7, r5
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7fe fe43 	bl	8000d7c <HAL_InitTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80020fa:	197b      	adds	r3, r7, r5
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002102:	230b      	movs	r3, #11
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	e000      	b.n	800210c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bdb0      	pop	{r4, r5, r7, pc}
 8002114:	40022000 	.word	0x40022000
 8002118:	40021000 	.word	0x40021000
 800211c:	00001388 	.word	0x00001388
 8002120:	fffff8ff 	.word	0xfffff8ff
 8002124:	ffffc7ff 	.word	0xffffc7ff
 8002128:	080036c8 	.word	0x080036c8
 800212c:	20000000 	.word	0x20000000

08002130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	220c      	movs	r2, #12
 8002140:	4013      	ands	r3, r2
 8002142:	2b08      	cmp	r3, #8
 8002144:	d00e      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x34>
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d00f      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x3a>
 800214a:	2b04      	cmp	r3, #4
 800214c:	d157      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2210      	movs	r2, #16
 8002154:	4013      	ands	r3, r2
 8002156:	d002      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800215c:	e05d      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002160:	613b      	str	r3, [r7, #16]
      break;
 8002162:	e05a      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002164:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_RCC_GetSysClockFreq+0x100>)
 8002166:	613b      	str	r3, [r7, #16]
      break;
 8002168:	e057      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	220f      	movs	r2, #15
 8002170:	4013      	ands	r3, r2
 8002172:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_RCC_GetSysClockFreq+0x104>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	0d9b      	lsrs	r3, r3, #22
 800217c:	2203      	movs	r2, #3
 800217e:	4013      	ands	r3, r2
 8002180:	3301      	adds	r3, #1
 8002182:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	025b      	lsls	r3, r3, #9
 800218c:	4013      	ands	r3, r2
 800218e:	d00f      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	000a      	movs	r2, r1
 8002194:	0152      	lsls	r2, r2, #5
 8002196:	1a52      	subs	r2, r2, r1
 8002198:	0193      	lsls	r3, r2, #6
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	185b      	adds	r3, r3, r1
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fd ffaf 	bl	8000108 <__udivsi3>
 80021aa:	0003      	movs	r3, r0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e023      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2210      	movs	r2, #16
 80021b6:	4013      	ands	r3, r2
 80021b8:	d00f      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	000a      	movs	r2, r1
 80021be:	0152      	lsls	r2, r2, #5
 80021c0:	1a52      	subs	r2, r2, r1
 80021c2:	0193      	lsls	r3, r2, #6
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	185b      	adds	r3, r3, r1
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fd ff9a 	bl	8000108 <__udivsi3>
 80021d4:	0003      	movs	r3, r0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e00e      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	000a      	movs	r2, r1
 80021de:	0152      	lsls	r2, r2, #5
 80021e0:	1a52      	subs	r2, r2, r1
 80021e2:	0193      	lsls	r3, r2, #6
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	185b      	adds	r3, r3, r1
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7fd ff8a 	bl	8000108 <__udivsi3>
 80021f4:	0003      	movs	r3, r0
 80021f6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
      break;
 80021fc:	e00d      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0b5b      	lsrs	r3, r3, #13
 8002204:	2207      	movs	r2, #7
 8002206:	4013      	ands	r3, r2
 8002208:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	0212      	lsls	r2, r2, #8
 8002212:	409a      	lsls	r2, r3
 8002214:	0013      	movs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      break;
 8002218:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800221a:	693b      	ldr	r3, [r7, #16]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b006      	add	sp, #24
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	003d0900 	.word	0x003d0900
 800222c:	00f42400 	.word	0x00f42400
 8002230:	007a1200 	.word	0x007a1200
 8002234:	080036e0 	.word	0x080036e0

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <HAL_RCC_GetHCLKFreq+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	20000000 	.word	0x20000000

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff2 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002254:	0001      	movs	r1, r0
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	2207      	movs	r2, #7
 800225e:	4013      	ands	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	40d9      	lsrs	r1, r3
 8002266:	000b      	movs	r3, r1
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	40021000 	.word	0x40021000
 8002274:	080036d8 	.word	0x080036d8

08002278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800227c:	f7ff ffdc 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002280:	0001      	movs	r1, r0
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	0adb      	lsrs	r3, r3, #11
 8002288:	2207      	movs	r2, #7
 800228a:	4013      	ands	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	40d9      	lsrs	r1, r3
 8002292:	000b      	movs	r3, r1
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	40021000 	.word	0x40021000
 80022a0:	080036d8 	.word	0x080036d8

080022a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2220      	movs	r2, #32
 80022b2:	4013      	ands	r3, r2
 80022b4:	d106      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	4013      	ands	r3, r2
 80022c0:	d100      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80022c2:	e0dd      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80022c4:	2317      	movs	r3, #23
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022cc:	4ba4      	ldr	r3, [pc, #656]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	4013      	ands	r3, r2
 80022d6:	d10a      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4ba1      	ldr	r3, [pc, #644]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022dc:	4ba0      	ldr	r3, [pc, #640]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	0549      	lsls	r1, r1, #21
 80022e2:	430a      	orrs	r2, r1
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022e6:	2317      	movs	r3, #23
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b9d      	ldr	r3, [pc, #628]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d11a      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b9a      	ldr	r3, [pc, #616]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b99      	ldr	r3, [pc, #612]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002308:	f7fe fd6e 	bl	8000de8 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe fd69 	bl	8000de8 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e118      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d0f0      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002330:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	23c0      	movs	r3, #192	; 0xc0
 8002336:	039b      	lsls	r3, r3, #14
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	039b      	lsls	r3, r3, #14
 8002344:	4013      	ands	r3, r2
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	23c0      	movs	r3, #192	; 0xc0
 8002352:	039b      	lsls	r3, r3, #14
 8002354:	4013      	ands	r3, r2
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d013      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	401a      	ands	r2, r3
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	429a      	cmp	r2, r3
 800236c:	d10a      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800236e:	4b7c      	ldr	r3, [pc, #496]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	401a      	ands	r2, r3
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	429a      	cmp	r2, r3
 800237e:	d101      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0e8      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002384:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002388:	23c0      	movs	r3, #192	; 0xc0
 800238a:	029b      	lsls	r3, r3, #10
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d049      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	23c0      	movs	r3, #192	; 0xc0
 800239c:	029b      	lsls	r3, r3, #10
 800239e:	4013      	ands	r3, r2
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d004      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2220      	movs	r2, #32
 80023ac:	4013      	ands	r3, r2
 80023ae:	d10d      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	23c0      	movs	r3, #192	; 0xc0
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	4013      	ands	r3, r2
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d034      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	4013      	ands	r3, r2
 80023ca:	d02e      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80023cc:	4b64      	ldr	r3, [pc, #400]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	4a65      	ldr	r2, [pc, #404]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023da:	4b61      	ldr	r3, [pc, #388]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0309      	lsls	r1, r1, #12
 80023e0:	430a      	orrs	r2, r1
 80023e2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e4:	4b5e      	ldr	r3, [pc, #376]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e8:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023ea:	4960      	ldr	r1, [pc, #384]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80023f0:	4b5b      	ldr	r3, [pc, #364]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4013      	ands	r3, r2
 80023fe:	d014      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fcf2 	bl	8000de8 <HAL_GetTick>
 8002404:	0003      	movs	r3, r0
 8002406:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002408:	e009      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fced 	bl	8000de8 <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e09b      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800241e:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d0ef      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	23c0      	movs	r3, #192	; 0xc0
 8002430:	029b      	lsls	r3, r3, #10
 8002432:	401a      	ands	r2, r3
 8002434:	23c0      	movs	r3, #192	; 0xc0
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	429a      	cmp	r2, r3
 800243a:	d10c      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800243c:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4c      	ldr	r2, [pc, #304]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	23c0      	movs	r3, #192	; 0xc0
 800244c:	039b      	lsls	r3, r3, #14
 800244e:	401a      	ands	r2, r3
 8002450:	4b43      	ldr	r3, [pc, #268]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	4b42      	ldr	r3, [pc, #264]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002458:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	23c0      	movs	r3, #192	; 0xc0
 8002460:	029b      	lsls	r3, r3, #10
 8002462:	401a      	ands	r2, r3
 8002464:	4b3e      	ldr	r3, [pc, #248]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002466:	430a      	orrs	r2, r1
 8002468:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246a:	2317      	movs	r3, #23
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002478:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800247a:	493f      	ldr	r1, [pc, #252]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800247c:	400a      	ands	r2, r1
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248a:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	2203      	movs	r2, #3
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800249a:	430a      	orrs	r2, r1
 800249c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	220c      	movs	r2, #12
 80024ae:	4393      	bics	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2204      	movs	r2, #4
 80024c2:	4013      	ands	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a2c      	ldr	r2, [pc, #176]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2208      	movs	r2, #8
 80024e0:	4013      	ands	r3, r2
 80024e2:	d009      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4013      	ands	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002514:	430a      	orrs	r2, r1
 8002516:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	4013      	ands	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002532:	430a      	orrs	r2, r1
 8002534:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	4013      	ands	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002546:	4013      	ands	r3, r2
 8002548:	0019      	movs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002550:	430a      	orrs	r2, r1
 8002552:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b006      	add	sp, #24
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	fffcffff 	.word	0xfffcffff
 800256c:	fff7ffff 	.word	0xfff7ffff
 8002570:	00001388 	.word	0x00001388
 8002574:	ffcfffff 	.word	0xffcfffff
 8002578:	efffffff 	.word	0xefffffff
 800257c:	fffff3ff 	.word	0xfffff3ff
 8002580:	ffffcfff 	.word	0xffffcfff
 8002584:	fbffffff 	.word	0xfbffffff
 8002588:	fff3ffff 	.word	0xfff3ffff

0800258c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e059      	b.n	8002652 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2251      	movs	r2, #81	; 0x51
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2250      	movs	r2, #80	; 0x50
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7fe fab4 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2251      	movs	r2, #81	; 0x51
 80025c4:	2102      	movs	r1, #2
 80025c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2140      	movs	r1, #64	; 0x40
 80025d4:	438a      	bics	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6999      	ldr	r1, [r3, #24]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	400b      	ands	r3, r1
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	0011      	movs	r1, r2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	2204      	movs	r2, #4
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <HAL_SPI_Init+0xd0>)
 800263e:	400a      	ands	r2, r1
 8002640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2251      	movs	r2, #81	; 0x51
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	fffff7ff 	.word	0xfffff7ff

08002660 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	; 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	001a      	movs	r2, r3
 800266e:	1cbb      	adds	r3, r7, #2
 8002670:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002672:	2301      	movs	r3, #1
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002676:	232b      	movs	r3, #43	; 0x2b
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2250      	movs	r2, #80	; 0x50
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_SPI_TransmitReceive+0x2c>
 8002688:	2302      	movs	r3, #2
 800268a:	e1a1      	b.n	80029d0 <HAL_SPI_TransmitReceive+0x370>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2250      	movs	r2, #80	; 0x50
 8002690:	2101      	movs	r1, #1
 8002692:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002694:	f7fe fba8 	bl	8000de8 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800269c:	2023      	movs	r0, #35	; 0x23
 800269e:	183b      	adds	r3, r7, r0
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	2151      	movs	r1, #81	; 0x51
 80026a4:	5c52      	ldrb	r2, [r2, r1]
 80026a6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026ae:	231a      	movs	r3, #26
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	1cba      	adds	r2, r7, #2
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026b8:	183b      	adds	r3, r7, r0
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d012      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x86>
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	2382      	movs	r3, #130	; 0x82
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d108      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x7c>
 80026d2:	2323      	movs	r3, #35	; 0x23
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d004      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80026dc:	232b      	movs	r3, #43	; 0x2b
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80026e4:	e169      	b.n	80029ba <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x9a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x9a>
 80026f2:	1cbb      	adds	r3, r7, #2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d104      	bne.n	8002704 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80026fa:	232b      	movs	r3, #43	; 0x2b
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
    goto error;
 8002702:	e15a      	b.n	80029ba <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2251      	movs	r2, #81	; 0x51
 8002708:	5c9b      	ldrb	r3, [r3, r2]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b04      	cmp	r3, #4
 800270e:	d003      	beq.n	8002718 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2251      	movs	r2, #81	; 0x51
 8002714:	2105      	movs	r1, #5
 8002716:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1cba      	adds	r2, r7, #2
 8002728:	8812      	ldrh	r2, [r2, #0]
 800272a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1cba      	adds	r2, r7, #2
 8002730:	8812      	ldrh	r2, [r2, #0]
 8002732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1cba      	adds	r2, r7, #2
 800273e:	8812      	ldrh	r2, [r2, #0]
 8002740:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1cba      	adds	r2, r7, #2
 8002746:	8812      	ldrh	r2, [r2, #0]
 8002748:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2240      	movs	r2, #64	; 0x40
 800275e:	4013      	ands	r3, r2
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d007      	beq.n	8002774 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	429a      	cmp	r2, r3
 800277e:	d000      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x122>
 8002780:	e07a      	b.n	8002878 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x134>
 800278a:	231a      	movs	r3, #26
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d166      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	881a      	ldrh	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	1c9a      	adds	r2, r3, #2
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b8:	e053      	b.n	8002862 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d11b      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x1a0>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_SPI_TransmitReceive+0x1a0>
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d113      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	1c9a      	adds	r2, r3, #2
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	2b01      	cmp	r3, #1
 800280c:	d119      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x1e2>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d014      	beq.n	8002842 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	b292      	uxth	r2, r2
 8002824:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	1c9a      	adds	r2, r3, #2
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800283e:	2301      	movs	r3, #1
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002842:	f7fe fad1 	bl	8000de8 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800284e:	429a      	cmp	r2, r3
 8002850:	d807      	bhi.n	8002862 <HAL_SPI_TransmitReceive+0x202>
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	3301      	adds	r3, #1
 8002856:	d004      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8002858:	232b      	movs	r3, #43	; 0x2b
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2203      	movs	r2, #3
 800285e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002860:	e0ab      	b.n	80029ba <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1a6      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x15a>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1a1      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x15a>
 8002876:	e07f      	b.n	8002978 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_SPI_TransmitReceive+0x22c>
 8002880:	231a      	movs	r3, #26
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d000      	beq.n	800288c <HAL_SPI_TransmitReceive+0x22c>
 800288a:	e06b      	b.n	8002964 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b2:	e057      	b.n	8002964 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d11c      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x29c>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d017      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x29c>
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d114      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	2b01      	cmp	r3, #1
 8002908:	d119      	bne.n	800293e <HAL_SPI_TransmitReceive+0x2de>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d014      	beq.n	800293e <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800293a:	2301      	movs	r3, #1
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800293e:	f7fe fa53 	bl	8000de8 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800294a:	429a      	cmp	r2, r3
 800294c:	d802      	bhi.n	8002954 <HAL_SPI_TransmitReceive+0x2f4>
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	3301      	adds	r3, #1
 8002952:	d102      	bne.n	800295a <HAL_SPI_TransmitReceive+0x2fa>
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800295a:	232b      	movs	r3, #43	; 0x2b
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2203      	movs	r2, #3
 8002960:	701a      	strb	r2, [r3, #0]
        goto error;
 8002962:	e02a      	b.n	80029ba <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1a2      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x254>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d19d      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	0018      	movs	r0, r3
 8002980:	f000 f89a 	bl	8002ab8 <SPI_EndRxTxTransaction>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d007      	beq.n	8002998 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8002988:	232b      	movs	r3, #43	; 0x2b
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002996:	e010      	b.n	80029ba <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	e000      	b.n	80029ba <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80029b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2251      	movs	r2, #81	; 0x51
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2250      	movs	r2, #80	; 0x50
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029ca:	232b      	movs	r3, #43	; 0x2b
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	781b      	ldrb	r3, [r3, #0]
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b00c      	add	sp, #48	; 0x30
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029e8:	e050      	b.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	d04d      	beq.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029f0:	f7fe f9fa 	bl	8000de8 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d902      	bls.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d142      	bne.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	21e0      	movs	r1, #224	; 0xe0
 8002a12:	438a      	bics	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	2382      	movs	r3, #130	; 0x82
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d113      	bne.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0x72>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d005      	beq.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d107      	bne.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2140      	movs	r1, #64	; 0x40
 8002a46:	438a      	bics	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d110      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4914      	ldr	r1, [pc, #80]	; (8002ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002a62:	400a      	ands	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0189      	lsls	r1, r1, #6
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2251      	movs	r2, #81	; 0x51
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2250      	movs	r2, #80	; 0x50
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e00f      	b.n	8002aac <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	425a      	negs	r2, r3
 8002a9c:	4153      	adcs	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	1dfb      	adds	r3, r7, #7
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d19f      	bne.n	80029ea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b004      	add	sp, #16
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	ffffdfff 	.word	0xffffdfff

08002ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	2382      	movs	r3, #130	; 0x82
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d112      	bne.n	8002af6 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	0013      	movs	r3, r2
 8002ada:	2200      	movs	r2, #0
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	f7ff ff7b 	bl	80029d8 <SPI_WaitFlagStateUntilTimeout>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d020      	beq.n	8002b28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	2220      	movs	r2, #32
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e019      	b.n	8002b2a <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2251      	movs	r2, #81	; 0x51
 8002afa:	5c9b      	ldrb	r3, [r3, r2]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d112      	bne.n	8002b28 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f7ff ff62 	bl	80029d8 <SPI_WaitFlagStateUntilTimeout>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d007      	beq.n	8002b28 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e000      	b.n	8002b2a <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e044      	b.n	8002bd0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2270      	movs	r2, #112	; 0x70
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7fe f829 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2224      	movs	r2, #36	; 0x24
 8002b62:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2101      	movs	r1, #1
 8002b70:	438a      	bics	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f8d8 	bl	8002d2c <UART_SetConfig>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e024      	b.n	8002bd0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 fbff 	bl	8003394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	490d      	ldr	r1, [pc, #52]	; (8002bd8 <HAL_UART_Init+0xa4>)
 8002ba2:	400a      	ands	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	212a      	movs	r1, #42	; 0x2a
 8002bb2:	438a      	bics	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fc97 	bl	80034fc <UART_CheckIdleState>
 8002bce:	0003      	movs	r3, r0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	ffffb7ff 	.word	0xffffb7ff

08002bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	1dbb      	adds	r3, r7, #6
 8002bea:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d000      	beq.n	8002bf6 <HAL_UART_Transmit+0x1a>
 8002bf4:	e094      	b.n	8002d20 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_UART_Transmit+0x28>
 8002bfc:	1dbb      	adds	r3, r7, #6
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e08c      	b.n	8002d22 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	015b      	lsls	r3, r3, #5
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d109      	bne.n	8002c28 <HAL_UART_Transmit+0x4c>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d001      	beq.n	8002c28 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e07c      	b.n	8002d22 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2270      	movs	r2, #112	; 0x70
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Transmit+0x5a>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e075      	b.n	8002d22 <HAL_UART_Transmit+0x146>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2270      	movs	r2, #112	; 0x70
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002c4a:	f7fe f8cd 	bl	8000de8 <HAL_GetTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1dba      	adds	r2, r7, #6
 8002c56:	2150      	movs	r1, #80	; 0x50
 8002c58:	8812      	ldrh	r2, [r2, #0]
 8002c5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1dba      	adds	r2, r7, #6
 8002c60:	2152      	movs	r1, #82	; 0x52
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	015b      	lsls	r3, r3, #5
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d108      	bne.n	8002c84 <HAL_UART_Transmit+0xa8>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e003      	b.n	8002c8c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c8c:	e02c      	b.n	8002ce8 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	0013      	movs	r3, r2
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	f000 fc74 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002ca0:	1e03      	subs	r3, r0, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e03c      	b.n	8002d22 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	05d2      	lsls	r2, r2, #23
 8002cba:	0dd2      	lsrs	r2, r2, #23
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e007      	b.n	8002cd6 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2252      	movs	r2, #82	; 0x52
 8002cda:	5a9b      	ldrh	r3, [r3, r2]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b299      	uxth	r1, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2252      	movs	r2, #82	; 0x52
 8002ce6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2252      	movs	r2, #82	; 0x52
 8002cec:	5a9b      	ldrh	r3, [r3, r2]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1cc      	bne.n	8002c8e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	f000 fc41 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e009      	b.n	8002d22 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2270      	movs	r2, #112	; 0x70
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b008      	add	sp, #32
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002d34:	231b      	movs	r3, #27
 8002d36:	2218      	movs	r2, #24
 8002d38:	4694      	mov	ip, r2
 8002d3a:	44bc      	add	ip, r7
 8002d3c:	4463      	add	r3, ip
 8002d3e:	2210      	movs	r2, #16
 8002d40:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d46:	2313      	movs	r3, #19
 8002d48:	2218      	movs	r2, #24
 8002d4a:	4694      	mov	ip, r2
 8002d4c:	44bc      	add	ip, r7
 8002d4e:	4463      	add	r3, ip
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4aca      	ldr	r2, [pc, #808]	; (80030a0 <UART_SetConfig+0x374>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4ac5      	ldr	r2, [pc, #788]	; (80030a4 <UART_SetConfig+0x378>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4abf      	ldr	r2, [pc, #764]	; (80030a8 <UART_SetConfig+0x37c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db4:	4313      	orrs	r3, r2
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4abb      	ldr	r2, [pc, #748]	; (80030ac <UART_SetConfig+0x380>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4ab7      	ldr	r2, [pc, #732]	; (80030b0 <UART_SetConfig+0x384>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d134      	bne.n	8002e42 <UART_SetConfig+0x116>
 8002dd8:	4bb6      	ldr	r3, [pc, #728]	; (80030b4 <UART_SetConfig+0x388>)
 8002dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d015      	beq.n	8002e10 <UART_SetConfig+0xe4>
 8002de4:	d304      	bcc.n	8002df0 <UART_SetConfig+0xc4>
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d00a      	beq.n	8002e00 <UART_SetConfig+0xd4>
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d018      	beq.n	8002e20 <UART_SetConfig+0xf4>
 8002dee:	e01f      	b.n	8002e30 <UART_SetConfig+0x104>
 8002df0:	231b      	movs	r3, #27
 8002df2:	2218      	movs	r2, #24
 8002df4:	4694      	mov	ip, r2
 8002df6:	44bc      	add	ip, r7
 8002df8:	4463      	add	r3, ip
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e0c5      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e00:	231b      	movs	r3, #27
 8002e02:	2218      	movs	r2, #24
 8002e04:	4694      	mov	ip, r2
 8002e06:	44bc      	add	ip, r7
 8002e08:	4463      	add	r3, ip
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e0bd      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e10:	231b      	movs	r3, #27
 8002e12:	2218      	movs	r2, #24
 8002e14:	4694      	mov	ip, r2
 8002e16:	44bc      	add	ip, r7
 8002e18:	4463      	add	r3, ip
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e0b5      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e20:	231b      	movs	r3, #27
 8002e22:	2218      	movs	r2, #24
 8002e24:	4694      	mov	ip, r2
 8002e26:	44bc      	add	ip, r7
 8002e28:	4463      	add	r3, ip
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e0ad      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e30:	231b      	movs	r3, #27
 8002e32:	2218      	movs	r2, #24
 8002e34:	4694      	mov	ip, r2
 8002e36:	44bc      	add	ip, r7
 8002e38:	4463      	add	r3, ip
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	e0a4      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a9c      	ldr	r2, [pc, #624]	; (80030b8 <UART_SetConfig+0x38c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d137      	bne.n	8002ebc <UART_SetConfig+0x190>
 8002e4c:	4b99      	ldr	r3, [pc, #612]	; (80030b4 <UART_SetConfig+0x388>)
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	220c      	movs	r2, #12
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d018      	beq.n	8002e8a <UART_SetConfig+0x15e>
 8002e58:	d802      	bhi.n	8002e60 <UART_SetConfig+0x134>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <UART_SetConfig+0x13e>
 8002e5e:	e024      	b.n	8002eaa <UART_SetConfig+0x17e>
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d00a      	beq.n	8002e7a <UART_SetConfig+0x14e>
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d018      	beq.n	8002e9a <UART_SetConfig+0x16e>
 8002e68:	e01f      	b.n	8002eaa <UART_SetConfig+0x17e>
 8002e6a:	231b      	movs	r3, #27
 8002e6c:	2218      	movs	r2, #24
 8002e6e:	4694      	mov	ip, r2
 8002e70:	44bc      	add	ip, r7
 8002e72:	4463      	add	r3, ip
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e088      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e7a:	231b      	movs	r3, #27
 8002e7c:	2218      	movs	r2, #24
 8002e7e:	4694      	mov	ip, r2
 8002e80:	44bc      	add	ip, r7
 8002e82:	4463      	add	r3, ip
 8002e84:	2202      	movs	r2, #2
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e080      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e8a:	231b      	movs	r3, #27
 8002e8c:	2218      	movs	r2, #24
 8002e8e:	4694      	mov	ip, r2
 8002e90:	44bc      	add	ip, r7
 8002e92:	4463      	add	r3, ip
 8002e94:	2204      	movs	r2, #4
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e078      	b.n	8002f8c <UART_SetConfig+0x260>
 8002e9a:	231b      	movs	r3, #27
 8002e9c:	2218      	movs	r2, #24
 8002e9e:	4694      	mov	ip, r2
 8002ea0:	44bc      	add	ip, r7
 8002ea2:	4463      	add	r3, ip
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e070      	b.n	8002f8c <UART_SetConfig+0x260>
 8002eaa:	231b      	movs	r3, #27
 8002eac:	2218      	movs	r2, #24
 8002eae:	4694      	mov	ip, r2
 8002eb0:	44bc      	add	ip, r7
 8002eb2:	4463      	add	r3, ip
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	e067      	b.n	8002f8c <UART_SetConfig+0x260>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a7e      	ldr	r2, [pc, #504]	; (80030bc <UART_SetConfig+0x390>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d107      	bne.n	8002ed6 <UART_SetConfig+0x1aa>
 8002ec6:	231b      	movs	r3, #27
 8002ec8:	2218      	movs	r2, #24
 8002eca:	4694      	mov	ip, r2
 8002ecc:	44bc      	add	ip, r7
 8002ece:	4463      	add	r3, ip
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e05a      	b.n	8002f8c <UART_SetConfig+0x260>
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a79      	ldr	r2, [pc, #484]	; (80030c0 <UART_SetConfig+0x394>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d107      	bne.n	8002ef0 <UART_SetConfig+0x1c4>
 8002ee0:	231b      	movs	r3, #27
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	4694      	mov	ip, r2
 8002ee6:	44bc      	add	ip, r7
 8002ee8:	4463      	add	r3, ip
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e04d      	b.n	8002f8c <UART_SetConfig+0x260>
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6c      	ldr	r2, [pc, #432]	; (80030a8 <UART_SetConfig+0x37c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d141      	bne.n	8002f7e <UART_SetConfig+0x252>
 8002efa:	4b6e      	ldr	r3, [pc, #440]	; (80030b4 <UART_SetConfig+0x388>)
 8002efc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002efe:	23c0      	movs	r3, #192	; 0xc0
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	00d2      	lsls	r2, r2, #3
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01f      	beq.n	8002f4c <UART_SetConfig+0x220>
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	00d2      	lsls	r2, r2, #3
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d802      	bhi.n	8002f1a <UART_SetConfig+0x1ee>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <UART_SetConfig+0x200>
 8002f18:	e028      	b.n	8002f6c <UART_SetConfig+0x240>
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00c      	beq.n	8002f3c <UART_SetConfig+0x210>
 8002f22:	22c0      	movs	r2, #192	; 0xc0
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d018      	beq.n	8002f5c <UART_SetConfig+0x230>
 8002f2a:	e01f      	b.n	8002f6c <UART_SetConfig+0x240>
 8002f2c:	231b      	movs	r3, #27
 8002f2e:	2218      	movs	r2, #24
 8002f30:	4694      	mov	ip, r2
 8002f32:	44bc      	add	ip, r7
 8002f34:	4463      	add	r3, ip
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e027      	b.n	8002f8c <UART_SetConfig+0x260>
 8002f3c:	231b      	movs	r3, #27
 8002f3e:	2218      	movs	r2, #24
 8002f40:	4694      	mov	ip, r2
 8002f42:	44bc      	add	ip, r7
 8002f44:	4463      	add	r3, ip
 8002f46:	2202      	movs	r2, #2
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e01f      	b.n	8002f8c <UART_SetConfig+0x260>
 8002f4c:	231b      	movs	r3, #27
 8002f4e:	2218      	movs	r2, #24
 8002f50:	4694      	mov	ip, r2
 8002f52:	44bc      	add	ip, r7
 8002f54:	4463      	add	r3, ip
 8002f56:	2204      	movs	r2, #4
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e017      	b.n	8002f8c <UART_SetConfig+0x260>
 8002f5c:	231b      	movs	r3, #27
 8002f5e:	2218      	movs	r2, #24
 8002f60:	4694      	mov	ip, r2
 8002f62:	44bc      	add	ip, r7
 8002f64:	4463      	add	r3, ip
 8002f66:	2208      	movs	r2, #8
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e00f      	b.n	8002f8c <UART_SetConfig+0x260>
 8002f6c:	231b      	movs	r3, #27
 8002f6e:	2218      	movs	r2, #24
 8002f70:	4694      	mov	ip, r2
 8002f72:	44bc      	add	ip, r7
 8002f74:	4463      	add	r3, ip
 8002f76:	2210      	movs	r2, #16
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	e006      	b.n	8002f8c <UART_SetConfig+0x260>
 8002f7e:	231b      	movs	r3, #27
 8002f80:	2218      	movs	r2, #24
 8002f82:	4694      	mov	ip, r2
 8002f84:	44bc      	add	ip, r7
 8002f86:	4463      	add	r3, ip
 8002f88:	2210      	movs	r2, #16
 8002f8a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <UART_SetConfig+0x37c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d000      	beq.n	8002f98 <UART_SetConfig+0x26c>
 8002f96:	e09d      	b.n	80030d4 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f98:	231b      	movs	r3, #27
 8002f9a:	2218      	movs	r2, #24
 8002f9c:	4694      	mov	ip, r2
 8002f9e:	44bc      	add	ip, r7
 8002fa0:	4463      	add	r3, ip
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d00d      	beq.n	8002fc4 <UART_SetConfig+0x298>
 8002fa8:	dc02      	bgt.n	8002fb0 <UART_SetConfig+0x284>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <UART_SetConfig+0x28e>
 8002fae:	e01d      	b.n	8002fec <UART_SetConfig+0x2c0>
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d012      	beq.n	8002fda <UART_SetConfig+0x2ae>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d015      	beq.n	8002fe4 <UART_SetConfig+0x2b8>
 8002fb8:	e018      	b.n	8002fec <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7ff f947 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fc2:	e01b      	b.n	8002ffc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fc4:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <UART_SetConfig+0x388>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d002      	beq.n	8002fd4 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <UART_SetConfig+0x398>)
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002fd2:	e013      	b.n	8002ffc <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002fd4:	4b3c      	ldr	r3, [pc, #240]	; (80030c8 <UART_SetConfig+0x39c>)
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fd8:	e010      	b.n	8002ffc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002fda:	f7ff f8a9 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fea:	e007      	b.n	8002ffc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fec:	2313      	movs	r3, #19
 8002fee:	2218      	movs	r2, #24
 8002ff0:	4694      	mov	ip, r2
 8002ff2:	44bc      	add	ip, r7
 8002ff4:	4463      	add	r3, ip
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
        break;
 8002ffa:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d100      	bne.n	8003004 <UART_SetConfig+0x2d8>
 8003002:	e1a6      	b.n	8003352 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	0013      	movs	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	189b      	adds	r3, r3, r2
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	429a      	cmp	r2, r3
 8003012:	d305      	bcc.n	8003020 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	429a      	cmp	r2, r3
 800301e:	d907      	bls.n	8003030 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003020:	2313      	movs	r3, #19
 8003022:	2218      	movs	r2, #24
 8003024:	4694      	mov	ip, r2
 8003026:	44bc      	add	ip, r7
 8003028:	4463      	add	r3, ip
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e190      	b.n	8003352 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	6939      	ldr	r1, [r7, #16]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	000b      	movs	r3, r1
 800303e:	0e1b      	lsrs	r3, r3, #24
 8003040:	0010      	movs	r0, r2
 8003042:	0205      	lsls	r5, r0, #8
 8003044:	431d      	orrs	r5, r3
 8003046:	000b      	movs	r3, r1
 8003048:	021c      	lsls	r4, r3, #8
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68b8      	ldr	r0, [r7, #8]
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	1900      	adds	r0, r0, r4
 800305c:	4169      	adcs	r1, r5
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f7fd f8d8 	bl	8000220 <__aeabi_uldivmod>
 8003070:	0003      	movs	r3, r0
 8003072:	000c      	movs	r4, r1
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <UART_SetConfig+0x3a0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d908      	bls.n	8003090 <UART_SetConfig+0x364>
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <UART_SetConfig+0x3a4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d804      	bhi.n	8003090 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e160      	b.n	8003352 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003090:	2313      	movs	r3, #19
 8003092:	2218      	movs	r2, #24
 8003094:	4694      	mov	ip, r2
 8003096:	44bc      	add	ip, r7
 8003098:	4463      	add	r3, ip
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e158      	b.n	8003352 <UART_SetConfig+0x626>
 80030a0:	efff69f3 	.word	0xefff69f3
 80030a4:	ffffcfff 	.word	0xffffcfff
 80030a8:	40004800 	.word	0x40004800
 80030ac:	fffff4ff 	.word	0xfffff4ff
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40004400 	.word	0x40004400
 80030bc:	40004c00 	.word	0x40004c00
 80030c0:	40005000 	.word	0x40005000
 80030c4:	003d0900 	.word	0x003d0900
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	000002ff 	.word	0x000002ff
 80030d0:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	429a      	cmp	r2, r3
 80030de:	d000      	beq.n	80030e2 <UART_SetConfig+0x3b6>
 80030e0:	e0a9      	b.n	8003236 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 80030e2:	231b      	movs	r3, #27
 80030e4:	2218      	movs	r2, #24
 80030e6:	4694      	mov	ip, r2
 80030e8:	44bc      	add	ip, r7
 80030ea:	4463      	add	r3, ip
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d86d      	bhi.n	80031ce <UART_SetConfig+0x4a2>
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	4b9f      	ldr	r3, [pc, #636]	; (8003374 <UART_SetConfig+0x648>)
 80030f6:	18d3      	adds	r3, r2, r3
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030fc:	f7ff f8a6 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003100:	0003      	movs	r3, r0
 8003102:	005a      	lsls	r2, r3, #1
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	18d2      	adds	r2, r2, r3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	0019      	movs	r1, r3
 8003112:	0010      	movs	r0, r2
 8003114:	f7fc fff8 	bl	8000108 <__udivsi3>
 8003118:	0003      	movs	r3, r0
 800311a:	b29b      	uxth	r3, r3
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800311e:	e05e      	b.n	80031de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003120:	f7ff f8aa 	bl	8002278 <HAL_RCC_GetPCLK2Freq>
 8003124:	0003      	movs	r3, r0
 8003126:	005a      	lsls	r2, r3, #1
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	18d2      	adds	r2, r2, r3
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0019      	movs	r1, r3
 8003136:	0010      	movs	r0, r2
 8003138:	f7fc ffe6 	bl	8000108 <__udivsi3>
 800313c:	0003      	movs	r3, r0
 800313e:	b29b      	uxth	r3, r3
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003142:	e04c      	b.n	80031de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003144:	4b8c      	ldr	r3, [pc, #560]	; (8003378 <UART_SetConfig+0x64c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	4013      	ands	r3, r2
 800314c:	d00e      	beq.n	800316c <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	4a89      	ldr	r2, [pc, #548]	; (800337c <UART_SetConfig+0x650>)
 8003156:	189a      	adds	r2, r3, r2
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0019      	movs	r1, r3
 800315e:	0010      	movs	r0, r2
 8003160:	f7fc ffd2 	bl	8000108 <__udivsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	b29b      	uxth	r3, r3
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800316a:	e038      	b.n	80031de <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	4a83      	ldr	r2, [pc, #524]	; (8003380 <UART_SetConfig+0x654>)
 8003174:	189a      	adds	r2, r3, r2
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0019      	movs	r1, r3
 800317c:	0010      	movs	r0, r2
 800317e:	f7fc ffc3 	bl	8000108 <__udivsi3>
 8003182:	0003      	movs	r3, r0
 8003184:	b29b      	uxth	r3, r3
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003188:	e029      	b.n	80031de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800318a:	f7fe ffd1 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800318e:	0003      	movs	r3, r0
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	18d2      	adds	r2, r2, r3
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0019      	movs	r1, r3
 80031a0:	0010      	movs	r0, r2
 80031a2:	f7fc ffb1 	bl	8000108 <__udivsi3>
 80031a6:	0003      	movs	r3, r0
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ac:	e017      	b.n	80031de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0252      	lsls	r2, r2, #9
 80031b8:	189a      	adds	r2, r3, r2
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0019      	movs	r1, r3
 80031c0:	0010      	movs	r0, r2
 80031c2:	f7fc ffa1 	bl	8000108 <__udivsi3>
 80031c6:	0003      	movs	r3, r0
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031cc:	e007      	b.n	80031de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80031ce:	2313      	movs	r3, #19
 80031d0:	2218      	movs	r2, #24
 80031d2:	4694      	mov	ip, r2
 80031d4:	44bc      	add	ip, r7
 80031d6:	4463      	add	r3, ip
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
        break;
 80031dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	2b0f      	cmp	r3, #15
 80031e2:	d920      	bls.n	8003226 <UART_SetConfig+0x4fa>
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	4a67      	ldr	r2, [pc, #412]	; (8003384 <UART_SetConfig+0x658>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d81c      	bhi.n	8003226 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	200a      	movs	r0, #10
 80031f2:	2418      	movs	r4, #24
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	181b      	adds	r3, r3, r0
 80031f8:	210f      	movs	r1, #15
 80031fa:	438a      	bics	r2, r1
 80031fc:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	b29b      	uxth	r3, r3
 8003204:	2207      	movs	r2, #7
 8003206:	4013      	ands	r3, r2
 8003208:	b299      	uxth	r1, r3
 800320a:	193b      	adds	r3, r7, r4
 800320c:	181b      	adds	r3, r3, r0
 800320e:	193a      	adds	r2, r7, r4
 8003210:	1812      	adds	r2, r2, r0
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	193a      	adds	r2, r7, r4
 800321e:	1812      	adds	r2, r2, r0
 8003220:	8812      	ldrh	r2, [r2, #0]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e095      	b.n	8003352 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003226:	2313      	movs	r3, #19
 8003228:	2218      	movs	r2, #24
 800322a:	4694      	mov	ip, r2
 800322c:	44bc      	add	ip, r7
 800322e:	4463      	add	r3, ip
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e08d      	b.n	8003352 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8003236:	231b      	movs	r3, #27
 8003238:	2218      	movs	r2, #24
 800323a:	4694      	mov	ip, r2
 800323c:	44bc      	add	ip, r7
 800323e:	4463      	add	r3, ip
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b08      	cmp	r3, #8
 8003244:	d86a      	bhi.n	800331c <UART_SetConfig+0x5f0>
 8003246:	009a      	lsls	r2, r3, #2
 8003248:	4b4f      	ldr	r3, [pc, #316]	; (8003388 <UART_SetConfig+0x65c>)
 800324a:	18d3      	adds	r3, r2, r3
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003250:	f7fe fffc 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003254:	0002      	movs	r2, r0
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	18d2      	adds	r2, r2, r3
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	0019      	movs	r1, r3
 8003264:	0010      	movs	r0, r2
 8003266:	f7fc ff4f 	bl	8000108 <__udivsi3>
 800326a:	0003      	movs	r3, r0
 800326c:	b29b      	uxth	r3, r3
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003270:	e05c      	b.n	800332c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003272:	f7ff f801 	bl	8002278 <HAL_RCC_GetPCLK2Freq>
 8003276:	0002      	movs	r2, r0
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	18d2      	adds	r2, r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	0019      	movs	r1, r3
 8003286:	0010      	movs	r0, r2
 8003288:	f7fc ff3e 	bl	8000108 <__udivsi3>
 800328c:	0003      	movs	r3, r0
 800328e:	b29b      	uxth	r3, r3
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003292:	e04b      	b.n	800332c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003294:	4b38      	ldr	r3, [pc, #224]	; (8003378 <UART_SetConfig+0x64c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2210      	movs	r2, #16
 800329a:	4013      	ands	r3, r2
 800329c:	d00e      	beq.n	80032bc <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	4a39      	ldr	r2, [pc, #228]	; (800338c <UART_SetConfig+0x660>)
 80032a6:	189a      	adds	r2, r3, r2
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	0019      	movs	r1, r3
 80032ae:	0010      	movs	r0, r2
 80032b0:	f7fc ff2a 	bl	8000108 <__udivsi3>
 80032b4:	0003      	movs	r3, r0
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80032ba:	e037      	b.n	800332c <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	4a33      	ldr	r2, [pc, #204]	; (8003390 <UART_SetConfig+0x664>)
 80032c4:	189a      	adds	r2, r3, r2
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	0019      	movs	r1, r3
 80032cc:	0010      	movs	r0, r2
 80032ce:	f7fc ff1b 	bl	8000108 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032d8:	e028      	b.n	800332c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032da:	f7fe ff29 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80032de:	0002      	movs	r2, r0
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	18d2      	adds	r2, r2, r3
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0019      	movs	r1, r3
 80032ee:	0010      	movs	r0, r2
 80032f0:	f7fc ff0a 	bl	8000108 <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032fa:	e017      	b.n	800332c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	0212      	lsls	r2, r2, #8
 8003306:	189a      	adds	r2, r3, r2
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0019      	movs	r1, r3
 800330e:	0010      	movs	r0, r2
 8003310:	f7fc fefa 	bl	8000108 <__udivsi3>
 8003314:	0003      	movs	r3, r0
 8003316:	b29b      	uxth	r3, r3
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800331a:	e007      	b.n	800332c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800331c:	2313      	movs	r3, #19
 800331e:	2218      	movs	r2, #24
 8003320:	4694      	mov	ip, r2
 8003322:	44bc      	add	ip, r7
 8003324:	4463      	add	r3, ip
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
        break;
 800332a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	2b0f      	cmp	r3, #15
 8003330:	d908      	bls.n	8003344 <UART_SetConfig+0x618>
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	4a13      	ldr	r2, [pc, #76]	; (8003384 <UART_SetConfig+0x658>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d804      	bhi.n	8003344 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	e006      	b.n	8003352 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003344:	2313      	movs	r3, #19
 8003346:	2218      	movs	r2, #24
 8003348:	4694      	mov	ip, r2
 800334a:	44bc      	add	ip, r7
 800334c:	4463      	add	r3, ip
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2200      	movs	r2, #0
 8003356:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2200      	movs	r2, #0
 800335c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800335e:	2313      	movs	r3, #19
 8003360:	2218      	movs	r2, #24
 8003362:	4694      	mov	ip, r2
 8003364:	44bc      	add	ip, r7
 8003366:	4463      	add	r3, ip
 8003368:	781b      	ldrb	r3, [r3, #0]
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b00e      	add	sp, #56	; 0x38
 8003370:	bdb0      	pop	{r4, r5, r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	080036ec 	.word	0x080036ec
 8003378:	40021000 	.word	0x40021000
 800337c:	007a1200 	.word	0x007a1200
 8003380:	01e84800 	.word	0x01e84800
 8003384:	0000ffff 	.word	0x0000ffff
 8003388:	08003710 	.word	0x08003710
 800338c:	003d0900 	.word	0x003d0900
 8003390:	00f42400 	.word	0x00f42400

08003394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	2201      	movs	r2, #1
 80033a2:	4013      	ands	r3, r2
 80033a4:	d00b      	beq.n	80033be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <UART_AdvFeatureConfig+0x144>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4a43      	ldr	r2, [pc, #268]	; (80034dc <UART_AdvFeatureConfig+0x148>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2204      	movs	r2, #4
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00b      	beq.n	8003402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <UART_AdvFeatureConfig+0x14c>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	2208      	movs	r2, #8
 8003408:	4013      	ands	r3, r2
 800340a:	d00b      	beq.n	8003424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <UART_AdvFeatureConfig+0x150>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2210      	movs	r2, #16
 800342a:	4013      	ands	r3, r2
 800342c:	d00b      	beq.n	8003446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <UART_AdvFeatureConfig+0x154>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2220      	movs	r2, #32
 800344c:	4013      	ands	r3, r2
 800344e:	d00b      	beq.n	8003468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4a25      	ldr	r2, [pc, #148]	; (80034ec <UART_AdvFeatureConfig+0x158>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2240      	movs	r2, #64	; 0x40
 800346e:	4013      	ands	r3, r2
 8003470:	d01d      	beq.n	80034ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <UART_AdvFeatureConfig+0x15c>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	035b      	lsls	r3, r3, #13
 8003492:	429a      	cmp	r2, r3
 8003494:	d10b      	bne.n	80034ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <UART_AdvFeatureConfig+0x160>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	4013      	ands	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <UART_AdvFeatureConfig+0x164>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	fffdffff 	.word	0xfffdffff
 80034dc:	fffeffff 	.word	0xfffeffff
 80034e0:	fffbffff 	.word	0xfffbffff
 80034e4:	ffff7fff 	.word	0xffff7fff
 80034e8:	ffffefff 	.word	0xffffefff
 80034ec:	ffffdfff 	.word	0xffffdfff
 80034f0:	ffefffff 	.word	0xffefffff
 80034f4:	ff9fffff 	.word	0xff9fffff
 80034f8:	fff7ffff 	.word	0xfff7ffff

080034fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af02      	add	r7, sp, #8
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800350a:	f7fd fc6d 	bl	8000de8 <HAL_GetTick>
 800350e:	0003      	movs	r3, r0
 8003510:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	4013      	ands	r3, r2
 800351c:	2b08      	cmp	r3, #8
 800351e:	d10d      	bne.n	800353c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	0399      	lsls	r1, r3, #14
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4b16      	ldr	r3, [pc, #88]	; (8003584 <UART_CheckIdleState+0x88>)
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	0013      	movs	r3, r2
 800352e:	2200      	movs	r2, #0
 8003530:	f000 f82a 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d001      	beq.n	800353c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e01f      	b.n	800357c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	2b04      	cmp	r3, #4
 8003548:	d10d      	bne.n	8003566 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	03d9      	lsls	r1, r3, #15
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <UART_CheckIdleState+0x88>)
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	0013      	movs	r3, r2
 8003558:	2200      	movs	r2, #0
 800355a:	f000 f815 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d001      	beq.n	8003566 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e00a      	b.n	800357c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2270      	movs	r2, #112	; 0x70
 8003576:	2100      	movs	r1, #0
 8003578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b004      	add	sp, #16
 8003582:	bd80      	pop	{r7, pc}
 8003584:	01ffffff 	.word	0x01ffffff

08003588 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003598:	e029      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	3301      	adds	r3, #1
 800359e:	d026      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fd fc22 	bl	8000de8 <HAL_GetTick>
 80035a4:	0002      	movs	r2, r0
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d302      	bcc.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11b      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4915      	ldr	r1, [pc, #84]	; (8003618 <UART_WaitOnFlagUntilTimeout+0x90>)
 80035c2:	400a      	ands	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	438a      	bics	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2270      	movs	r2, #112	; 0x70
 80035e6:	2100      	movs	r1, #0
 80035e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e00f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	425a      	negs	r2, r3
 80035fe:	4153      	adcs	r3, r2
 8003600:	b2db      	uxtb	r3, r3
 8003602:	001a      	movs	r2, r3
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d0c6      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b004      	add	sp, #16
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	fffffe5f 	.word	0xfffffe5f

0800361c <__libc_init_array>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	2600      	movs	r6, #0
 8003620:	4d0c      	ldr	r5, [pc, #48]	; (8003654 <__libc_init_array+0x38>)
 8003622:	4c0d      	ldr	r4, [pc, #52]	; (8003658 <__libc_init_array+0x3c>)
 8003624:	1b64      	subs	r4, r4, r5
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	42a6      	cmp	r6, r4
 800362a:	d109      	bne.n	8003640 <__libc_init_array+0x24>
 800362c:	2600      	movs	r6, #0
 800362e:	f000 f821 	bl	8003674 <_init>
 8003632:	4d0a      	ldr	r5, [pc, #40]	; (800365c <__libc_init_array+0x40>)
 8003634:	4c0a      	ldr	r4, [pc, #40]	; (8003660 <__libc_init_array+0x44>)
 8003636:	1b64      	subs	r4, r4, r5
 8003638:	10a4      	asrs	r4, r4, #2
 800363a:	42a6      	cmp	r6, r4
 800363c:	d105      	bne.n	800364a <__libc_init_array+0x2e>
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	00b3      	lsls	r3, r6, #2
 8003642:	58eb      	ldr	r3, [r5, r3]
 8003644:	4798      	blx	r3
 8003646:	3601      	adds	r6, #1
 8003648:	e7ee      	b.n	8003628 <__libc_init_array+0xc>
 800364a:	00b3      	lsls	r3, r6, #2
 800364c:	58eb      	ldr	r3, [r5, r3]
 800364e:	4798      	blx	r3
 8003650:	3601      	adds	r6, #1
 8003652:	e7f2      	b.n	800363a <__libc_init_array+0x1e>
 8003654:	0800373c 	.word	0x0800373c
 8003658:	0800373c 	.word	0x0800373c
 800365c:	0800373c 	.word	0x0800373c
 8003660:	08003740 	.word	0x08003740

08003664 <memset>:
 8003664:	0003      	movs	r3, r0
 8003666:	1812      	adds	r2, r2, r0
 8003668:	4293      	cmp	r3, r2
 800366a:	d100      	bne.n	800366e <memset+0xa>
 800366c:	4770      	bx	lr
 800366e:	7019      	strb	r1, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	e7f9      	b.n	8003668 <memset+0x4>

08003674 <_init>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367a:	bc08      	pop	{r3}
 800367c:	469e      	mov	lr, r3
 800367e:	4770      	bx	lr

08003680 <_fini>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr
