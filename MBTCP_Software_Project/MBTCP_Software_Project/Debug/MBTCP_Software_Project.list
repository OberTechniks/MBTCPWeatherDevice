
MBTCP_Software_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de8  08003de8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000008  08003df8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003df8  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c594  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bf4  00000000  00000000  0002c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  0002ee18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014dcb  00000000  00000000  0002f980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a69f  00000000  00000000  0004474b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000823a8  00000000  00000000  0004edea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  000d1210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d0c 	.word	0x08003d0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08003d0c 	.word	0x08003d0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <framRead>:

   HAL_StatusTypeDef status;

   // Read data function
   HAL_StatusTypeDef framRead(SPI_HandleTypeDef* spiHandle, uint16_t address, uint8_t* dataBuffer)
   {
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b08d      	sub	sp, #52	; 0x34
 800043c:	af02      	add	r7, sp, #8
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	200a      	movs	r0, #10
 8000444:	183b      	adds	r3, r7, r0
 8000446:	1c0a      	adds	r2, r1, #0
 8000448:	801a      	strh	r2, [r3, #0]
	   // Check if the parameters are valid
	   if((address >= 0) && (address <= 0x1FFF))
 800044a:	183b      	adds	r3, r7, r0
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	4a38      	ldr	r2, [pc, #224]	; (8000530 <framRead+0xf8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d901      	bls.n	8000458 <framRead+0x20>
	   {
		   // do nothing, continue
	   }
	   else
	   {
		   return HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	e066      	b.n	8000526 <framRead+0xee>
	   }

	   // Function variables
	   uint8_t AddrUpperByte = 0;
 8000458:	2027      	movs	r0, #39	; 0x27
 800045a:	183b      	adds	r3, r7, r0
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
	   uint8_t AddrLowerByte = 0;
 8000460:	2426      	movs	r4, #38	; 0x26
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
	   uint8_t TxDummyData = 0xFF;
 8000468:	2525      	movs	r5, #37	; 0x25
 800046a:	197b      	adds	r3, r7, r5
 800046c:	22ff      	movs	r2, #255	; 0xff
 800046e:	701a      	strb	r2, [r3, #0]
	   uint8_t RxDummyData = 0xFF;
 8000470:	2124      	movs	r1, #36	; 0x24
 8000472:	187b      	adds	r3, r7, r1
 8000474:	22ff      	movs	r2, #255	; 0xff
 8000476:	701a      	strb	r2, [r3, #0]
	   uint32_t timeout = 10000;
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <framRead+0xfc>)
 800047a:	623b      	str	r3, [r7, #32]
	   uint8_t size = 4;
 800047c:	231f      	movs	r3, #31
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	2204      	movs	r2, #4
 8000482:	701a      	strb	r2, [r3, #0]

	   // Separate the address into upper and lower bytes
	   AddrUpperByte = address >> 8;
 8000484:	260a      	movs	r6, #10
 8000486:	19bb      	adds	r3, r7, r6
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	b29a      	uxth	r2, r3
 800048e:	183b      	adds	r3, r7, r0
 8000490:	701a      	strb	r2, [r3, #0]
	   AddrLowerByte = address & 0xFF;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	19ba      	adds	r2, r7, r6
 8000496:	8812      	ldrh	r2, [r2, #0]
 8000498:	701a      	strb	r2, [r3, #0]

	   // Create the SPI data buffers
	   // Read op-code sequence = Read Op Code + AddrHighByte + AddrLowByte + Dummy Data
	   uint8_t TxData[4] = {READ, AddrUpperByte, AddrLowerByte, TxDummyData};
 800049a:	4b27      	ldr	r3, [pc, #156]	; (8000538 <framRead+0x100>)
 800049c:	781a      	ldrb	r2, [r3, #0]
 800049e:	2618      	movs	r6, #24
 80004a0:	19bb      	adds	r3, r7, r6
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	19bb      	adds	r3, r7, r6
 80004a6:	183a      	adds	r2, r7, r0
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	705a      	strb	r2, [r3, #1]
 80004ac:	19bb      	adds	r3, r7, r6
 80004ae:	193a      	adds	r2, r7, r4
 80004b0:	7812      	ldrb	r2, [r2, #0]
 80004b2:	709a      	strb	r2, [r3, #2]
 80004b4:	19bb      	adds	r3, r7, r6
 80004b6:	197a      	adds	r2, r7, r5
 80004b8:	7812      	ldrb	r2, [r2, #0]
 80004ba:	70da      	strb	r2, [r3, #3]
	   uint8_t RxData[4] = {RxDummyData, RxDummyData, RxDummyData, RxDummyData};
 80004bc:	2514      	movs	r5, #20
 80004be:	197b      	adds	r3, r7, r5
 80004c0:	187a      	adds	r2, r7, r1
 80004c2:	7812      	ldrb	r2, [r2, #0]
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	197b      	adds	r3, r7, r5
 80004c8:	187a      	adds	r2, r7, r1
 80004ca:	7812      	ldrb	r2, [r2, #0]
 80004cc:	705a      	strb	r2, [r3, #1]
 80004ce:	197b      	adds	r3, r7, r5
 80004d0:	187a      	adds	r2, r7, r1
 80004d2:	7812      	ldrb	r2, [r2, #0]
 80004d4:	709a      	strb	r2, [r3, #2]
 80004d6:	197b      	adds	r3, r7, r5
 80004d8:	187a      	adds	r2, r7, r1
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	70da      	strb	r2, [r3, #3]

	   // Perform SPI transaction
	   // The valid received data byte is placed in the last byte of the received packet
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	4816      	ldr	r0, [pc, #88]	; (800053c <framRead+0x104>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	0019      	movs	r1, r3
 80004e8:	f001 fb16 	bl	8001b18 <HAL_GPIO_WritePin>
	   status = HAL_SPI_TransmitReceive(spiHandle, TxData, RxData, size, timeout);
 80004ec:	231f      	movs	r3, #31
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b29c      	uxth	r4, r3
 80004f4:	197a      	adds	r2, r7, r5
 80004f6:	19b9      	adds	r1, r7, r6
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	6a3b      	ldr	r3, [r7, #32]
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	0023      	movs	r3, r4
 8000500:	f002 fbfa 	bl	8002cf8 <HAL_SPI_TransmitReceive>
 8000504:	0003      	movs	r3, r0
 8000506:	001a      	movs	r2, r3
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <framRead+0x108>)
 800050a:	701a      	strb	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <framRead+0x104>)
 8000512:	2201      	movs	r2, #1
 8000514:	0019      	movs	r1, r3
 8000516:	f001 faff 	bl	8001b18 <HAL_GPIO_WritePin>

	   // Put the read data in the buffer parameter
	   *dataBuffer = RxData[3];
 800051a:	197b      	adds	r3, r7, r5
 800051c:	78da      	ldrb	r2, [r3, #3]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	701a      	strb	r2, [r3, #0]

	   // Return the HAL SPI1 status
	   return status;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <framRead+0x108>)
 8000524:	781b      	ldrb	r3, [r3, #0]
   }
 8000526:	0018      	movs	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	b00b      	add	sp, #44	; 0x2c
 800052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	00001fff 	.word	0x00001fff
 8000534:	00002710 	.word	0x00002710
 8000538:	20000002 	.word	0x20000002
 800053c:	50000800 	.word	0x50000800
 8000540:	20000024 	.word	0x20000024

08000544 <framWrite>:

   // Write data function
   HAL_StatusTypeDef framWrite(SPI_HandleTypeDef* spiHandle, uint16_t address, uint8_t data)
   {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	; 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	0008      	movs	r0, r1
 800054e:	0011      	movs	r1, r2
 8000550:	1cbb      	adds	r3, r7, #2
 8000552:	1c02      	adds	r2, r0, #0
 8000554:	801a      	strh	r2, [r3, #0]
 8000556:	1c7b      	adds	r3, r7, #1
 8000558:	1c0a      	adds	r2, r1, #0
 800055a:	701a      	strb	r2, [r3, #0]
	   // Check if the parameters are valid
	   if((address >= 0) && (address <= 0x1FFF))
 800055c:	1cbb      	adds	r3, r7, #2
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	4a6e      	ldr	r2, [pc, #440]	; (800071c <framWrite+0x1d8>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d901      	bls.n	800056a <framWrite+0x26>
	   {
		   // do nothing, continue
	   }
	   else
	   {
		   return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	e0d3      	b.n	8000712 <framWrite+0x1ce>
	   }

	   // Function variables
	   uint8_t AddrUpperByte = 0;
 800056a:	201f      	movs	r0, #31
 800056c:	183b      	adds	r3, r7, r0
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	   uint8_t AddrLowerByte = 0;
 8000572:	241e      	movs	r4, #30
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	   uint8_t RxDummyData = 0xFF;
 800057a:	251d      	movs	r5, #29
 800057c:	197b      	adds	r3, r7, r5
 800057e:	22ff      	movs	r2, #255	; 0xff
 8000580:	701a      	strb	r2, [r3, #0]
	   uint32_t timeout = 10000;
 8000582:	4b67      	ldr	r3, [pc, #412]	; (8000720 <framWrite+0x1dc>)
 8000584:	61bb      	str	r3, [r7, #24]
	   uint8_t size = 4;
 8000586:	2117      	movs	r1, #23
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2204      	movs	r2, #4
 800058c:	701a      	strb	r2, [r3, #0]
	   uint8_t TxData[4];
	   uint8_t RxData[4];

	   // Separate the address into upper and lower bytes
	   AddrUpperByte = address >> 8;
 800058e:	1cbb      	adds	r3, r7, #2
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29a      	uxth	r2, r3
 8000596:	183b      	adds	r3, r7, r0
 8000598:	701a      	strb	r2, [r3, #0]
	   AddrLowerByte = address & 0xFF;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	1cba      	adds	r2, r7, #2
 800059e:	8812      	ldrh	r2, [r2, #0]
 80005a0:	701a      	strb	r2, [r3, #0]

	   // Packets to send over SPI
	   // #1. Write Enable packet = WREN
	   TxData[0] = WREN;
 80005a2:	4b60      	ldr	r3, [pc, #384]	; (8000724 <framWrite+0x1e0>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	2610      	movs	r6, #16
 80005a8:	19bb      	adds	r3, r7, r6
 80005aa:	701a      	strb	r2, [r3, #0]
	   RxData[0] = RxDummyData;
 80005ac:	230c      	movs	r3, #12
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	197a      	adds	r2, r7, r5
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	701a      	strb	r2, [r3, #0]
   	   size = 1;
 80005b6:	000c      	movs	r4, r1
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
   	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	4859      	ldr	r0, [pc, #356]	; (8000728 <framWrite+0x1e4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	0019      	movs	r1, r3
 80005c8:	f001 faa6 	bl	8001b18 <HAL_GPIO_WritePin>
   	   status = HAL_SPI_TransmitReceive(spiHandle, TxData, RxData, size, timeout);
 80005cc:	0021      	movs	r1, r4
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b29c      	uxth	r4, r3
 80005d4:	230c      	movs	r3, #12
 80005d6:	18fa      	adds	r2, r7, r3
 80005d8:	19b9      	adds	r1, r7, r6
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	0023      	movs	r3, r4
 80005e2:	f002 fb89 	bl	8002cf8 <HAL_SPI_TransmitReceive>
 80005e6:	0003      	movs	r3, r0
 80005e8:	001a      	movs	r2, r3
 80005ea:	4b50      	ldr	r3, [pc, #320]	; (800072c <framWrite+0x1e8>)
 80005ec:	701a      	strb	r2, [r3, #0]
   	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	484d      	ldr	r0, [pc, #308]	; (8000728 <framWrite+0x1e4>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	0019      	movs	r1, r3
 80005f8:	f001 fa8e 	bl	8001b18 <HAL_GPIO_WritePin>
   	   HAL_Delay(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fe09 	bl	8001214 <HAL_Delay>
   	   if(status != HAL_OK)
 8000602:	4b4a      	ldr	r3, [pc, #296]	; (800072c <framWrite+0x1e8>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <framWrite+0xcc>
   	   {
   		   return status;
 800060a:	4b48      	ldr	r3, [pc, #288]	; (800072c <framWrite+0x1e8>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	e080      	b.n	8000712 <framWrite+0x1ce>
   	   }

   	   // #2. Write data to memory cell packet = Write Op Code + AddrHighByte + AddrLowbyte + byte of data to write
   	   TxData[0] = WRITE;
 8000610:	4b47      	ldr	r3, [pc, #284]	; (8000730 <framWrite+0x1ec>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	2510      	movs	r5, #16
 8000616:	197b      	adds	r3, r7, r5
 8000618:	701a      	strb	r2, [r3, #0]
   	   TxData[1] = AddrUpperByte;
 800061a:	197b      	adds	r3, r7, r5
 800061c:	221f      	movs	r2, #31
 800061e:	18ba      	adds	r2, r7, r2
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	705a      	strb	r2, [r3, #1]
   	   TxData[2] = AddrLowerByte;
 8000624:	197b      	adds	r3, r7, r5
 8000626:	221e      	movs	r2, #30
 8000628:	18ba      	adds	r2, r7, r2
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	709a      	strb	r2, [r3, #2]
   	   TxData[3] = data;
 800062e:	197b      	adds	r3, r7, r5
 8000630:	1c7a      	adds	r2, r7, #1
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	70da      	strb	r2, [r3, #3]
   	   RxData[0] = RxDummyData;
 8000636:	260c      	movs	r6, #12
 8000638:	19bb      	adds	r3, r7, r6
 800063a:	211d      	movs	r1, #29
 800063c:	187a      	adds	r2, r7, r1
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	701a      	strb	r2, [r3, #0]
   	   RxData[1] = RxDummyData;
 8000642:	19bb      	adds	r3, r7, r6
 8000644:	187a      	adds	r2, r7, r1
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	705a      	strb	r2, [r3, #1]
   	   RxData[2] = RxDummyData;
 800064a:	19bb      	adds	r3, r7, r6
 800064c:	187a      	adds	r2, r7, r1
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	709a      	strb	r2, [r3, #2]
   	   RxData[3] = RxDummyData;
 8000652:	19bb      	adds	r3, r7, r6
 8000654:	187a      	adds	r2, r7, r1
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	70da      	strb	r2, [r3, #3]
   	   size = 4;
 800065a:	2417      	movs	r4, #23
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2204      	movs	r2, #4
 8000660:	701a      	strb	r2, [r3, #0]
   	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	4830      	ldr	r0, [pc, #192]	; (8000728 <framWrite+0x1e4>)
 8000668:	2200      	movs	r2, #0
 800066a:	0019      	movs	r1, r3
 800066c:	f001 fa54 	bl	8001b18 <HAL_GPIO_WritePin>
   	   status = HAL_SPI_TransmitReceive(spiHandle, TxData, RxData, size, timeout);
 8000670:	193b      	adds	r3, r7, r4
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29c      	uxth	r4, r3
 8000676:	19ba      	adds	r2, r7, r6
 8000678:	1979      	adds	r1, r7, r5
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	0023      	movs	r3, r4
 8000682:	f002 fb39 	bl	8002cf8 <HAL_SPI_TransmitReceive>
 8000686:	0003      	movs	r3, r0
 8000688:	001a      	movs	r2, r3
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <framWrite+0x1e8>)
 800068c:	701a      	strb	r2, [r3, #0]
   	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	4825      	ldr	r0, [pc, #148]	; (8000728 <framWrite+0x1e4>)
 8000694:	2201      	movs	r2, #1
 8000696:	0019      	movs	r1, r3
 8000698:	f001 fa3e 	bl	8001b18 <HAL_GPIO_WritePin>
   	   HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fdb9 	bl	8001214 <HAL_Delay>
   	   if(status != HAL_OK)
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <framWrite+0x1e8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <framWrite+0x16c>
   	   {
   		   return status;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <framWrite+0x1e8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	e030      	b.n	8000712 <framWrite+0x1ce>
   	   }

   	   // #3. Write Enable Reset packet = WRDI
   	   TxData[0] = WRDI;
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <framWrite+0x1f0>)
 80006b2:	781a      	ldrb	r2, [r3, #0]
 80006b4:	2510      	movs	r5, #16
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	701a      	strb	r2, [r3, #0]
   	   RxData[0] = RxDummyData;
 80006ba:	260c      	movs	r6, #12
 80006bc:	19bb      	adds	r3, r7, r6
 80006be:	221d      	movs	r2, #29
 80006c0:	18ba      	adds	r2, r7, r2
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	701a      	strb	r2, [r3, #0]
   	   size = 1;
 80006c6:	2417      	movs	r4, #23
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
   	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4815      	ldr	r0, [pc, #84]	; (8000728 <framWrite+0x1e4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	0019      	movs	r1, r3
 80006d8:	f001 fa1e 	bl	8001b18 <HAL_GPIO_WritePin>
   	   status = HAL_SPI_TransmitReceive(spiHandle, TxData, RxData, size, timeout);
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29c      	uxth	r4, r3
 80006e2:	19ba      	adds	r2, r7, r6
 80006e4:	1979      	adds	r1, r7, r5
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	0023      	movs	r3, r4
 80006ee:	f002 fb03 	bl	8002cf8 <HAL_SPI_TransmitReceive>
 80006f2:	0003      	movs	r3, r0
 80006f4:	001a      	movs	r2, r3
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <framWrite+0x1e8>)
 80006f8:	701a      	strb	r2, [r3, #0]
   	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <framWrite+0x1e4>)
 8000700:	2201      	movs	r2, #1
 8000702:	0019      	movs	r1, r3
 8000704:	f001 fa08 	bl	8001b18 <HAL_GPIO_WritePin>
   	   HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fd83 	bl	8001214 <HAL_Delay>

   	   return status;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <framWrite+0x1e8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
   }
 8000712:	0018      	movs	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	b009      	add	sp, #36	; 0x24
 8000718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	00001fff 	.word	0x00001fff
 8000720:	00002710 	.word	0x00002710
 8000724:	20000000 	.word	0x20000000
 8000728:	50000800 	.word	0x50000800
 800072c:	20000024 	.word	0x20000024
 8000730:	20000003 	.word	0x20000003
 8000734:	20000001 	.word	0x20000001

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b09a      	sub	sp, #104	; 0x68
 800073c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fd09 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f937 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 faab 	bl	8000ca0 <MX_GPIO_Init>
  MX_ADC_Init();
 800074a:	f000 f99d 	bl	8000a88 <MX_ADC_Init>
  MX_I2C1_Init();
 800074e:	f000 f9ff 	bl	8000b50 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000752:	f000 fa3d 	bl	8000bd0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000756:	f000 fa73 	bl	8000c40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //**************************************************************************************************************
  // HAL Items
  uint8_t HAL_OK_Buffer[6] = {72, 65, 76, 32, 79, 75};								// Buffer for HAL_OK message
 800075a:	2358      	movs	r3, #88	; 0x58
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	4a88      	ldr	r2, [pc, #544]	; (8000980 <main+0x248>)
 8000760:	6811      	ldr	r1, [r2, #0]
 8000762:	6019      	str	r1, [r3, #0]
 8000764:	8892      	ldrh	r2, [r2, #4]
 8000766:	809a      	strh	r2, [r3, #4]
  uint8_t HAL_ERROR_Buffer[9] = {72, 65, 76, 32, 69, 82, 82, 79, 82};				// Buffer for HAL_ERROR message
 8000768:	234c      	movs	r3, #76	; 0x4c
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	4a85      	ldr	r2, [pc, #532]	; (8000984 <main+0x24c>)
 800076e:	ca03      	ldmia	r2!, {r0, r1}
 8000770:	c303      	stmia	r3!, {r0, r1}
 8000772:	7812      	ldrb	r2, [r2, #0]
 8000774:	701a      	strb	r2, [r3, #0]
  uint8_t HAL_BUSY_Buffer[8] = {72, 65, 76, 32, 66, 85, 83, 89};					// Buffer for HAL_BUSY message
 8000776:	2344      	movs	r3, #68	; 0x44
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	4a83      	ldr	r2, [pc, #524]	; (8000988 <main+0x250>)
 800077c:	ca03      	ldmia	r2!, {r0, r1}
 800077e:	c303      	stmia	r3!, {r0, r1}
  uint8_t HAL_TIMEOUT_Buffer[11] = {72, 65, 76, 32, 84, 73, 77, 69, 79, 85, 84};	// Buffer for HAL_TIMEOUT message
 8000780:	2338      	movs	r3, #56	; 0x38
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	4a81      	ldr	r2, [pc, #516]	; (800098c <main+0x254>)
 8000786:	ca03      	ldmia	r2!, {r0, r1}
 8000788:	c303      	stmia	r3!, {r0, r1}
 800078a:	8811      	ldrh	r1, [r2, #0]
 800078c:	8019      	strh	r1, [r3, #0]
 800078e:	7892      	ldrb	r2, [r2, #2]
 8000790:	709a      	strb	r2, [r3, #2]
  uint8_t crlfBuffer[2] = {13, 10};													// Buffer for carriage return and line feed characters
 8000792:	2334      	movs	r3, #52	; 0x34
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	4a7e      	ldr	r2, [pc, #504]	; (8000990 <main+0x258>)
 8000798:	8812      	ldrh	r2, [r2, #0]
 800079a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef UART2_STATUS;													// UART2 status object
  HAL_StatusTypeDef SPI1_STATUS;													// SPI1 status object
  uint32_t timeout = 10000;															// HAL timeout value
 800079c:	4b7d      	ldr	r3, [pc, #500]	; (8000994 <main+0x25c>)
 800079e:	667b      	str	r3, [r7, #100]	; 0x64
  //*************************************************************************************************************

  //***************************************************************************************************************
  // Begin board bring-up specific items

  uint8_t writeData = 0x47;
 80007a0:	2363      	movs	r3, #99	; 0x63
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2247      	movs	r2, #71	; 0x47
 80007a6:	701a      	strb	r2, [r3, #0]
  uint8_t readData = 0x42;
 80007a8:	2333      	movs	r3, #51	; 0x33
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2242      	movs	r2, #66	; 0x42
 80007ae:	701a      	strb	r2, [r3, #0]
  uint16_t address = 0x0000;
 80007b0:	2330      	movs	r3, #48	; 0x30
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	801a      	strh	r2, [r3, #0]

  uint8_t writeGoodBuffer[12] = {87, 114, 105, 116, 101, 32, 71, 111, 111, 100, 58, 32};
 80007b8:	2324      	movs	r3, #36	; 0x24
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	4a76      	ldr	r2, [pc, #472]	; (8000998 <main+0x260>)
 80007be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c0:	c313      	stmia	r3!, {r0, r1, r4}
  uint8_t writeBadBuffer[9] = {87, 114, 105, 116, 101, 32, 66, 97, 100};
 80007c2:	2318      	movs	r3, #24
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	4a75      	ldr	r2, [pc, #468]	; (800099c <main+0x264>)
 80007c8:	ca03      	ldmia	r2!, {r0, r1}
 80007ca:	c303      	stmia	r3!, {r0, r1}
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	701a      	strb	r2, [r3, #0]
  uint8_t readGoodData[11] = {82, 101, 97, 100, 32, 68, 97, 116, 97, 58, 32};
 80007d0:	230c      	movs	r3, #12
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	4a72      	ldr	r2, [pc, #456]	; (80009a0 <main+0x268>)
 80007d6:	ca03      	ldmia	r2!, {r0, r1}
 80007d8:	c303      	stmia	r3!, {r0, r1}
 80007da:	8811      	ldrh	r1, [r2, #0]
 80007dc:	8019      	strh	r1, [r3, #0]
 80007de:	7892      	ldrb	r2, [r2, #2]
 80007e0:	709a      	strb	r2, [r3, #2]
  uint8_t readBadBuffer[9] = {82, 101, 97, 100, 32, 66, 97, 100};
 80007e2:	003b      	movs	r3, r7
 80007e4:	0018      	movs	r0, r3
 80007e6:	2309      	movs	r3, #9
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f003 fa86 	bl	8003cfc <memset>
 80007f0:	003b      	movs	r3, r7
 80007f2:	2252      	movs	r2, #82	; 0x52
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	003b      	movs	r3, r7
 80007f8:	2265      	movs	r2, #101	; 0x65
 80007fa:	705a      	strb	r2, [r3, #1]
 80007fc:	003b      	movs	r3, r7
 80007fe:	2261      	movs	r2, #97	; 0x61
 8000800:	709a      	strb	r2, [r3, #2]
 8000802:	003b      	movs	r3, r7
 8000804:	2264      	movs	r2, #100	; 0x64
 8000806:	70da      	strb	r2, [r3, #3]
 8000808:	003b      	movs	r3, r7
 800080a:	2220      	movs	r2, #32
 800080c:	711a      	strb	r2, [r3, #4]
 800080e:	003b      	movs	r3, r7
 8000810:	2242      	movs	r2, #66	; 0x42
 8000812:	715a      	strb	r2, [r3, #5]
 8000814:	003b      	movs	r3, r7
 8000816:	2261      	movs	r2, #97	; 0x61
 8000818:	719a      	strb	r2, [r3, #6]
 800081a:	003b      	movs	r3, r7
 800081c:	2264      	movs	r2, #100	; 0x64
 800081e:	71da      	strb	r2, [r3, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Reset the address and data
	  writeData = 0x47;
 8000820:	2363      	movs	r3, #99	; 0x63
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	2247      	movs	r2, #71	; 0x47
 8000826:	701a      	strb	r2, [r3, #0]
	  readData = 0x42;
 8000828:	2333      	movs	r3, #51	; 0x33
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2242      	movs	r2, #66	; 0x42
 800082e:	701a      	strb	r2, [r3, #0]

	  if(address >= 0x1FFF)
 8000830:	2330      	movs	r3, #48	; 0x30
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	4a5b      	ldr	r2, [pc, #364]	; (80009a4 <main+0x26c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d904      	bls.n	8000846 <main+0x10e>
	  {
		  address = 0x0001;
 800083c:	2330      	movs	r3, #48	; 0x30
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	2201      	movs	r2, #1
 8000842:	801a      	strh	r2, [r3, #0]
 8000844:	e006      	b.n	8000854 <main+0x11c>
	  }
	  else	// increment the address
	  {
		  address = address + 1;
 8000846:	2130      	movs	r1, #48	; 0x30
 8000848:	187b      	adds	r3, r7, r1
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	b29a      	uxth	r2, r3
 8000850:	187b      	adds	r3, r7, r1
 8000852:	801a      	strh	r2, [r3, #0]
	  }

	  // Write data to address
	  SPI1_STATUS = framWrite(&hspi1, address, writeData);
 8000854:	2330      	movs	r3, #48	; 0x30
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	8819      	ldrh	r1, [r3, #0]
 800085a:	2562      	movs	r5, #98	; 0x62
 800085c:	197c      	adds	r4, r7, r5
 800085e:	2363      	movs	r3, #99	; 0x63
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <main+0x270>)
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff fe6c 	bl	8000544 <framWrite>
 800086c:	0003      	movs	r3, r0
 800086e:	7023      	strb	r3, [r4, #0]
	  if(SPI1_STATUS == HAL_OK)
 8000870:	197b      	adds	r3, r7, r5
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d11f      	bne.n	80008b8 <main+0x180>
	  {
		  // Print write was ok
		  UART2_STATUS = HAL_UART_Transmit(&huart2, writeGoodBuffer, sizeof(writeGoodBuffer), timeout);
 8000878:	2561      	movs	r5, #97	; 0x61
 800087a:	197c      	adds	r4, r7, r5
 800087c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800087e:	2224      	movs	r2, #36	; 0x24
 8000880:	18b9      	adds	r1, r7, r2
 8000882:	484a      	ldr	r0, [pc, #296]	; (80009ac <main+0x274>)
 8000884:	220c      	movs	r2, #12
 8000886:	f002 fcf5 	bl	8003274 <HAL_UART_Transmit>
 800088a:	0003      	movs	r3, r0
 800088c:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, &address, 2, timeout);
 800088e:	197c      	adds	r4, r7, r5
 8000890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	18b9      	adds	r1, r7, r2
 8000896:	4845      	ldr	r0, [pc, #276]	; (80009ac <main+0x274>)
 8000898:	2202      	movs	r2, #2
 800089a:	f002 fceb 	bl	8003274 <HAL_UART_Transmit>
 800089e:	0003      	movs	r3, r0
 80008a0:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 80008a2:	197c      	adds	r4, r7, r5
 80008a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a6:	2234      	movs	r2, #52	; 0x34
 80008a8:	18b9      	adds	r1, r7, r2
 80008aa:	4840      	ldr	r0, [pc, #256]	; (80009ac <main+0x274>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	f002 fce1 	bl	8003274 <HAL_UART_Transmit>
 80008b2:	0003      	movs	r3, r0
 80008b4:	7023      	strb	r3, [r4, #0]
 80008b6:	e014      	b.n	80008e2 <main+0x1aa>
	  }
	  else
	  {
		  // Print write failed
		  UART2_STATUS = HAL_UART_Transmit(&huart2, writeBadBuffer, sizeof(writeBadBuffer), timeout);
 80008b8:	2561      	movs	r5, #97	; 0x61
 80008ba:	197c      	adds	r4, r7, r5
 80008bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008be:	2218      	movs	r2, #24
 80008c0:	18b9      	adds	r1, r7, r2
 80008c2:	483a      	ldr	r0, [pc, #232]	; (80009ac <main+0x274>)
 80008c4:	2209      	movs	r2, #9
 80008c6:	f002 fcd5 	bl	8003274 <HAL_UART_Transmit>
 80008ca:	0003      	movs	r3, r0
 80008cc:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 80008ce:	197c      	adds	r4, r7, r5
 80008d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008d2:	2234      	movs	r2, #52	; 0x34
 80008d4:	18b9      	adds	r1, r7, r2
 80008d6:	4835      	ldr	r0, [pc, #212]	; (80009ac <main+0x274>)
 80008d8:	2202      	movs	r2, #2
 80008da:	f002 fccb 	bl	8003274 <HAL_UART_Transmit>
 80008de:	0003      	movs	r3, r0
 80008e0:	7023      	strb	r3, [r4, #0]
	  }

	  // Read the data back and print to serial port
	  SPI1_STATUS = framRead(&hspi1, address, &readData);
 80008e2:	2330      	movs	r3, #48	; 0x30
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	8819      	ldrh	r1, [r3, #0]
 80008e8:	2562      	movs	r5, #98	; 0x62
 80008ea:	197c      	adds	r4, r7, r5
 80008ec:	2333      	movs	r3, #51	; 0x33
 80008ee:	18fa      	adds	r2, r7, r3
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <main+0x270>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff fda0 	bl	8000438 <framRead>
 80008f8:	0003      	movs	r3, r0
 80008fa:	7023      	strb	r3, [r4, #0]
	  if(SPI1_STATUS == HAL_OK)
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11f      	bne.n	8000944 <main+0x20c>
	  {
		  // Print read data
		  UART2_STATUS = HAL_UART_Transmit(&huart2, readGoodData, sizeof(readGoodData), timeout);
 8000904:	2561      	movs	r5, #97	; 0x61
 8000906:	197c      	adds	r4, r7, r5
 8000908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800090a:	220c      	movs	r2, #12
 800090c:	18b9      	adds	r1, r7, r2
 800090e:	4827      	ldr	r0, [pc, #156]	; (80009ac <main+0x274>)
 8000910:	220b      	movs	r2, #11
 8000912:	f002 fcaf 	bl	8003274 <HAL_UART_Transmit>
 8000916:	0003      	movs	r3, r0
 8000918:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, &readData, 1, timeout);
 800091a:	197c      	adds	r4, r7, r5
 800091c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800091e:	2233      	movs	r2, #51	; 0x33
 8000920:	18b9      	adds	r1, r7, r2
 8000922:	4822      	ldr	r0, [pc, #136]	; (80009ac <main+0x274>)
 8000924:	2201      	movs	r2, #1
 8000926:	f002 fca5 	bl	8003274 <HAL_UART_Transmit>
 800092a:	0003      	movs	r3, r0
 800092c:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 800092e:	197c      	adds	r4, r7, r5
 8000930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000932:	2234      	movs	r2, #52	; 0x34
 8000934:	18b9      	adds	r1, r7, r2
 8000936:	481d      	ldr	r0, [pc, #116]	; (80009ac <main+0x274>)
 8000938:	2202      	movs	r2, #2
 800093a:	f002 fc9b 	bl	8003274 <HAL_UART_Transmit>
 800093e:	0003      	movs	r3, r0
 8000940:	7023      	strb	r3, [r4, #0]
 8000942:	e013      	b.n	800096c <main+0x234>
	  }
	  else
	  {
		  // Print read failed
		  UART2_STATUS = HAL_UART_Transmit(&huart2, readBadBuffer, sizeof(readBadBuffer), timeout);
 8000944:	2561      	movs	r5, #97	; 0x61
 8000946:	197c      	adds	r4, r7, r5
 8000948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800094a:	0039      	movs	r1, r7
 800094c:	4817      	ldr	r0, [pc, #92]	; (80009ac <main+0x274>)
 800094e:	2209      	movs	r2, #9
 8000950:	f002 fc90 	bl	8003274 <HAL_UART_Transmit>
 8000954:	0003      	movs	r3, r0
 8000956:	7023      	strb	r3, [r4, #0]
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
 8000958:	197c      	adds	r4, r7, r5
 800095a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800095c:	2234      	movs	r2, #52	; 0x34
 800095e:	18b9      	adds	r1, r7, r2
 8000960:	4812      	ldr	r0, [pc, #72]	; (80009ac <main+0x274>)
 8000962:	2202      	movs	r2, #2
 8000964:	f002 fc86 	bl	8003274 <HAL_UART_Transmit>
 8000968:	0003      	movs	r3, r0
 800096a:	7023      	strb	r3, [r4, #0]
	  {
		  // do nothing, just to avoid a build warning
	  }

	  // Delay a bit before looping
	  HAL_Delay(250);
 800096c:	20fa      	movs	r0, #250	; 0xfa
 800096e:	f000 fc51 	bl	8001214 <HAL_Delay>

	  // Toggle the LED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <main+0x278>)
 8000974:	2120      	movs	r1, #32
 8000976:	0018      	movs	r0, r3
 8000978:	f001 f8eb 	bl	8001b52 <HAL_GPIO_TogglePin>
	  writeData = 0x47;
 800097c:	e750      	b.n	8000820 <main+0xe8>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	08003d24 	.word	0x08003d24
 8000984:	08003d2c 	.word	0x08003d2c
 8000988:	08003d38 	.word	0x08003d38
 800098c:	08003d40 	.word	0x08003d40
 8000990:	08003d4c 	.word	0x08003d4c
 8000994:	00002710 	.word	0x00002710
 8000998:	08003d50 	.word	0x08003d50
 800099c:	08003d5c 	.word	0x08003d5c
 80009a0:	08003d68 	.word	0x08003d68
 80009a4:	00001ffe 	.word	0x00001ffe
 80009a8:	20000074 	.word	0x20000074
 80009ac:	200000cc 	.word	0x200000cc
 80009b0:	50000400 	.word	0x50000400

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b09f      	sub	sp, #124	; 0x7c
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	2440      	movs	r4, #64	; 0x40
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	0018      	movs	r0, r3
 80009c0:	2338      	movs	r3, #56	; 0x38
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f003 f999 	bl	8003cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ca:	232c      	movs	r3, #44	; 0x2c
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	0018      	movs	r0, r3
 80009d0:	2314      	movs	r3, #20
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f003 f991 	bl	8003cfc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	0018      	movs	r0, r3
 80009de:	2328      	movs	r3, #40	; 0x28
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f003 f98a 	bl	8003cfc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <SystemClock_Config+0xcc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <SystemClock_Config+0xd0>)
 80009ee:	401a      	ands	r2, r3
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <SystemClock_Config+0xcc>)
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	0109      	lsls	r1, r1, #4
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 f9dc 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000a20:	f000 f9f2 	bl	8000e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	212c      	movs	r1, #44	; 0x2c
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	220f      	movs	r2, #15
 8000a2a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2100      	movs	r1, #0
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 fd93 	bl	8002574 <HAL_RCC_ClockConfig>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a52:	f000 f9d9 	bl	8000e08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	220a      	movs	r2, #10
 8000a5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f001 ff66 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a74:	f000 f9c8 	bl	8000e08 <Error_Handler>
  }
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b01f      	add	sp, #124	; 0x7c
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	40007000 	.word	0x40007000
 8000a84:	ffffe7ff 	.word	0xffffe7ff

08000a88 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	003b      	movs	r3, r7
 8000a90:	0018      	movs	r0, r3
 8000a92:	2308      	movs	r3, #8
 8000a94:	001a      	movs	r2, r3
 8000a96:	2100      	movs	r1, #0
 8000a98:	f003 f930 	bl	8003cfc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000a9e:	4a2a      	ldr	r2, [pc, #168]	; (8000b48 <MX_ADC_Init+0xc0>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ac8:	2220      	movs	r2, #32
 8000aca:	2100      	movs	r1, #0
 8000acc:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ad0:	2221      	movs	r2, #33	; 0x21
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ade:	22c2      	movs	r2, #194	; 0xc2
 8000ae0:	32ff      	adds	r2, #255	; 0xff
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000ae6:	222c      	movs	r2, #44	; 0x2c
 8000ae8:	2100      	movs	r1, #0
 8000aea:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fb9f 	bl	8001250 <HAL_ADC_Init>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8000b16:	f000 f977 	bl	8000e08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <MX_ADC_Init+0xc4>)
 8000b1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	0152      	lsls	r2, r2, #5
 8000b26:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b28:	003a      	movs	r2, r7
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_ADC_Init+0xbc>)
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fd02 	bl	8001538 <HAL_ADC_ConfigChannel>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8000b38:	f000 f966 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000014c 	.word	0x2000014c
 8000b48:	40012400 	.word	0x40012400
 8000b4c:	30001000 	.word	0x30001000

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_I2C1_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <MX_I2C1_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fff3 	bl	8001b78 <HAL_I2C_Init>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b96:	f000 f937 	bl	8000e08 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 f880 	bl	8001ca4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba8:	f000 f92e 	bl	8000e08 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 f8c3 	bl	8001d3c <HAL_I2CEx_ConfigDigitalFilter>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 f925 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	00303d5b 	.word	0x00303d5b

08000bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <MX_SPI1_Init+0x6c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bdc:	2282      	movs	r2, #130	; 0x82
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f001 fffe 	bl	8002c24 <HAL_SPI_Init>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 f8ec 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000074 	.word	0x20000074
 8000c3c:	40013000 	.word	0x40013000

08000c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART2_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2296      	movs	r2, #150	; 0x96
 8000c4e:	0192      	lsls	r2, r2, #6
 8000c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f002 faa1 	bl	80031cc <HAL_UART_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 f8bb 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000cc 	.word	0x200000cc
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	240c      	movs	r4, #12
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	0018      	movs	r0, r3
 8000cac:	2314      	movs	r3, #20
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f003 f823 	bl	8003cfc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cba:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc2:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b45      	ldr	r3, [pc, #276]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cec:	2102      	movs	r1, #2
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf2:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <MX_GPIO_Init+0x15c>)
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000cfe:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <MX_GPIO_Init+0x160>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	2128      	movs	r1, #40	; 0x28
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 ff07 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d0a:	23a0      	movs	r3, #160	; 0xa0
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2110      	movs	r1, #16
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 ff00 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000d18:	23e0      	movs	r3, #224	; 0xe0
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	4838      	ldr	r0, [pc, #224]	; (8000e00 <MX_GPIO_Init+0x160>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	0019      	movs	r1, r3
 8000d22:	f000 fef9 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f000 fef3 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC6 PC7 
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7 
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	22c4      	movs	r2, #196	; 0xc4
 8000d36:	32ff      	adds	r2, #255	; 0xff
 8000d38:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	4a2d      	ldr	r2, [pc, #180]	; (8000e00 <MX_GPIO_Init+0x160>)
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	0010      	movs	r0, r2
 8000d4e:	f000 fd65 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000d52:	0021      	movs	r1, r4
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2228      	movs	r2, #40	; 0x28
 8000d58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6c:	000c      	movs	r4, r1
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <MX_GPIO_Init+0x160>)
 8000d72:	0019      	movs	r1, r3
 8000d74:	0010      	movs	r0, r2
 8000d76:	f000 fd51 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2210      	movs	r2, #16
 8000d80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2201      	movs	r2, #1
 8000d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	000c      	movs	r4, r1
 8000d96:	187a      	adds	r2, r7, r1
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fd3c 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000da4:	0021      	movs	r1, r4
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	22e0      	movs	r2, #224	; 0xe0
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2201      	movs	r2, #1
 8000db8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	000c      	movs	r4, r1
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <MX_GPIO_Init+0x160>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f000 fd27 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2201      	movs	r2, #1
 8000dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000dec:	0019      	movs	r1, r3
 8000dee:	0010      	movs	r0, r2
 8000df0:	f000 fd14 	bl	800181c <HAL_GPIO_Init>

}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b009      	add	sp, #36	; 0x24
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	50000800 	.word	0x50000800
 8000e04:	50000400 	.word	0x50000400

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_MspInit+0x24>)
 8000e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x24>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	430a      	orrs	r2, r1
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <HAL_MspInit+0x24>)
 8000e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_MspInit+0x24>)
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	0549      	lsls	r1, r1, #21
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	230c      	movs	r3, #12
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f002 ff54 	bl	8003cfc <memset>
  if(hadc->Instance==ADC1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <HAL_ADC_MspInit+0x70>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d122      	bne.n	8000ea4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_ADC_MspInit+0x74>)
 8000e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_MspInit+0x74>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0089      	lsls	r1, r1, #2
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_ADC_MspInit+0x74>)
 8000e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_ADC_MspInit+0x74>)
 8000e72:	2104      	movs	r1, #4
 8000e74:	430a      	orrs	r2, r1
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_ADC_MspInit+0x74>)
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PC2     ------> ADC_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e84:	210c      	movs	r1, #12
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2204      	movs	r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_ADC_MspInit+0x78>)
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	f000 fcbc 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b008      	add	sp, #32
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40012400 	.word	0x40012400
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	50000800 	.word	0x50000800

08000eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	2314      	movs	r3, #20
 8000ec8:	001a      	movs	r2, r3
 8000eca:	2100      	movs	r1, #0
 8000ecc:	f002 ff16 	bl	8003cfc <memset>
  if(hi2c->Instance==I2C1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_I2C_MspInit+0x80>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12a      	bne.n	8000f30 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ef2:	210c      	movs	r1, #12
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	22c0      	movs	r2, #192	; 0xc0
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2212      	movs	r2, #18
 8000f00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2201      	movs	r2, #1
 8000f06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2206      	movs	r2, #6
 8000f12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	187a      	adds	r2, r7, r1
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 fc7d 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0389      	lsls	r1, r1, #14
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b008      	add	sp, #32
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	230c      	movs	r3, #12
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2314      	movs	r3, #20
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f002 fed2 	bl	8003cfc <memset>
  if(hspi->Instance==SPI1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <HAL_SPI_MspInit+0x80>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d129      	bne.n	8000fb6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0149      	lsls	r1, r1, #5
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2201      	movs	r2, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f88:	210c      	movs	r1, #12
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	22e0      	movs	r2, #224	; 0xe0
 8000f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2202      	movs	r2, #2
 8000f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	187a      	adds	r2, r7, r1
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fc33 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b008      	add	sp, #32
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	40013000 	.word	0x40013000
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	2314      	movs	r3, #20
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f002 fe8e 	bl	8003cfc <memset>
  if(huart->Instance==USART2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d129      	bne.n	800103e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0x84>)
 8000fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_MspInit+0x84>)
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	0289      	lsls	r1, r1, #10
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0x84>)
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_UART_MspInit+0x84>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x84>)
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001010:	210c      	movs	r1, #12
 8001012:	187b      	adds	r3, r7, r1
 8001014:	220c      	movs	r2, #12
 8001016:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2202      	movs	r2, #2
 800101c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2203      	movs	r2, #3
 8001028:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2204      	movs	r2, #4
 800102e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	187a      	adds	r2, r7, r1
 8001032:	23a0      	movs	r3, #160	; 0xa0
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	0011      	movs	r1, r2
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fbef 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b008      	add	sp, #32
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8b6 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <SystemInit+0x64>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <SystemInit+0x64>)
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	0049      	lsls	r1, r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <SystemInit+0x64>)
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SystemInit+0x64>)
 800109c:	4913      	ldr	r1, [pc, #76]	; (80010ec <SystemInit+0x68>)
 800109e:	400a      	ands	r2, r1
 80010a0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <SystemInit+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemInit+0x64>)
 80010a8:	4911      	ldr	r1, [pc, #68]	; (80010f0 <SystemInit+0x6c>)
 80010aa:	400a      	ands	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <SystemInit+0x64>)
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <SystemInit+0x64>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	438a      	bics	r2, r1
 80010b8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <SystemInit+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <SystemInit+0x64>)
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <SystemInit+0x70>)
 80010c2:	400a      	ands	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <SystemInit+0x64>)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <SystemInit+0x64>)
 80010cc:	490a      	ldr	r1, [pc, #40]	; (80010f8 <SystemInit+0x74>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SystemInit+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <SystemInit+0x78>)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	0512      	lsls	r2, r2, #20
 80010de:	609a      	str	r2, [r3, #8]
#endif
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40021000 	.word	0x40021000
 80010ec:	88ff400c 	.word	0x88ff400c
 80010f0:	fef6fff6 	.word	0xfef6fff6
 80010f4:	fffbffff 	.word	0xfffbffff
 80010f8:	ff02ffff 	.word	0xff02ffff
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001102:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001106:	e003      	b.n	8001110 <LoopCopyDataInit>

08001108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800110a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800110c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800110e:	3104      	adds	r1, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001118:	d3f6      	bcc.n	8001108 <CopyDataInit>
  ldr  r2, =_sbss
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <LoopForever+0x12>)
  b  LoopFillZerobss
 800111c:	e002      	b.n	8001124 <LoopFillZerobss>

0800111e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800111e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001120:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001122:	3204      	adds	r2, #4

08001124 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <LoopForever+0x16>)
  cmp  r2, r3
 8001126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001128:	d3f9      	bcc.n	800111e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800112a:	f7ff ffab 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112e:	f002 fdc1 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fb01 	bl	8000738 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
   ldr   r0, =_estack
 8001138:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800113c:	08003df0 	.word	0x08003df0
  ldr  r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001144:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001148:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800114c:	200001ac 	.word	0x200001ac

08001150 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_COMP_IRQHandler>
	...

08001154 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x3c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Init+0x3c>)
 8001166:	2140      	movs	r1, #64	; 0x40
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f811 	bl	8001194 <HAL_InitTick>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d003      	beq.n	800117e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e001      	b.n	8001182 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117e:	f7ff fe49 	bl	8000e14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_InitTick+0x50>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	23fa      	movs	r3, #250	; 0xfa
 80011aa:	0099      	lsls	r1, r3, #2
 80011ac:	0010      	movs	r0, r2
 80011ae:	f7fe ffab 	bl	8000108 <__udivsi3>
 80011b2:	0003      	movs	r3, r0
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fb24 	bl	8001802 <HAL_SYSTICK_Config>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d004      	beq.n	80011c8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80011be:	230f      	movs	r3, #15
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e006      	b.n	80011d6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	2301      	movs	r3, #1
 80011cc:	425b      	negs	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fb01 	bl	80017d8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80011d6:	230f      	movs	r3, #15
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b004      	add	sp, #16
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  uwTick++;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_IncTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_IncTick+0x14>)
 80011f4:	601a      	str	r2, [r3, #0]
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200001a8 	.word	0x200001a8

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <HAL_GetTick+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200001a8 	.word	0x200001a8

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff fff0 	bl	8001200 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	d002      	beq.n	8001234 <HAL_Delay+0x20>
  {
    wait++;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	f7ff ffe3 	bl	8001200 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	429a      	cmp	r2, r3
 8001244:	d8f7      	bhi.n	8001236 <HAL_Delay+0x22>
  {
  }
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e159      	b.n	8001516 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10a      	bne.n	8001280 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2250      	movs	r2, #80	; 0x50
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff fdde 	bl	8000e3c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001284:	2210      	movs	r2, #16
 8001286:	4013      	ands	r3, r2
 8001288:	2b10      	cmp	r3, #16
 800128a:	d005      	beq.n	8001298 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2204      	movs	r2, #4
 8001294:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001296:	d00b      	beq.n	80012b0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129c:	2210      	movs	r2, #16
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2250      	movs	r2, #80	; 0x50
 80012a8:	2100      	movs	r1, #0
 80012aa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e132      	b.n	8001516 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b4:	4a9a      	ldr	r2, [pc, #616]	; (8001520 <HAL_ADC_Init+0x2d0>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	2202      	movs	r2, #2
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2203      	movs	r2, #3
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_ADC_Init+0x90>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_Init+0x90>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_ADC_Init+0x92>
 80012e0:	2300      	movs	r3, #0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d149      	bne.n	800137a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	23c0      	movs	r3, #192	; 0xc0
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d00b      	beq.n	800130a <HAL_ADC_Init+0xba>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d005      	beq.n	800130a <HAL_ADC_Init+0xba>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	429a      	cmp	r2, r3
 8001308:	d111      	bne.n	800132e <HAL_ADC_Init+0xde>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	0892      	lsrs	r2, r2, #2
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6919      	ldr	r1, [r3, #16]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	e014      	b.n	8001358 <HAL_ADC_Init+0x108>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	0892      	lsrs	r2, r2, #2
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	4b79      	ldr	r3, [pc, #484]	; (8001524 <HAL_ADC_Init+0x2d4>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b78      	ldr	r3, [pc, #480]	; (8001524 <HAL_ADC_Init+0x2d4>)
 8001344:	4978      	ldr	r1, [pc, #480]	; (8001528 <HAL_ADC_Init+0x2d8>)
 8001346:	400a      	ands	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_ADC_Init+0x2d4>)
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4b74      	ldr	r3, [pc, #464]	; (8001524 <HAL_ADC_Init+0x2d4>)
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2118      	movs	r1, #24
 8001364:	438a      	bics	r2, r1
 8001366:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68d9      	ldr	r1, [r3, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800137a:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <HAL_ADC_Init+0x2d4>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b69      	ldr	r3, [pc, #420]	; (8001524 <HAL_ADC_Init+0x2d4>)
 8001380:	496a      	ldr	r1, [pc, #424]	; (800152c <HAL_ADC_Init+0x2dc>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001386:	4b67      	ldr	r3, [pc, #412]	; (8001524 <HAL_ADC_Init+0x2d4>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138e:	065a      	lsls	r2, r3, #25
 8001390:	4b64      	ldr	r3, [pc, #400]	; (8001524 <HAL_ADC_Init+0x2d4>)
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	055b      	lsls	r3, r3, #21
 80013a0:	4013      	ands	r3, r2
 80013a2:	d108      	bne.n	80013b6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	0549      	lsls	r1, r1, #21
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	495b      	ldr	r1, [pc, #364]	; (8001530 <HAL_ADC_Init+0x2e0>)
 80013c2:	400a      	ands	r2, r1
 80013c4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68d9      	ldr	r1, [r3, #12]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d101      	bne.n	80013dc <HAL_ADC_Init+0x18c>
 80013d8:	2304      	movs	r3, #4
 80013da:	e000      	b.n	80013de <HAL_ADC_Init+0x18e>
 80013dc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013de:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2020      	movs	r0, #32
 80013e4:	5c1b      	ldrb	r3, [r3, r0]
 80013e6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80013e8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	202c      	movs	r0, #44	; 0x2c
 80013ee:	5c1b      	ldrb	r3, [r3, r0]
 80013f0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013f2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80013f8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001400:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001408:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001416:	23c2      	movs	r3, #194	; 0xc2
 8001418:	33ff      	adds	r3, #255	; 0xff
 800141a:	429a      	cmp	r2, r3
 800141c:	d00b      	beq.n	8001436 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2221      	movs	r2, #33	; 0x21
 800143a:	5c9b      	ldrb	r3, [r3, r2]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d11a      	bne.n	8001476 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	5c9b      	ldrb	r3, [r3, r2]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0249      	lsls	r1, r1, #9
 8001458:	430a      	orrs	r2, r1
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	e00b      	b.n	8001476 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001462:	2220      	movs	r2, #32
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	2201      	movs	r2, #1
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147a:	2b01      	cmp	r3, #1
 800147c:	d11f      	bne.n	80014be <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	492a      	ldr	r1, [pc, #168]	; (8001534 <HAL_ADC_Init+0x2e4>)
 800148a:	400a      	ands	r2, r1
 800148c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6919      	ldr	r1, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800149c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80014a2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	e00e      	b.n	80014dc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2101      	movs	r1, #1
 80014d8:	438a      	bics	r2, r1
 80014da:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2107      	movs	r1, #7
 80014e8:	438a      	bics	r2, r1
 80014ea:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6959      	ldr	r1, [r3, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	2203      	movs	r2, #3
 800150a:	4393      	bics	r3, r2
 800150c:	2201      	movs	r2, #1
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	fffffefd 	.word	0xfffffefd
 8001524:	40012708 	.word	0x40012708
 8001528:	ffc3ffff 	.word	0xffc3ffff
 800152c:	fdffffff 	.word	0xfdffffff
 8001530:	fffe0219 	.word	0xfffe0219
 8001534:	fffffc03 	.word	0xfffffc03

08001538 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2250      	movs	r2, #80	; 0x50
 8001546:	5c9b      	ldrb	r3, [r3, r2]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x18>
 800154c:	2302      	movs	r3, #2
 800154e:	e085      	b.n	800165c <HAL_ADC_ConfigChannel+0x124>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2250      	movs	r2, #80	; 0x50
 8001554:	2101      	movs	r1, #1
 8001556:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2204      	movs	r2, #4
 8001560:	4013      	ands	r3, r2
 8001562:	d00b      	beq.n	800157c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2220      	movs	r2, #32
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2250      	movs	r2, #80	; 0x50
 8001574:	2100      	movs	r1, #0
 8001576:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e06f      	b.n	800165c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_ADC_ConfigChannel+0x12c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d035      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	035b      	lsls	r3, r3, #13
 8001592:	0b5a      	lsrs	r2, r3, #13
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	02db      	lsls	r3, r3, #11
 80015a4:	4013      	ands	r3, r2
 80015a6:	d009      	beq.n	80015bc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0409      	lsls	r1, r1, #16
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f000 f85e 	bl	8001678 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	4013      	ands	r3, r2
 80015c6:	d006      	beq.n	80015d6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	03c9      	lsls	r1, r1, #15
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	4013      	ands	r3, r2
 80015e0:	d037      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0449      	lsls	r1, r1, #17
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e02f      	b.n	8001652 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	035b      	lsls	r3, r3, #13
 80015fe:	0b5b      	lsrs	r3, r3, #13
 8001600:	43d9      	mvns	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	02db      	lsls	r3, r3, #11
 8001612:	4013      	ands	r3, r2
 8001614:	d005      	beq.n	8001622 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 800161c:	4913      	ldr	r1, [pc, #76]	; (800166c <HAL_ADC_ConfigChannel+0x134>)
 800161e:	400a      	ands	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	029b      	lsls	r3, r3, #10
 800162a:	4013      	ands	r3, r2
 800162c:	d005      	beq.n	800163a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 8001634:	490e      	ldr	r1, [pc, #56]	; (8001670 <HAL_ADC_ConfigChannel+0x138>)
 8001636:	400a      	ands	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	4013      	ands	r3, r2
 8001644:	d005      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_ADC_ConfigChannel+0x130>)
 800164c:	4909      	ldr	r1, [pc, #36]	; (8001674 <HAL_ADC_ConfigChannel+0x13c>)
 800164e:	400a      	ands	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2250      	movs	r2, #80	; 0x50
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}
 8001664:	00001001 	.word	0x00001001
 8001668:	40012708 	.word	0x40012708
 800166c:	ff7fffff 	.word	0xff7fffff
 8001670:	ffbfffff 	.word	0xffbfffff
 8001674:	feffffff 	.word	0xfeffffff

08001678 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <ADC_DelayMicroSecond+0x34>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	490a      	ldr	r1, [pc, #40]	; (80016b0 <ADC_DelayMicroSecond+0x38>)
 8001686:	0018      	movs	r0, r3
 8001688:	f7fe fd3e 	bl	8000108 <__udivsi3>
 800168c:	0003      	movs	r3, r0
 800168e:	001a      	movs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4353      	muls	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001696:	e002      	b.n	800169e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3b01      	subs	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <ADC_DelayMicroSecond+0x20>
  } 
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b004      	add	sp, #16
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000004 	.word	0x20000004
 80016b0:	000f4240 	.word	0x000f4240

080016b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0002      	movs	r2, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b7f      	cmp	r3, #127	; 0x7f
 80016c8:	d932      	bls.n	8001730 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <NVIC_SetPriority+0xd4>)
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	0019      	movs	r1, r3
 80016d2:	230f      	movs	r3, #15
 80016d4:	400b      	ands	r3, r1
 80016d6:	3b08      	subs	r3, #8
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3306      	adds	r3, #6
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	18d3      	adds	r3, r2, r3
 80016e0:	3304      	adds	r3, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	1dfa      	adds	r2, r7, #7
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	0011      	movs	r1, r2
 80016ea:	2203      	movs	r2, #3
 80016ec:	400a      	ands	r2, r1
 80016ee:	00d2      	lsls	r2, r2, #3
 80016f0:	21ff      	movs	r1, #255	; 0xff
 80016f2:	4091      	lsls	r1, r2
 80016f4:	000a      	movs	r2, r1
 80016f6:	43d2      	mvns	r2, r2
 80016f8:	401a      	ands	r2, r3
 80016fa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	019b      	lsls	r3, r3, #6
 8001700:	22ff      	movs	r2, #255	; 0xff
 8001702:	401a      	ands	r2, r3
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	0018      	movs	r0, r3
 800170a:	2303      	movs	r3, #3
 800170c:	4003      	ands	r3, r0
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001712:	481d      	ldr	r0, [pc, #116]	; (8001788 <NVIC_SetPriority+0xd4>)
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	001c      	movs	r4, r3
 800171a:	230f      	movs	r3, #15
 800171c:	4023      	ands	r3, r4
 800171e:	3b08      	subs	r3, #8
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	430a      	orrs	r2, r1
 8001724:	3306      	adds	r3, #6
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	18c3      	adds	r3, r0, r3
 800172a:	3304      	adds	r3, #4
 800172c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800172e:	e027      	b.n	8001780 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <NVIC_SetPriority+0xd8>)
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b25b      	sxtb	r3, r3
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	33c0      	adds	r3, #192	; 0xc0
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	589b      	ldr	r3, [r3, r2]
 8001740:	1dfa      	adds	r2, r7, #7
 8001742:	7812      	ldrb	r2, [r2, #0]
 8001744:	0011      	movs	r1, r2
 8001746:	2203      	movs	r2, #3
 8001748:	400a      	ands	r2, r1
 800174a:	00d2      	lsls	r2, r2, #3
 800174c:	21ff      	movs	r1, #255	; 0xff
 800174e:	4091      	lsls	r1, r2
 8001750:	000a      	movs	r2, r1
 8001752:	43d2      	mvns	r2, r2
 8001754:	401a      	ands	r2, r3
 8001756:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	019b      	lsls	r3, r3, #6
 800175c:	22ff      	movs	r2, #255	; 0xff
 800175e:	401a      	ands	r2, r3
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	0018      	movs	r0, r3
 8001766:	2303      	movs	r3, #3
 8001768:	4003      	ands	r3, r0
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <NVIC_SetPriority+0xd8>)
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b25b      	sxtb	r3, r3
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	430a      	orrs	r2, r1
 800177a:	33c0      	adds	r3, #192	; 0xc0
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	501a      	str	r2, [r3, r0]
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b003      	add	sp, #12
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	e000e100 	.word	0xe000e100

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <SysTick_Config+0x40>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e010      	b.n	80017c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <SysTick_Config+0x44>)
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	3a01      	subs	r2, #1
 80017ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	2301      	movs	r3, #1
 80017b0:	425b      	negs	r3, r3
 80017b2:	2103      	movs	r1, #3
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff ff7d 	bl	80016b4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <SysTick_Config+0x44>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x44>)
 80017c2:	2207      	movs	r2, #7
 80017c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	00ffffff 	.word	0x00ffffff
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	210f      	movs	r1, #15
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	1c02      	adds	r2, r0, #0
 80017e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	0011      	movs	r1, r2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <NVIC_SetPriority>
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff ffbf 	bl	8001790 <SysTick_Config>
 8001812:	0003      	movs	r3, r0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001832:	e155      	b.n	8001ae0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4091      	lsls	r1, r2
 800183e:	000a      	movs	r2, r1
 8001840:	4013      	ands	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d100      	bne.n	800184c <HAL_GPIO_Init+0x30>
 800184a:	e146      	b.n	8001ada <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x40>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b12      	cmp	r3, #18
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	58d3      	ldr	r3, [r2, r3]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2207      	movs	r2, #7
 800186e:	4013      	ands	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	409a      	lsls	r2, r3
 8001876:	0013      	movs	r3, r2
 8001878:	43da      	mvns	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2107      	movs	r1, #7
 8001888:	400b      	ands	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	409a      	lsls	r2, r3
 800188e:	0013      	movs	r3, r2
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d00b      	beq.n	80018c4 <HAL_GPIO_Init+0xa8>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b8:	2b11      	cmp	r3, #17
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b12      	cmp	r3, #18
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	409a      	lsls	r2, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	43da      	mvns	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	409a      	lsls	r2, r3
 80018e6:	0013      	movs	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	43da      	mvns	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	2201      	movs	r2, #1
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	43da      	mvns	r2, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	401a      	ands	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	055b      	lsls	r3, r3, #21
 8001992:	4013      	ands	r3, r2
 8001994:	d100      	bne.n	8001998 <HAL_GPIO_Init+0x17c>
 8001996:	e0a0      	b.n	8001ada <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001998:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 800199a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199c:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80019a4:	4a55      	ldr	r2, [pc, #340]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	589b      	ldr	r3, [r3, r2]
 80019b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2203      	movs	r2, #3
 80019b6:	4013      	ands	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	409a      	lsls	r2, r3
 80019be:	0013      	movs	r3, r2
 80019c0:	43da      	mvns	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	23a0      	movs	r3, #160	; 0xa0
 80019cc:	05db      	lsls	r3, r3, #23
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d01f      	beq.n	8001a12 <HAL_GPIO_Init+0x1f6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x1f2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x1ee>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x1ea>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a47      	ldr	r2, [pc, #284]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x1e6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a46      	ldr	r2, [pc, #280]	; (8001b10 <HAL_GPIO_Init+0x2f4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e00a      	b.n	8001a14 <HAL_GPIO_Init+0x1f8>
 80019fe:	2306      	movs	r3, #6
 8001a00:	e008      	b.n	8001a14 <HAL_GPIO_Init+0x1f8>
 8001a02:	2304      	movs	r3, #4
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x1f8>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e004      	b.n	8001a14 <HAL_GPIO_Init+0x1f8>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x1f8>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x1f8>
 8001a12:	2300      	movs	r3, #0
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	2103      	movs	r1, #3
 8001a18:	400a      	ands	r2, r1
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a24:	4935      	ldr	r1, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43da      	mvns	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	4013      	ands	r3, r2
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	035b      	lsls	r3, r3, #13
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	039b      	lsls	r3, r3, #14
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	40da      	lsrs	r2, r3
 8001ae8:	1e13      	subs	r3, r2, #0
 8001aea:	d000      	beq.n	8001aee <HAL_GPIO_Init+0x2d2>
 8001aec:	e6a2      	b.n	8001834 <HAL_GPIO_Init+0x18>
  }
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b006      	add	sp, #24
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	50000400 	.word	0x50000400
 8001b04:	50000800 	.word	0x50000800
 8001b08:	50000c00 	.word	0x50000c00
 8001b0c:	50001000 	.word	0x50001000
 8001b10:	50001c00 	.word	0x50001c00
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	0008      	movs	r0, r1
 8001b22:	0011      	movs	r1, r2
 8001b24:	1cbb      	adds	r3, r7, #2
 8001b26:	1c02      	adds	r2, r0, #0
 8001b28:	801a      	strh	r2, [r3, #0]
 8001b2a:	1c7b      	adds	r3, r7, #1
 8001b2c:	1c0a      	adds	r2, r1, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001b30:	1c7b      	adds	r3, r7, #1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b38:	1cbb      	adds	r3, r7, #2
 8001b3a:	881a      	ldrh	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b42:	1cbb      	adds	r3, r7, #2
 8001b44:	881a      	ldrh	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	1cbb      	adds	r3, r7, #2
 8001b5e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	1cbb      	adds	r3, r7, #2
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	405a      	eors	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	615a      	str	r2, [r3, #20]
}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b002      	add	sp, #8
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e082      	b.n	8001c90 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2241      	movs	r2, #65	; 0x41
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff f989 	bl	8000eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2241      	movs	r2, #65	; 0x41
 8001baa:	2124      	movs	r1, #36	; 0x24
 8001bac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438a      	bics	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4934      	ldr	r1, [pc, #208]	; (8001c98 <HAL_I2C_Init+0x120>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4931      	ldr	r1, [pc, #196]	; (8001c9c <HAL_I2C_Init+0x124>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d108      	bne.n	8001bf6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	0209      	lsls	r1, r1, #8
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e007      	b.n	8001c06 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2184      	movs	r1, #132	; 0x84
 8001c00:	0209      	lsls	r1, r1, #8
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d104      	bne.n	8001c18 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	491f      	ldr	r1, [pc, #124]	; (8001ca0 <HAL_I2C_Init+0x128>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	491a      	ldr	r1, [pc, #104]	; (8001c9c <HAL_I2C_Init+0x124>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	0011      	movs	r1, r2
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	021a      	lsls	r2, r3, #8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69d9      	ldr	r1, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2241      	movs	r2, #65	; 0x41
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2242      	movs	r2, #66	; 0x42
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	f0ffffff 	.word	0xf0ffffff
 8001c9c:	ffff7fff 	.word	0xffff7fff
 8001ca0:	02008000 	.word	0x02008000

08001ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2241      	movs	r2, #65	; 0x41
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d138      	bne.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e032      	b.n	8001d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	2124      	movs	r1, #36	; 0x24
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4911      	ldr	r1, [pc, #68]	; (8001d38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2241      	movs	r2, #65	; 0x41
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	2100      	movs	r1, #0
 8001d26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
  }
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	ffffefff 	.word	0xffffefff

08001d3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2241      	movs	r2, #65	; 0x41
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d139      	bne.n	8001dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e033      	b.n	8001dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2241      	movs	r2, #65	; 0x41
 8001d6c:	2124      	movs	r1, #36	; 0x24
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2241      	movs	r2, #65	; 0x41
 8001db6:	2120      	movs	r1, #32
 8001db8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
  }
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b004      	add	sp, #16
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	fffff0ff 	.word	0xfffff0ff

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f000 fbbc 	bl	8002560 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de8:	4bc8      	ldr	r3, [pc, #800]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	220c      	movs	r2, #12
 8001dee:	4013      	ands	r3, r2
 8001df0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df2:	4bc6      	ldr	r3, [pc, #792]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	d100      	bne.n	8001e0a <HAL_RCC_OscConfig+0x36>
 8001e08:	e07e      	b.n	8001f08 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d007      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d112      	bne.n	8001e3c <HAL_RCC_OscConfig+0x68>
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	025b      	lsls	r3, r3, #9
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d10d      	bne.n	8001e3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	4bba      	ldr	r3, [pc, #744]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	029b      	lsls	r3, r3, #10
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d100      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5a>
 8001e2c:	e06b      	b.n	8001f06 <HAL_RCC_OscConfig+0x132>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d167      	bne.n	8001f06 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f000 fb92 	bl	8002560 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x84>
 8001e48:	4bb0      	ldr	r3, [pc, #704]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4baf      	ldr	r3, [pc, #700]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	0249      	lsls	r1, r1, #9
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e027      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	23a0      	movs	r3, #160	; 0xa0
 8001e5e:	02db      	lsls	r3, r3, #11
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d10e      	bne.n	8001e82 <HAL_RCC_OscConfig+0xae>
 8001e64:	4ba9      	ldr	r3, [pc, #676]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4ba8      	ldr	r3, [pc, #672]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	02c9      	lsls	r1, r1, #11
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	4ba6      	ldr	r3, [pc, #664]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4ba5      	ldr	r3, [pc, #660]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0249      	lsls	r1, r1, #9
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e012      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e82:	4ba2      	ldr	r3, [pc, #648]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4ba1      	ldr	r3, [pc, #644]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e88:	49a1      	ldr	r1, [pc, #644]	; (8002110 <HAL_RCC_OscConfig+0x33c>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4b9f      	ldr	r3, [pc, #636]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	025b      	lsls	r3, r3, #9
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4b9b      	ldr	r3, [pc, #620]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b9a      	ldr	r3, [pc, #616]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001ea2:	499c      	ldr	r1, [pc, #624]	; (8002114 <HAL_RCC_OscConfig+0x340>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f9a6 	bl	8001200 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb8:	e009      	b.n	8001ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eba:	f7ff f9a1 	bl	8001200 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	; 0x64
 8001ec6:	d902      	bls.n	8001ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f000 fb49 	bl	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ece:	4b8f      	ldr	r3, [pc, #572]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	029b      	lsls	r3, r3, #10
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d0ef      	beq.n	8001eba <HAL_RCC_OscConfig+0xe6>
 8001eda:	e015      	b.n	8001f08 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f990 	bl	8001200 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee6:	f7ff f98b 	bl	8001200 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e333      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ef8:	4b84      	ldr	r3, [pc, #528]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	4013      	ands	r3, r2
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x112>
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d100      	bne.n	8001f14 <HAL_RCC_OscConfig+0x140>
 8001f12:	e098      	b.n	8002046 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f22:	4b7a      	ldr	r3, [pc, #488]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b79      	ldr	r3, [pc, #484]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f28:	2120      	movs	r1, #32
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	2220      	movs	r2, #32
 8001f32:	4393      	bics	r3, r2
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d13d      	bne.n	8001fbe <HAL_RCC_OscConfig+0x1ea>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13a      	bne.n	8001fbe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f48:	4b70      	ldr	r3, [pc, #448]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_RCC_OscConfig+0x188>
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e301      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b6b      	ldr	r3, [pc, #428]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a6d      	ldr	r2, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x344>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	021a      	lsls	r2, r3, #8
 8001f6c:	4b67      	ldr	r3, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f72:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2209      	movs	r2, #9
 8001f78:	4393      	bics	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f84:	f000 fc20 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8001f88:	0001      	movs	r1, r0
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	220f      	movs	r2, #15
 8001f92:	4013      	ands	r3, r2
 8001f94:	4a61      	ldr	r2, [pc, #388]	; (800211c <HAL_RCC_OscConfig+0x348>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	000a      	movs	r2, r1
 8001f9a:	40da      	lsrs	r2, r3
 8001f9c:	4b60      	ldr	r3, [pc, #384]	; (8002120 <HAL_RCC_OscConfig+0x34c>)
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001fa0:	2513      	movs	r5, #19
 8001fa2:	197c      	adds	r4, r7, r5
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff f8f5 	bl	8001194 <HAL_InitTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fae:	197b      	adds	r3, r7, r5
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d047      	beq.n	8002046 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001fb6:	2313      	movs	r3, #19
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	e2d0      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d027      	beq.n	8002014 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fc4:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2209      	movs	r2, #9
 8001fca:	4393      	bics	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	4b4f      	ldr	r3, [pc, #316]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff f913 	bl	8001200 <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff f90e 	bl	8001200 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e2b6      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff2:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f1      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a45      	ldr	r2, [pc, #276]	; (8002118 <HAL_RCC_OscConfig+0x344>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	021a      	lsls	r2, r3, #8
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_OscConfig+0x338>)
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	e018      	b.n	8002046 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002014:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <HAL_RCC_OscConfig+0x338>)
 800201a:	2101      	movs	r1, #1
 800201c:	438a      	bics	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff f8ee 	bl	8001200 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202a:	f7ff f8e9 	bl	8001200 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e291      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800203c:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCC_OscConfig+0x338>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2204      	movs	r2, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d1f1      	bne.n	800202a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2210      	movs	r2, #16
 800204c:	4013      	ands	r3, r2
 800204e:	d100      	bne.n	8002052 <HAL_RCC_OscConfig+0x27e>
 8002050:	e09f      	b.n	8002192 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d13f      	bne.n	80020d8 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <HAL_RCC_OscConfig+0x338>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4013      	ands	r3, r2
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x29c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e277      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <HAL_RCC_OscConfig+0x350>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	0a19      	lsrs	r1, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	061a      	lsls	r2, r3, #24
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_OscConfig+0x338>)
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	0b5b      	lsrs	r3, r3, #13
 800209e:	3301      	adds	r3, #1
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	0212      	lsls	r2, r2, #8
 80020a4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	210f      	movs	r1, #15
 80020ae:	400b      	ands	r3, r1
 80020b0:	491a      	ldr	r1, [pc, #104]	; (800211c <HAL_RCC_OscConfig+0x348>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x34c>)
 80020b8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80020ba:	2513      	movs	r5, #19
 80020bc:	197c      	adds	r4, r7, r5
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff f868 	bl	8001194 <HAL_InitTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020c8:	197b      	adds	r3, r7, r5
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d060      	beq.n	8002192 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80020d0:	2313      	movs	r3, #19
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	e243      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03e      	beq.n	800215e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	0049      	lsls	r1, r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff f887 	bl	8001200 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020f6:	e017      	b.n	8002128 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f8:	f7ff f882 	bl	8001200 <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d910      	bls.n	8002128 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e22a      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	40021000 	.word	0x40021000
 8002110:	fffeffff 	.word	0xfffeffff
 8002114:	fffbffff 	.word	0xfffbffff
 8002118:	ffffe0ff 	.word	0xffffe0ff
 800211c:	08003d74 	.word	0x08003d74
 8002120:	20000004 	.word	0x20000004
 8002124:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002128:	4bc6      	ldr	r3, [pc, #792]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d0e1      	beq.n	80020f8 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002134:	4bc3      	ldr	r3, [pc, #780]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4ac3      	ldr	r2, [pc, #780]	; (8002448 <HAL_RCC_OscConfig+0x674>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002142:	4bc0      	ldr	r3, [pc, #768]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002148:	4bbe      	ldr	r3, [pc, #760]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	0a19      	lsrs	r1, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	061a      	lsls	r2, r3, #24
 8002156:	4bbb      	ldr	r3, [pc, #748]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002158:	430a      	orrs	r2, r1
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	e019      	b.n	8002192 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800215e:	4bb9      	ldr	r3, [pc, #740]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4bb8      	ldr	r3, [pc, #736]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002164:	49b9      	ldr	r1, [pc, #740]	; (800244c <HAL_RCC_OscConfig+0x678>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff f849 	bl	8001200 <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002174:	f7ff f844 	bl	8001200 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1ec      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002186:	4baf      	ldr	r3, [pc, #700]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2208      	movs	r2, #8
 8002198:	4013      	ands	r3, r2
 800219a:	d036      	beq.n	800220a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d019      	beq.n	80021d8 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a4:	4ba7      	ldr	r3, [pc, #668]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80021a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a8:	4ba6      	ldr	r3, [pc, #664]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7ff f826 	bl	8001200 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ba:	f7ff f821 	bl	8001200 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1c9      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021cc:	4b9d      	ldr	r3, [pc, #628]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d0f1      	beq.n	80021ba <HAL_RCC_OscConfig+0x3e6>
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d8:	4b9a      	ldr	r3, [pc, #616]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80021da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021dc:	4b99      	ldr	r3, [pc, #612]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff f80c 	bl	8001200 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ee:	f7ff f807 	bl	8001200 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1af      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002200:	4b90      	ldr	r3, [pc, #576]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d1f1      	bne.n	80021ee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2204      	movs	r2, #4
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x442>
 8002214:	e0af      	b.n	8002376 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2323      	movs	r3, #35	; 0x23
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	055b      	lsls	r3, r3, #21
 8002226:	4013      	ands	r3, r2
 8002228:	d10a      	bne.n	8002240 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b86      	ldr	r3, [pc, #536]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800222c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800222e:	4b85      	ldr	r3, [pc, #532]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0549      	lsls	r1, r1, #21
 8002234:	430a      	orrs	r2, r1
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002238:	2323      	movs	r3, #35	; 0x23
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b83      	ldr	r3, [pc, #524]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4013      	ands	r3, r2
 800224a:	d11a      	bne.n	8002282 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224c:	4b80      	ldr	r3, [pc, #512]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b7f      	ldr	r3, [pc, #508]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0049      	lsls	r1, r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7fe ffd1 	bl	8001200 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002264:	f7fe ffcc 	bl	8001200 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e174      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x67c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4013      	ands	r3, r2
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	429a      	cmp	r2, r3
 800228c:	d107      	bne.n	800229e <HAL_RCC_OscConfig+0x4ca>
 800228e:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002292:	4b6c      	ldr	r3, [pc, #432]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0049      	lsls	r1, r1, #1
 8002298:	430a      	orrs	r2, r1
 800229a:	651a      	str	r2, [r3, #80]	; 0x50
 800229c:	e031      	b.n	8002302 <HAL_RCC_OscConfig+0x52e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
 80022a6:	4b67      	ldr	r3, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022aa:	4b66      	ldr	r3, [pc, #408]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022ac:	4967      	ldr	r1, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x678>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	651a      	str	r2, [r3, #80]	; 0x50
 80022b2:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022b8:	4966      	ldr	r1, [pc, #408]	; (8002454 <HAL_RCC_OscConfig+0x680>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	651a      	str	r2, [r3, #80]	; 0x50
 80022be:	e020      	b.n	8002302 <HAL_RCC_OscConfig+0x52e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	23a0      	movs	r3, #160	; 0xa0
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d10e      	bne.n	80022ea <HAL_RCC_OscConfig+0x516>
 80022cc:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d0:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	00c9      	lsls	r1, r1, #3
 80022d6:	430a      	orrs	r2, r1
 80022d8:	651a      	str	r2, [r3, #80]	; 0x50
 80022da:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022de:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0049      	lsls	r1, r1, #1
 80022e4:	430a      	orrs	r2, r1
 80022e6:	651a      	str	r2, [r3, #80]	; 0x50
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x52e>
 80022ea:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ee:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022f0:	4956      	ldr	r1, [pc, #344]	; (800244c <HAL_RCC_OscConfig+0x678>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fa:	4b52      	ldr	r3, [pc, #328]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80022fc:	4955      	ldr	r1, [pc, #340]	; (8002454 <HAL_RCC_OscConfig+0x680>)
 80022fe:	400a      	ands	r2, r1
 8002300:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe ff79 	bl	8001200 <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002312:	e009      	b.n	8002328 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7fe ff74 	bl	8001200 <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	4a4e      	ldr	r2, [pc, #312]	; (8002458 <HAL_RCC_OscConfig+0x684>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e11b      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800232a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d0ef      	beq.n	8002314 <HAL_RCC_OscConfig+0x540>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe ff63 	bl	8001200 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800233e:	e009      	b.n	8002354 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe ff5e 	bl	8001200 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	4a43      	ldr	r2, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0x684>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e105      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002354:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d1ef      	bne.n	8002340 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002360:	2323      	movs	r3, #35	; 0x23
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800236c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236e:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002370:	493a      	ldr	r1, [pc, #232]	; (800245c <HAL_RCC_OscConfig+0x688>)
 8002372:	400a      	ands	r2, r1
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2220      	movs	r2, #32
 800237c:	4013      	ands	r3, r2
 800237e:	d049      	beq.n	8002414 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d026      	beq.n	80023d6 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800238e:	2101      	movs	r1, #1
 8002390:	430a      	orrs	r2, r1
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800239a:	2101      	movs	r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
 80023a0:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <HAL_RCC_OscConfig+0x68c>)
 80023a2:	6a1a      	ldr	r2, [r3, #32]
 80023a4:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_RCC_OscConfig+0x68c>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0189      	lsls	r1, r1, #6
 80023aa:	430a      	orrs	r2, r1
 80023ac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe ff27 	bl	8001200 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b8:	f7fe ff22 	bl	8001200 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0ca      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d0f1      	beq.n	80023b8 <HAL_RCC_OscConfig+0x5e4>
 80023d4:	e01e      	b.n	8002414 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 80023dc:	2101      	movs	r1, #1
 80023de:	438a      	bics	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <HAL_RCC_OscConfig+0x68c>)
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_RCC_OscConfig+0x68c>)
 80023e8:	491e      	ldr	r1, [pc, #120]	; (8002464 <HAL_RCC_OscConfig+0x690>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe ff07 	bl	8001200 <HAL_GetTick>
 80023f2:	0003      	movs	r3, r0
 80023f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f8:	f7fe ff02 	bl	8001200 <HAL_GetTick>
 80023fc:	0002      	movs	r2, r0
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0aa      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2202      	movs	r2, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d1f1      	bne.n	80023f8 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d100      	bne.n	800241e <HAL_RCC_OscConfig+0x64a>
 800241c:	e09f      	b.n	800255e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d100      	bne.n	8002426 <HAL_RCC_OscConfig+0x652>
 8002424:	e078      	b.n	8002518 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	2b02      	cmp	r3, #2
 800242c:	d159      	bne.n	80024e2 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_RCC_OscConfig+0x670>)
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <HAL_RCC_OscConfig+0x694>)
 8002436:	400a      	ands	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe fee1 	bl	8001200 <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002442:	e01c      	b.n	800247e <HAL_RCC_OscConfig+0x6aa>
 8002444:	40021000 	.word	0x40021000
 8002448:	ffff1fff 	.word	0xffff1fff
 800244c:	fffffeff 	.word	0xfffffeff
 8002450:	40007000 	.word	0x40007000
 8002454:	fffffbff 	.word	0xfffffbff
 8002458:	00001388 	.word	0x00001388
 800245c:	efffffff 	.word	0xefffffff
 8002460:	40010000 	.word	0x40010000
 8002464:	ffffdfff 	.word	0xffffdfff
 8002468:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fec8 	bl	8001200 <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e070      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800247e:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	049b      	lsls	r3, r3, #18
 8002486:	4013      	ands	r3, r2
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a37      	ldr	r2, [pc, #220]	; (800256c <HAL_RCC_OscConfig+0x798>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	431a      	orrs	r2, r3
 80024a4:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0449      	lsls	r1, r1, #17
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fea2 	bl	8001200 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fe9d 	bl	8001200 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e045      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	049b      	lsls	r3, r3, #18
 80024dc:	4013      	ands	r3, r2
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x6ee>
 80024e0:	e03d      	b.n	800255e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 80024e8:	4921      	ldr	r1, [pc, #132]	; (8002570 <HAL_RCC_OscConfig+0x79c>)
 80024ea:	400a      	ands	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fe87 	bl	8001200 <HAL_GetTick>
 80024f2:	0003      	movs	r3, r0
 80024f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fe82 	bl	8001200 <HAL_GetTick>
 80024fc:	0002      	movs	r2, r0
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e02a      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	049b      	lsls	r3, r3, #18
 8002512:	4013      	ands	r3, r2
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x724>
 8002516:	e022      	b.n	800255e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_RCC_OscConfig+0x794>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	401a      	ands	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	429a      	cmp	r2, r3
 8002538:	d10f      	bne.n	800255a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	23f0      	movs	r3, #240	; 0xf0
 800253e:	039b      	lsls	r3, r3, #14
 8002540:	401a      	ands	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d107      	bne.n	800255a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	23c0      	movs	r3, #192	; 0xc0
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	401a      	ands	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b00a      	add	sp, #40	; 0x28
 8002566:	bdb0      	pop	{r4, r5, r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	ff02ffff 	.word	0xff02ffff
 8002570:	feffffff 	.word	0xfeffffff

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e10d      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d911      	bls.n	80025ba <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b85      	ldr	r3, [pc, #532]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	4393      	bics	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	4b82      	ldr	r3, [pc, #520]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0f4      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b7a      	ldr	r3, [pc, #488]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	22f0      	movs	r2, #240	; 0xf0
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b77      	ldr	r3, [pc, #476]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	d100      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x70>
 80025e2:	e089      	b.n	80026f8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d120      	bne.n	800263a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d3      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	049b      	lsls	r3, r3, #18
 800260c:	4013      	ands	r3, r2
 800260e:	d114      	bne.n	800263a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0c7      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800261c:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2204      	movs	r2, #4
 8002622:	4013      	ands	r3, r2
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0bc      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800262a:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0b4      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2203      	movs	r2, #3
 8002640:	4393      	bics	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 800264a:	430a      	orrs	r2, r1
 800264c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264e:	f7fe fdd7 	bl	8001200 <HAL_GetTick>
 8002652:	0003      	movs	r3, r0
 8002654:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d111      	bne.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800265e:	e009      	b.n	8002674 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7fe fdce 	bl	8001200 <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x240>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e097      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002674:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	220c      	movs	r2, #12
 800267a:	4013      	ands	r3, r2
 800267c:	2b08      	cmp	r3, #8
 800267e:	d1ef      	bne.n	8002660 <HAL_RCC_ClockConfig+0xec>
 8002680:	e03a      	b.n	80026f8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d111      	bne.n	80026ae <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268a:	e009      	b.n	80026a0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fdb8 	bl	8001200 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x240>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e081      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a0:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	220c      	movs	r2, #12
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d1ef      	bne.n	800268c <HAL_RCC_ClockConfig+0x118>
 80026ac:	e024      	b.n	80026f8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d11b      	bne.n	80026ee <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b6:	e009      	b.n	80026cc <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe fda2 	bl	8001200 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	4a3c      	ldr	r2, [pc, #240]	; (80027b4 <HAL_RCC_ClockConfig+0x240>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e06b      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	220c      	movs	r2, #12
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d1ef      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x144>
 80026d8:	e00e      	b.n	80026f8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7fe fd91 	bl	8001200 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <HAL_RCC_ClockConfig+0x240>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e05a      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	220c      	movs	r2, #12
 80026f4:	4013      	ands	r3, r2
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d211      	bcs.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4393      	bics	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x238>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e03c      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2204      	movs	r2, #4
 8002730:	4013      	ands	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_RCC_ClockConfig+0x244>)
 800273a:	4013      	ands	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	4013      	ands	r3, r2
 8002750:	d00a      	beq.n	8002768 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_RCC_ClockConfig+0x248>)
 8002758:	4013      	ands	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	00da      	lsls	r2, r3, #3
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002768:	f000 f82e 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 800276c:	0001      	movs	r1, r0
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCC_ClockConfig+0x23c>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	220f      	movs	r2, #15
 8002776:	4013      	ands	r3, r2
 8002778:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_RCC_ClockConfig+0x24c>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	000a      	movs	r2, r1
 800277e:	40da      	lsrs	r2, r3
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_ClockConfig+0x250>)
 8002782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002784:	250b      	movs	r5, #11
 8002786:	197c      	adds	r4, r7, r5
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe fd03 	bl	8001194 <HAL_InitTick>
 800278e:	0003      	movs	r3, r0
 8002790:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002792:	197b      	adds	r3, r7, r5
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800279a:	230b      	movs	r3, #11
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bdb0      	pop	{r4, r5, r7, pc}
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	00001388 	.word	0x00001388
 80027b8:	fffff8ff 	.word	0xfffff8ff
 80027bc:	ffffc7ff 	.word	0xffffc7ff
 80027c0:	08003d74 	.word	0x08003d74
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	220c      	movs	r2, #12
 80027d8:	4013      	ands	r3, r2
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d00e      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x34>
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d00f      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x3a>
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d157      	bne.n	8002896 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027e6:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2210      	movs	r2, #16
 80027ec:	4013      	ands	r3, r2
 80027ee:	d002      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80027f0:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80027f4:	e05d      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027f8:	613b      	str	r3, [r7, #16]
      break;
 80027fa:	e05a      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x100>)
 80027fe:	613b      	str	r3, [r7, #16]
      break;
 8002800:	e057      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	0c9b      	lsrs	r3, r3, #18
 8002806:	220f      	movs	r2, #15
 8002808:	4013      	ands	r3, r2
 800280a:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_RCC_GetSysClockFreq+0x104>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	0d9b      	lsrs	r3, r3, #22
 8002814:	2203      	movs	r2, #3
 8002816:	4013      	ands	r3, r2
 8002818:	3301      	adds	r3, #1
 800281a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	025b      	lsls	r3, r3, #9
 8002824:	4013      	ands	r3, r2
 8002826:	d00f      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	000a      	movs	r2, r1
 800282c:	0152      	lsls	r2, r2, #5
 800282e:	1a52      	subs	r2, r2, r1
 8002830:	0193      	lsls	r3, r2, #6
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	185b      	adds	r3, r3, r1
 8002838:	025b      	lsls	r3, r3, #9
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fd fc63 	bl	8000108 <__udivsi3>
 8002842:	0003      	movs	r3, r0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e023      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2210      	movs	r2, #16
 800284e:	4013      	ands	r3, r2
 8002850:	d00f      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	000a      	movs	r2, r1
 8002856:	0152      	lsls	r2, r2, #5
 8002858:	1a52      	subs	r2, r2, r1
 800285a:	0193      	lsls	r3, r2, #6
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	185b      	adds	r3, r3, r1
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f7fd fc4e 	bl	8000108 <__udivsi3>
 800286c:	0003      	movs	r3, r0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00e      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	000a      	movs	r2, r1
 8002876:	0152      	lsls	r2, r2, #5
 8002878:	1a52      	subs	r2, r2, r1
 800287a:	0193      	lsls	r3, r2, #6
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	185b      	adds	r3, r3, r1
 8002882:	029b      	lsls	r3, r3, #10
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	0018      	movs	r0, r3
 8002888:	f7fd fc3e 	bl	8000108 <__udivsi3>
 800288c:	0003      	movs	r3, r0
 800288e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
      break;
 8002894:	e00d      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0b5b      	lsrs	r3, r3, #13
 800289c:	2207      	movs	r2, #7
 800289e:	4013      	ands	r3, r2
 80028a0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	0212      	lsls	r2, r2, #8
 80028aa:	409a      	lsls	r2, r3
 80028ac:	0013      	movs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      break;
 80028b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028b2:	693b      	ldr	r3, [r7, #16]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	003d0900 	.word	0x003d0900
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	007a1200 	.word	0x007a1200
 80028cc:	08003d8c 	.word	0x08003d8c

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e8:	f7ff fff2 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028ec:	0001      	movs	r1, r0
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	2207      	movs	r2, #7
 80028f6:	4013      	ands	r3, r2
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_RCC_GetPCLK1Freq+0x28>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	40d9      	lsrs	r1, r3
 80028fe:	000b      	movs	r3, r1
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	40021000 	.word	0x40021000
 800290c:	08003d84 	.word	0x08003d84

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffdc 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8002918:	0001      	movs	r1, r0
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	0adb      	lsrs	r3, r3, #11
 8002920:	2207      	movs	r2, #7
 8002922:	4013      	ands	r3, r2
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	40d9      	lsrs	r1, r3
 800292a:	000b      	movs	r3, r1
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	40021000 	.word	0x40021000
 8002938:	08003d84 	.word	0x08003d84

0800293c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2220      	movs	r2, #32
 800294a:	4013      	ands	r3, r2
 800294c:	d106      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	4013      	ands	r3, r2
 8002958:	d100      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800295a:	e0dd      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800295c:	2317      	movs	r3, #23
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002964:	4ba4      	ldr	r3, [pc, #656]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	055b      	lsls	r3, r3, #21
 800296c:	4013      	ands	r3, r2
 800296e:	d10a      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	4ba1      	ldr	r3, [pc, #644]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002974:	4ba0      	ldr	r3, [pc, #640]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	0549      	lsls	r1, r1, #21
 800297a:	430a      	orrs	r2, r1
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800297e:	2317      	movs	r3, #23
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b9d      	ldr	r3, [pc, #628]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4013      	ands	r3, r2
 8002990:	d11a      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b9a      	ldr	r3, [pc, #616]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b99      	ldr	r3, [pc, #612]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0049      	lsls	r1, r1, #1
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fc2e 	bl	8001200 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	e008      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7fe fc29 	bl	8001200 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	d901      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e118      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	4b8f      	ldr	r3, [pc, #572]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80029c8:	4b8b      	ldr	r3, [pc, #556]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	23c0      	movs	r3, #192	; 0xc0
 80029ce:	039b      	lsls	r3, r3, #14
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	23c0      	movs	r3, #192	; 0xc0
 80029da:	039b      	lsls	r3, r3, #14
 80029dc:	4013      	ands	r3, r2
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d107      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	23c0      	movs	r3, #192	; 0xc0
 80029ea:	039b      	lsls	r3, r3, #14
 80029ec:	4013      	ands	r3, r2
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d013      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	23c0      	movs	r3, #192	; 0xc0
 80029fa:	029b      	lsls	r3, r3, #10
 80029fc:	401a      	ands	r2, r3
 80029fe:	23c0      	movs	r3, #192	; 0xc0
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d10a      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a06:	4b7c      	ldr	r3, [pc, #496]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	029b      	lsls	r3, r3, #10
 8002a0e:	401a      	ands	r2, r3
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d101      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0e8      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a1c:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a20:	23c0      	movs	r3, #192	; 0xc0
 8002a22:	029b      	lsls	r3, r3, #10
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d049      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	029b      	lsls	r3, r3, #10
 8002a36:	4013      	ands	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d004      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2220      	movs	r2, #32
 8002a44:	4013      	ands	r3, r2
 8002a46:	d10d      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	23c0      	movs	r3, #192	; 0xc0
 8002a4e:	029b      	lsls	r3, r3, #10
 8002a50:	4013      	ands	r3, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d034      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4013      	ands	r3, r2
 8002a62:	d02e      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a64:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	4a65      	ldr	r2, [pc, #404]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a6e:	4b62      	ldr	r3, [pc, #392]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a72:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0309      	lsls	r1, r1, #12
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7c:	4b5e      	ldr	r3, [pc, #376]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a80:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a82:	4960      	ldr	r1, [pc, #384]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002a88:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d014      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fbb2 	bl	8001200 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa0:	e009      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fe fbad 	bl	8001200 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	4a56      	ldr	r2, [pc, #344]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e09b      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab6:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d0ef      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	23c0      	movs	r3, #192	; 0xc0
 8002ac8:	029b      	lsls	r3, r3, #10
 8002aca:	401a      	ands	r2, r3
 8002acc:	23c0      	movs	r3, #192	; 0xc0
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a4c      	ldr	r2, [pc, #304]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	23c0      	movs	r3, #192	; 0xc0
 8002ae4:	039b      	lsls	r3, r3, #14
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002af0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	23c0      	movs	r3, #192	; 0xc0
 8002af8:	029b      	lsls	r3, r3, #10
 8002afa:	401a      	ands	r2, r3
 8002afc:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002afe:	430a      	orrs	r2, r1
 8002b00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b02:	2317      	movs	r3, #23
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b10:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b12:	493f      	ldr	r1, [pc, #252]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b22:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	2203      	movs	r2, #3
 8002b28:	4393      	bics	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b40:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	220c      	movs	r2, #12
 8002b46:	4393      	bics	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2208      	movs	r2, #8
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002bac:	430a      	orrs	r2, r1
 8002bae:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d009      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002be8:	430a      	orrs	r2, r1
 8002bea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b006      	add	sp, #24
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	fffcffff 	.word	0xfffcffff
 8002c04:	fff7ffff 	.word	0xfff7ffff
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	ffcfffff 	.word	0xffcfffff
 8002c10:	efffffff 	.word	0xefffffff
 8002c14:	fffff3ff 	.word	0xfffff3ff
 8002c18:	ffffcfff 	.word	0xffffcfff
 8002c1c:	fbffffff 	.word	0xfbffffff
 8002c20:	fff3ffff 	.word	0xfff3ffff

08002c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e059      	b.n	8002cea <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2251      	movs	r2, #81	; 0x51
 8002c40:	5c9b      	ldrb	r3, [r3, r2]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2250      	movs	r2, #80	; 0x50
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7fe f974 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2251      	movs	r2, #81	; 0x51
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2140      	movs	r1, #64	; 0x40
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6999      	ldr	r1, [r3, #24]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	400b      	ands	r3, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	0c1b      	lsrs	r3, r3, #16
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4907      	ldr	r1, [pc, #28]	; (8002cf4 <HAL_SPI_Init+0xd0>)
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2251      	movs	r2, #81	; 0x51
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	fffff7ff 	.word	0xfffff7ff

08002cf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	; 0x30
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	001a      	movs	r2, r3
 8002d06:	1cbb      	adds	r3, r7, #2
 8002d08:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d0e:	232b      	movs	r3, #43	; 0x2b
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2250      	movs	r2, #80	; 0x50
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x2c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e1a1      	b.n	8003068 <HAL_SPI_TransmitReceive+0x370>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2250      	movs	r2, #80	; 0x50
 8002d28:	2101      	movs	r1, #1
 8002d2a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d2c:	f7fe fa68 	bl	8001200 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d34:	2023      	movs	r0, #35	; 0x23
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	2151      	movs	r1, #81	; 0x51
 8002d3c:	5c52      	ldrb	r2, [r2, r1]
 8002d3e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d46:	231a      	movs	r3, #26
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	1cba      	adds	r2, r7, #2
 8002d4c:	8812      	ldrh	r2, [r2, #0]
 8002d4e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d012      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x86>
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	2382      	movs	r3, #130	; 0x82
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d108      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x7c>
 8002d6a:	2323      	movs	r3, #35	; 0x23
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d004      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8002d74:	232b      	movs	r3, #43	; 0x2b
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d7c:	e169      	b.n	8003052 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x9a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x9a>
 8002d8a:	1cbb      	adds	r3, r7, #2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8002d92:	232b      	movs	r3, #43	; 0x2b
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d9a:	e15a      	b.n	8003052 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2251      	movs	r2, #81	; 0x51
 8002da0:	5c9b      	ldrb	r3, [r3, r2]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d003      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2251      	movs	r2, #81	; 0x51
 8002dac:	2105      	movs	r1, #5
 8002dae:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1cba      	adds	r2, r7, #2
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1cba      	adds	r2, r7, #2
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1cba      	adds	r2, r7, #2
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1cba      	adds	r2, r7, #2
 8002dde:	8812      	ldrh	r2, [r2, #0]
 8002de0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d007      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d000      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x122>
 8002e18:	e07a      	b.n	8002f10 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x134>
 8002e22:	231a      	movs	r3, #26
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d166      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e50:	e053      	b.n	8002efa <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d11b      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x1a0>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x1a0>
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d113      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d119      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x1e2>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d014      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eda:	f7fe f991 	bl	8001200 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d807      	bhi.n	8002efa <HAL_SPI_TransmitReceive+0x202>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	3301      	adds	r3, #1
 8002eee:	d004      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8002ef0:	232b      	movs	r3, #43	; 0x2b
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ef8:	e0ab      	b.n	8003052 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1a6      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x15a>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1a1      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x15a>
 8002f0e:	e07f      	b.n	8003010 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x22c>
 8002f18:	231a      	movs	r3, #26
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d000      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x22c>
 8002f22:	e06b      	b.n	8002ffc <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	7812      	ldrb	r2, [r2, #0]
 8002f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f4a:	e057      	b.n	8002ffc <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2202      	movs	r2, #2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d11c      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x29c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x29c>
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d114      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d119      	bne.n	8002fd6 <HAL_SPI_TransmitReceive+0x2de>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d014      	beq.n	8002fd6 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fd6:	f7fe f913 	bl	8001200 <HAL_GetTick>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d802      	bhi.n	8002fec <HAL_SPI_TransmitReceive+0x2f4>
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	3301      	adds	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x2fa>
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8002ff2:	232b      	movs	r3, #43	; 0x2b
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ffa:	e02a      	b.n	8003052 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1a2      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x254>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d19d      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f89a 	bl	8003150 <SPI_EndRxTxTransaction>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d007      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8003020:	232b      	movs	r3, #43	; 0x2b
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800302e:	e010      	b.n	8003052 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	e000      	b.n	8003052 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8003050:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2251      	movs	r2, #81	; 0x51
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2250      	movs	r2, #80	; 0x50
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003062:	232b      	movs	r3, #43	; 0x2b
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b00c      	add	sp, #48	; 0x30
 800306e:	bd80      	pop	{r7, pc}

08003070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	1dfb      	adds	r3, r7, #7
 800307e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003080:	e050      	b.n	8003124 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	d04d      	beq.n	8003124 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003088:	f7fe f8ba 	bl	8001200 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d902      	bls.n	800309e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d142      	bne.n	8003124 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	21e0      	movs	r1, #224	; 0xe0
 80030aa:	438a      	bics	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	2382      	movs	r3, #130	; 0x82
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d113      	bne.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d005      	beq.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d107      	bne.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2140      	movs	r1, #64	; 0x40
 80030de:	438a      	bics	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d110      	bne.n	8003110 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4914      	ldr	r1, [pc, #80]	; (800314c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0189      	lsls	r1, r1, #6
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2251      	movs	r2, #81	; 0x51
 8003114:	2101      	movs	r1, #1
 8003116:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2250      	movs	r2, #80	; 0x50
 800311c:	2100      	movs	r1, #0
 800311e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e00f      	b.n	8003144 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	425a      	negs	r2, r3
 8003134:	4153      	adcs	r3, r2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	001a      	movs	r2, r3
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d19f      	bne.n	8003082 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}
 800314c:	ffffdfff 	.word	0xffffdfff

08003150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	2382      	movs	r3, #130	; 0x82
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	429a      	cmp	r2, r3
 8003166:	d112      	bne.n	800318e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	0013      	movs	r3, r2
 8003172:	2200      	movs	r2, #0
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	f7ff ff7b 	bl	8003070 <SPI_WaitFlagStateUntilTimeout>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d020      	beq.n	80031c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	2220      	movs	r2, #32
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e019      	b.n	80031c2 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2251      	movs	r2, #81	; 0x51
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b05      	cmp	r3, #5
 8003198:	d112      	bne.n	80031c0 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	0013      	movs	r3, r2
 80031a4:	2200      	movs	r2, #0
 80031a6:	2101      	movs	r1, #1
 80031a8:	f7ff ff62 	bl	8003070 <SPI_WaitFlagStateUntilTimeout>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d007      	beq.n	80031c0 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	2220      	movs	r2, #32
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e000      	b.n	80031c2 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b004      	add	sp, #16
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e044      	b.n	8003268 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2270      	movs	r2, #112	; 0x70
 80031ea:	2100      	movs	r1, #0
 80031ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7fd fee9 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2224      	movs	r2, #36	; 0x24
 80031fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	438a      	bics	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f8d8 	bl	80033c4 <UART_SetConfig>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e024      	b.n	8003268 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0018      	movs	r0, r3
 800322a:	f000 fbff 	bl	8003a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	490d      	ldr	r1, [pc, #52]	; (8003270 <HAL_UART_Init+0xa4>)
 800323a:	400a      	ands	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	212a      	movs	r1, #42	; 0x2a
 800324a:	438a      	bics	r2, r1
 800324c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 fc97 	bl	8003b94 <UART_CheckIdleState>
 8003266:	0003      	movs	r3, r0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}
 8003270:	ffffb7ff 	.word	0xffffb7ff

08003274 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	1dbb      	adds	r3, r7, #6
 8003282:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003288:	2b20      	cmp	r3, #32
 800328a:	d000      	beq.n	800328e <HAL_UART_Transmit+0x1a>
 800328c:	e094      	b.n	80033b8 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_UART_Transmit+0x28>
 8003294:	1dbb      	adds	r3, r7, #6
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e08c      	b.n	80033ba <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	015b      	lsls	r3, r3, #5
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d109      	bne.n	80032c0 <HAL_UART_Transmit+0x4c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2201      	movs	r2, #1
 80032b8:	4013      	ands	r3, r2
 80032ba:	d001      	beq.n	80032c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e07c      	b.n	80033ba <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2270      	movs	r2, #112	; 0x70
 80032c4:	5c9b      	ldrb	r3, [r3, r2]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Transmit+0x5a>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e075      	b.n	80033ba <HAL_UART_Transmit+0x146>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2270      	movs	r2, #112	; 0x70
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2221      	movs	r2, #33	; 0x21
 80032e0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80032e2:	f7fd ff8d 	bl	8001200 <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1dba      	adds	r2, r7, #6
 80032ee:	2150      	movs	r1, #80	; 0x50
 80032f0:	8812      	ldrh	r2, [r2, #0]
 80032f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1dba      	adds	r2, r7, #6
 80032f8:	2152      	movs	r1, #82	; 0x52
 80032fa:	8812      	ldrh	r2, [r2, #0]
 80032fc:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	015b      	lsls	r3, r3, #5
 8003306:	429a      	cmp	r2, r3
 8003308:	d108      	bne.n	800331c <HAL_UART_Transmit+0xa8>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d104      	bne.n	800331c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e003      	b.n	8003324 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003324:	e02c      	b.n	8003380 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	0013      	movs	r3, r2
 8003330:	2200      	movs	r2, #0
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	f000 fc74 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e03c      	b.n	80033ba <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	001a      	movs	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	05d2      	lsls	r2, r2, #23
 8003352:	0dd2      	lsrs	r2, r2, #23
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	3302      	adds	r3, #2
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e007      	b.n	800336e <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	3301      	adds	r3, #1
 800336c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2252      	movs	r2, #82	; 0x52
 8003372:	5a9b      	ldrh	r3, [r3, r2]
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b299      	uxth	r1, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2252      	movs	r2, #82	; 0x52
 800337e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2252      	movs	r2, #82	; 0x52
 8003384:	5a9b      	ldrh	r3, [r3, r2]
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1cc      	bne.n	8003326 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	0013      	movs	r3, r2
 8003396:	2200      	movs	r2, #0
 8003398:	2140      	movs	r1, #64	; 0x40
 800339a:	f000 fc41 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e009      	b.n	80033ba <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2270      	movs	r2, #112	; 0x70
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	b008      	add	sp, #32
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b08e      	sub	sp, #56	; 0x38
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80033cc:	231b      	movs	r3, #27
 80033ce:	2218      	movs	r2, #24
 80033d0:	4694      	mov	ip, r2
 80033d2:	44bc      	add	ip, r7
 80033d4:	4463      	add	r3, ip
 80033d6:	2210      	movs	r2, #16
 80033d8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80033de:	2313      	movs	r3, #19
 80033e0:	2218      	movs	r2, #24
 80033e2:	4694      	mov	ip, r2
 80033e4:	44bc      	add	ip, r7
 80033e6:	4463      	add	r3, ip
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	431a      	orrs	r2, r3
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4aca      	ldr	r2, [pc, #808]	; (8003738 <UART_SetConfig+0x374>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4ac5      	ldr	r2, [pc, #788]	; (800373c <UART_SetConfig+0x378>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4abf      	ldr	r2, [pc, #764]	; (8003740 <UART_SetConfig+0x37c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800344c:	4313      	orrs	r3, r2
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4abb      	ldr	r2, [pc, #748]	; (8003744 <UART_SetConfig+0x380>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4ab7      	ldr	r2, [pc, #732]	; (8003748 <UART_SetConfig+0x384>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d134      	bne.n	80034da <UART_SetConfig+0x116>
 8003470:	4bb6      	ldr	r3, [pc, #728]	; (800374c <UART_SetConfig+0x388>)
 8003472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003474:	2203      	movs	r2, #3
 8003476:	4013      	ands	r3, r2
 8003478:	2b01      	cmp	r3, #1
 800347a:	d015      	beq.n	80034a8 <UART_SetConfig+0xe4>
 800347c:	d304      	bcc.n	8003488 <UART_SetConfig+0xc4>
 800347e:	2b02      	cmp	r3, #2
 8003480:	d00a      	beq.n	8003498 <UART_SetConfig+0xd4>
 8003482:	2b03      	cmp	r3, #3
 8003484:	d018      	beq.n	80034b8 <UART_SetConfig+0xf4>
 8003486:	e01f      	b.n	80034c8 <UART_SetConfig+0x104>
 8003488:	231b      	movs	r3, #27
 800348a:	2218      	movs	r2, #24
 800348c:	4694      	mov	ip, r2
 800348e:	44bc      	add	ip, r7
 8003490:	4463      	add	r3, ip
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e0c5      	b.n	8003624 <UART_SetConfig+0x260>
 8003498:	231b      	movs	r3, #27
 800349a:	2218      	movs	r2, #24
 800349c:	4694      	mov	ip, r2
 800349e:	44bc      	add	ip, r7
 80034a0:	4463      	add	r3, ip
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e0bd      	b.n	8003624 <UART_SetConfig+0x260>
 80034a8:	231b      	movs	r3, #27
 80034aa:	2218      	movs	r2, #24
 80034ac:	4694      	mov	ip, r2
 80034ae:	44bc      	add	ip, r7
 80034b0:	4463      	add	r3, ip
 80034b2:	2204      	movs	r2, #4
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	e0b5      	b.n	8003624 <UART_SetConfig+0x260>
 80034b8:	231b      	movs	r3, #27
 80034ba:	2218      	movs	r2, #24
 80034bc:	4694      	mov	ip, r2
 80034be:	44bc      	add	ip, r7
 80034c0:	4463      	add	r3, ip
 80034c2:	2208      	movs	r2, #8
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e0ad      	b.n	8003624 <UART_SetConfig+0x260>
 80034c8:	231b      	movs	r3, #27
 80034ca:	2218      	movs	r2, #24
 80034cc:	4694      	mov	ip, r2
 80034ce:	44bc      	add	ip, r7
 80034d0:	4463      	add	r3, ip
 80034d2:	2210      	movs	r2, #16
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	e0a4      	b.n	8003624 <UART_SetConfig+0x260>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a9c      	ldr	r2, [pc, #624]	; (8003750 <UART_SetConfig+0x38c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d137      	bne.n	8003554 <UART_SetConfig+0x190>
 80034e4:	4b99      	ldr	r3, [pc, #612]	; (800374c <UART_SetConfig+0x388>)
 80034e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e8:	220c      	movs	r2, #12
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d018      	beq.n	8003522 <UART_SetConfig+0x15e>
 80034f0:	d802      	bhi.n	80034f8 <UART_SetConfig+0x134>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <UART_SetConfig+0x13e>
 80034f6:	e024      	b.n	8003542 <UART_SetConfig+0x17e>
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d00a      	beq.n	8003512 <UART_SetConfig+0x14e>
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	d018      	beq.n	8003532 <UART_SetConfig+0x16e>
 8003500:	e01f      	b.n	8003542 <UART_SetConfig+0x17e>
 8003502:	231b      	movs	r3, #27
 8003504:	2218      	movs	r2, #24
 8003506:	4694      	mov	ip, r2
 8003508:	44bc      	add	ip, r7
 800350a:	4463      	add	r3, ip
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e088      	b.n	8003624 <UART_SetConfig+0x260>
 8003512:	231b      	movs	r3, #27
 8003514:	2218      	movs	r2, #24
 8003516:	4694      	mov	ip, r2
 8003518:	44bc      	add	ip, r7
 800351a:	4463      	add	r3, ip
 800351c:	2202      	movs	r2, #2
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e080      	b.n	8003624 <UART_SetConfig+0x260>
 8003522:	231b      	movs	r3, #27
 8003524:	2218      	movs	r2, #24
 8003526:	4694      	mov	ip, r2
 8003528:	44bc      	add	ip, r7
 800352a:	4463      	add	r3, ip
 800352c:	2204      	movs	r2, #4
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e078      	b.n	8003624 <UART_SetConfig+0x260>
 8003532:	231b      	movs	r3, #27
 8003534:	2218      	movs	r2, #24
 8003536:	4694      	mov	ip, r2
 8003538:	44bc      	add	ip, r7
 800353a:	4463      	add	r3, ip
 800353c:	2208      	movs	r2, #8
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e070      	b.n	8003624 <UART_SetConfig+0x260>
 8003542:	231b      	movs	r3, #27
 8003544:	2218      	movs	r2, #24
 8003546:	4694      	mov	ip, r2
 8003548:	44bc      	add	ip, r7
 800354a:	4463      	add	r3, ip
 800354c:	2210      	movs	r2, #16
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	e067      	b.n	8003624 <UART_SetConfig+0x260>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7e      	ldr	r2, [pc, #504]	; (8003754 <UART_SetConfig+0x390>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d107      	bne.n	800356e <UART_SetConfig+0x1aa>
 800355e:	231b      	movs	r3, #27
 8003560:	2218      	movs	r2, #24
 8003562:	4694      	mov	ip, r2
 8003564:	44bc      	add	ip, r7
 8003566:	4463      	add	r3, ip
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e05a      	b.n	8003624 <UART_SetConfig+0x260>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a79      	ldr	r2, [pc, #484]	; (8003758 <UART_SetConfig+0x394>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d107      	bne.n	8003588 <UART_SetConfig+0x1c4>
 8003578:	231b      	movs	r3, #27
 800357a:	2218      	movs	r2, #24
 800357c:	4694      	mov	ip, r2
 800357e:	44bc      	add	ip, r7
 8003580:	4463      	add	r3, ip
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e04d      	b.n	8003624 <UART_SetConfig+0x260>
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6c      	ldr	r2, [pc, #432]	; (8003740 <UART_SetConfig+0x37c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d141      	bne.n	8003616 <UART_SetConfig+0x252>
 8003592:	4b6e      	ldr	r3, [pc, #440]	; (800374c <UART_SetConfig+0x388>)
 8003594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003596:	23c0      	movs	r3, #192	; 0xc0
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4013      	ands	r3, r2
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	00d2      	lsls	r2, r2, #3
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01f      	beq.n	80035e4 <UART_SetConfig+0x220>
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	00d2      	lsls	r2, r2, #3
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d802      	bhi.n	80035b2 <UART_SetConfig+0x1ee>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <UART_SetConfig+0x200>
 80035b0:	e028      	b.n	8003604 <UART_SetConfig+0x240>
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00c      	beq.n	80035d4 <UART_SetConfig+0x210>
 80035ba:	22c0      	movs	r2, #192	; 0xc0
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <UART_SetConfig+0x230>
 80035c2:	e01f      	b.n	8003604 <UART_SetConfig+0x240>
 80035c4:	231b      	movs	r3, #27
 80035c6:	2218      	movs	r2, #24
 80035c8:	4694      	mov	ip, r2
 80035ca:	44bc      	add	ip, r7
 80035cc:	4463      	add	r3, ip
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	e027      	b.n	8003624 <UART_SetConfig+0x260>
 80035d4:	231b      	movs	r3, #27
 80035d6:	2218      	movs	r2, #24
 80035d8:	4694      	mov	ip, r2
 80035da:	44bc      	add	ip, r7
 80035dc:	4463      	add	r3, ip
 80035de:	2202      	movs	r2, #2
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e01f      	b.n	8003624 <UART_SetConfig+0x260>
 80035e4:	231b      	movs	r3, #27
 80035e6:	2218      	movs	r2, #24
 80035e8:	4694      	mov	ip, r2
 80035ea:	44bc      	add	ip, r7
 80035ec:	4463      	add	r3, ip
 80035ee:	2204      	movs	r2, #4
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e017      	b.n	8003624 <UART_SetConfig+0x260>
 80035f4:	231b      	movs	r3, #27
 80035f6:	2218      	movs	r2, #24
 80035f8:	4694      	mov	ip, r2
 80035fa:	44bc      	add	ip, r7
 80035fc:	4463      	add	r3, ip
 80035fe:	2208      	movs	r2, #8
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e00f      	b.n	8003624 <UART_SetConfig+0x260>
 8003604:	231b      	movs	r3, #27
 8003606:	2218      	movs	r2, #24
 8003608:	4694      	mov	ip, r2
 800360a:	44bc      	add	ip, r7
 800360c:	4463      	add	r3, ip
 800360e:	2210      	movs	r2, #16
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	e006      	b.n	8003624 <UART_SetConfig+0x260>
 8003616:	231b      	movs	r3, #27
 8003618:	2218      	movs	r2, #24
 800361a:	4694      	mov	ip, r2
 800361c:	44bc      	add	ip, r7
 800361e:	4463      	add	r3, ip
 8003620:	2210      	movs	r2, #16
 8003622:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a45      	ldr	r2, [pc, #276]	; (8003740 <UART_SetConfig+0x37c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d000      	beq.n	8003630 <UART_SetConfig+0x26c>
 800362e:	e09d      	b.n	800376c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003630:	231b      	movs	r3, #27
 8003632:	2218      	movs	r2, #24
 8003634:	4694      	mov	ip, r2
 8003636:	44bc      	add	ip, r7
 8003638:	4463      	add	r3, ip
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d00d      	beq.n	800365c <UART_SetConfig+0x298>
 8003640:	dc02      	bgt.n	8003648 <UART_SetConfig+0x284>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <UART_SetConfig+0x28e>
 8003646:	e01d      	b.n	8003684 <UART_SetConfig+0x2c0>
 8003648:	2b04      	cmp	r3, #4
 800364a:	d012      	beq.n	8003672 <UART_SetConfig+0x2ae>
 800364c:	2b08      	cmp	r3, #8
 800364e:	d015      	beq.n	800367c <UART_SetConfig+0x2b8>
 8003650:	e018      	b.n	8003684 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003652:	f7ff f947 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8003656:	0003      	movs	r3, r0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800365a:	e01b      	b.n	8003694 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <UART_SetConfig+0x388>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2210      	movs	r2, #16
 8003662:	4013      	ands	r3, r2
 8003664:	d002      	beq.n	800366c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <UART_SetConfig+0x398>)
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800366a:	e013      	b.n	8003694 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800366c:	4b3c      	ldr	r3, [pc, #240]	; (8003760 <UART_SetConfig+0x39c>)
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003670:	e010      	b.n	8003694 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003672:	f7ff f8a9 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003676:	0003      	movs	r3, r0
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800367a:	e00b      	b.n	8003694 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003682:	e007      	b.n	8003694 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003684:	2313      	movs	r3, #19
 8003686:	2218      	movs	r2, #24
 8003688:	4694      	mov	ip, r2
 800368a:	44bc      	add	ip, r7
 800368c:	4463      	add	r3, ip
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
        break;
 8003692:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d100      	bne.n	800369c <UART_SetConfig+0x2d8>
 800369a:	e1a6      	b.n	80039ea <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	0013      	movs	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d305      	bcc.n	80036b8 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d907      	bls.n	80036c8 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80036b8:	2313      	movs	r3, #19
 80036ba:	2218      	movs	r2, #24
 80036bc:	4694      	mov	ip, r2
 80036be:	44bc      	add	ip, r7
 80036c0:	4463      	add	r3, ip
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e190      	b.n	80039ea <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	6939      	ldr	r1, [r7, #16]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	000b      	movs	r3, r1
 80036d6:	0e1b      	lsrs	r3, r3, #24
 80036d8:	0010      	movs	r0, r2
 80036da:	0205      	lsls	r5, r0, #8
 80036dc:	431d      	orrs	r5, r3
 80036de:	000b      	movs	r3, r1
 80036e0:	021c      	lsls	r4, r3, #8
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68b8      	ldr	r0, [r7, #8]
 80036f0:	68f9      	ldr	r1, [r7, #12]
 80036f2:	1900      	adds	r0, r0, r4
 80036f4:	4169      	adcs	r1, r5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	607b      	str	r3, [r7, #4]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f7fc fd8c 	bl	8000220 <__aeabi_uldivmod>
 8003708:	0003      	movs	r3, r0
 800370a:	000c      	movs	r4, r1
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <UART_SetConfig+0x3a0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d908      	bls.n	8003728 <UART_SetConfig+0x364>
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	4a13      	ldr	r2, [pc, #76]	; (8003768 <UART_SetConfig+0x3a4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d804      	bhi.n	8003728 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	e160      	b.n	80039ea <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003728:	2313      	movs	r3, #19
 800372a:	2218      	movs	r2, #24
 800372c:	4694      	mov	ip, r2
 800372e:	44bc      	add	ip, r7
 8003730:	4463      	add	r3, ip
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e158      	b.n	80039ea <UART_SetConfig+0x626>
 8003738:	efff69f3 	.word	0xefff69f3
 800373c:	ffffcfff 	.word	0xffffcfff
 8003740:	40004800 	.word	0x40004800
 8003744:	fffff4ff 	.word	0xfffff4ff
 8003748:	40013800 	.word	0x40013800
 800374c:	40021000 	.word	0x40021000
 8003750:	40004400 	.word	0x40004400
 8003754:	40004c00 	.word	0x40004c00
 8003758:	40005000 	.word	0x40005000
 800375c:	003d0900 	.word	0x003d0900
 8003760:	00f42400 	.word	0x00f42400
 8003764:	000002ff 	.word	0x000002ff
 8003768:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	429a      	cmp	r2, r3
 8003776:	d000      	beq.n	800377a <UART_SetConfig+0x3b6>
 8003778:	e0a9      	b.n	80038ce <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800377a:	231b      	movs	r3, #27
 800377c:	2218      	movs	r2, #24
 800377e:	4694      	mov	ip, r2
 8003780:	44bc      	add	ip, r7
 8003782:	4463      	add	r3, ip
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d86d      	bhi.n	8003866 <UART_SetConfig+0x4a2>
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	4b9f      	ldr	r3, [pc, #636]	; (8003a0c <UART_SetConfig+0x648>)
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003794:	f7ff f8a6 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8003798:	0003      	movs	r3, r0
 800379a:	005a      	lsls	r2, r3, #1
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	18d2      	adds	r2, r2, r3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0019      	movs	r1, r3
 80037aa:	0010      	movs	r0, r2
 80037ac:	f7fc fcac 	bl	8000108 <__udivsi3>
 80037b0:	0003      	movs	r3, r0
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037b6:	e05e      	b.n	8003876 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037b8:	f7ff f8aa 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 80037bc:	0003      	movs	r3, r0
 80037be:	005a      	lsls	r2, r3, #1
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	18d2      	adds	r2, r2, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0019      	movs	r1, r3
 80037ce:	0010      	movs	r0, r2
 80037d0:	f7fc fc9a 	bl	8000108 <__udivsi3>
 80037d4:	0003      	movs	r3, r0
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037da:	e04c      	b.n	8003876 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037dc:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <UART_SetConfig+0x64c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2210      	movs	r2, #16
 80037e2:	4013      	ands	r3, r2
 80037e4:	d00e      	beq.n	8003804 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	4a89      	ldr	r2, [pc, #548]	; (8003a14 <UART_SetConfig+0x650>)
 80037ee:	189a      	adds	r2, r3, r2
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	0019      	movs	r1, r3
 80037f6:	0010      	movs	r0, r2
 80037f8:	f7fc fc86 	bl	8000108 <__udivsi3>
 80037fc:	0003      	movs	r3, r0
 80037fe:	b29b      	uxth	r3, r3
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003802:	e038      	b.n	8003876 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	4a83      	ldr	r2, [pc, #524]	; (8003a18 <UART_SetConfig+0x654>)
 800380c:	189a      	adds	r2, r3, r2
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	0019      	movs	r1, r3
 8003814:	0010      	movs	r0, r2
 8003816:	f7fc fc77 	bl	8000108 <__udivsi3>
 800381a:	0003      	movs	r3, r0
 800381c:	b29b      	uxth	r3, r3
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003820:	e029      	b.n	8003876 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003822:	f7fe ffd1 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003826:	0003      	movs	r3, r0
 8003828:	005a      	lsls	r2, r3, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	18d2      	adds	r2, r2, r3
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0019      	movs	r1, r3
 8003838:	0010      	movs	r0, r2
 800383a:	f7fc fc65 	bl	8000108 <__udivsi3>
 800383e:	0003      	movs	r3, r0
 8003840:	b29b      	uxth	r3, r3
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003844:	e017      	b.n	8003876 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	0252      	lsls	r2, r2, #9
 8003850:	189a      	adds	r2, r3, r2
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	0019      	movs	r1, r3
 8003858:	0010      	movs	r0, r2
 800385a:	f7fc fc55 	bl	8000108 <__udivsi3>
 800385e:	0003      	movs	r3, r0
 8003860:	b29b      	uxth	r3, r3
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003864:	e007      	b.n	8003876 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003866:	2313      	movs	r3, #19
 8003868:	2218      	movs	r2, #24
 800386a:	4694      	mov	ip, r2
 800386c:	44bc      	add	ip, r7
 800386e:	4463      	add	r3, ip
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
        break;
 8003874:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d920      	bls.n	80038be <UART_SetConfig+0x4fa>
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	4a67      	ldr	r2, [pc, #412]	; (8003a1c <UART_SetConfig+0x658>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d81c      	bhi.n	80038be <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	b29a      	uxth	r2, r3
 8003888:	200a      	movs	r0, #10
 800388a:	2418      	movs	r4, #24
 800388c:	193b      	adds	r3, r7, r4
 800388e:	181b      	adds	r3, r3, r0
 8003890:	210f      	movs	r1, #15
 8003892:	438a      	bics	r2, r1
 8003894:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	b29b      	uxth	r3, r3
 800389c:	2207      	movs	r2, #7
 800389e:	4013      	ands	r3, r2
 80038a0:	b299      	uxth	r1, r3
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	181b      	adds	r3, r3, r0
 80038a6:	193a      	adds	r2, r7, r4
 80038a8:	1812      	adds	r2, r2, r0
 80038aa:	8812      	ldrh	r2, [r2, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	193a      	adds	r2, r7, r4
 80038b6:	1812      	adds	r2, r2, r0
 80038b8:	8812      	ldrh	r2, [r2, #0]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	e095      	b.n	80039ea <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80038be:	2313      	movs	r3, #19
 80038c0:	2218      	movs	r2, #24
 80038c2:	4694      	mov	ip, r2
 80038c4:	44bc      	add	ip, r7
 80038c6:	4463      	add	r3, ip
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e08d      	b.n	80039ea <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80038ce:	231b      	movs	r3, #27
 80038d0:	2218      	movs	r2, #24
 80038d2:	4694      	mov	ip, r2
 80038d4:	44bc      	add	ip, r7
 80038d6:	4463      	add	r3, ip
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d86a      	bhi.n	80039b4 <UART_SetConfig+0x5f0>
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <UART_SetConfig+0x65c>)
 80038e2:	18d3      	adds	r3, r2, r3
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038e8:	f7fe fffc 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 80038ec:	0002      	movs	r2, r0
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	18d2      	adds	r2, r2, r3
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	0019      	movs	r1, r3
 80038fc:	0010      	movs	r0, r2
 80038fe:	f7fc fc03 	bl	8000108 <__udivsi3>
 8003902:	0003      	movs	r3, r0
 8003904:	b29b      	uxth	r3, r3
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003908:	e05c      	b.n	80039c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800390a:	f7ff f801 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 800390e:	0002      	movs	r2, r0
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	18d2      	adds	r2, r2, r3
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0019      	movs	r1, r3
 800391e:	0010      	movs	r0, r2
 8003920:	f7fc fbf2 	bl	8000108 <__udivsi3>
 8003924:	0003      	movs	r3, r0
 8003926:	b29b      	uxth	r3, r3
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800392a:	e04b      	b.n	80039c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <UART_SetConfig+0x64c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2210      	movs	r2, #16
 8003932:	4013      	ands	r3, r2
 8003934:	d00e      	beq.n	8003954 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	4a39      	ldr	r2, [pc, #228]	; (8003a24 <UART_SetConfig+0x660>)
 800393e:	189a      	adds	r2, r3, r2
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0019      	movs	r1, r3
 8003946:	0010      	movs	r0, r2
 8003948:	f7fc fbde 	bl	8000108 <__udivsi3>
 800394c:	0003      	movs	r3, r0
 800394e:	b29b      	uxth	r3, r3
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003952:	e037      	b.n	80039c4 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <UART_SetConfig+0x664>)
 800395c:	189a      	adds	r2, r3, r2
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0019      	movs	r1, r3
 8003964:	0010      	movs	r0, r2
 8003966:	f7fc fbcf 	bl	8000108 <__udivsi3>
 800396a:	0003      	movs	r3, r0
 800396c:	b29b      	uxth	r3, r3
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003970:	e028      	b.n	80039c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003972:	f7fe ff29 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003976:	0002      	movs	r2, r0
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	18d2      	adds	r2, r2, r3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0019      	movs	r1, r3
 8003986:	0010      	movs	r0, r2
 8003988:	f7fc fbbe 	bl	8000108 <__udivsi3>
 800398c:	0003      	movs	r3, r0
 800398e:	b29b      	uxth	r3, r3
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003992:	e017      	b.n	80039c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	0212      	lsls	r2, r2, #8
 800399e:	189a      	adds	r2, r3, r2
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0019      	movs	r1, r3
 80039a6:	0010      	movs	r0, r2
 80039a8:	f7fc fbae 	bl	8000108 <__udivsi3>
 80039ac:	0003      	movs	r3, r0
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039b2:	e007      	b.n	80039c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80039b4:	2313      	movs	r3, #19
 80039b6:	2218      	movs	r2, #24
 80039b8:	4694      	mov	ip, r2
 80039ba:	44bc      	add	ip, r7
 80039bc:	4463      	add	r3, ip
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
        break;
 80039c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	d908      	bls.n	80039dc <UART_SetConfig+0x618>
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <UART_SetConfig+0x658>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d804      	bhi.n	80039dc <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e006      	b.n	80039ea <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80039dc:	2313      	movs	r3, #19
 80039de:	2218      	movs	r2, #24
 80039e0:	4694      	mov	ip, r2
 80039e2:	44bc      	add	ip, r7
 80039e4:	4463      	add	r3, ip
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2200      	movs	r2, #0
 80039f4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80039f6:	2313      	movs	r3, #19
 80039f8:	2218      	movs	r2, #24
 80039fa:	4694      	mov	ip, r2
 80039fc:	44bc      	add	ip, r7
 80039fe:	4463      	add	r3, ip
 8003a00:	781b      	ldrb	r3, [r3, #0]
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b00e      	add	sp, #56	; 0x38
 8003a08:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	08003d98 	.word	0x08003d98
 8003a10:	40021000 	.word	0x40021000
 8003a14:	007a1200 	.word	0x007a1200
 8003a18:	01e84800 	.word	0x01e84800
 8003a1c:	0000ffff 	.word	0x0000ffff
 8003a20:	08003dbc 	.word	0x08003dbc
 8003a24:	003d0900 	.word	0x003d0900
 8003a28:	00f42400 	.word	0x00f42400

08003a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <UART_AdvFeatureConfig+0x144>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a43      	ldr	r2, [pc, #268]	; (8003b74 <UART_AdvFeatureConfig+0x148>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <UART_AdvFeatureConfig+0x14c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4a34      	ldr	r2, [pc, #208]	; (8003b7c <UART_AdvFeatureConfig+0x150>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <UART_AdvFeatureConfig+0x154>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <UART_AdvFeatureConfig+0x158>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <UART_AdvFeatureConfig+0x15c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	035b      	lsls	r3, r3, #13
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10b      	bne.n	8003b46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <UART_AdvFeatureConfig+0x160>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <UART_AdvFeatureConfig+0x164>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	fffdffff 	.word	0xfffdffff
 8003b74:	fffeffff 	.word	0xfffeffff
 8003b78:	fffbffff 	.word	0xfffbffff
 8003b7c:	ffff7fff 	.word	0xffff7fff
 8003b80:	ffffefff 	.word	0xffffefff
 8003b84:	ffffdfff 	.word	0xffffdfff
 8003b88:	ffefffff 	.word	0xffefffff
 8003b8c:	ff9fffff 	.word	0xff9fffff
 8003b90:	fff7ffff 	.word	0xfff7ffff

08003b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ba2:	f7fd fb2d 	bl	8001200 <HAL_GetTick>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d10d      	bne.n	8003bd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	0399      	lsls	r1, r3, #14
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <UART_CheckIdleState+0x88>)
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	0013      	movs	r3, r2
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f000 f82a 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d001      	beq.n	8003bd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e01f      	b.n	8003c14 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d10d      	bne.n	8003bfe <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	03d9      	lsls	r1, r3, #15
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <UART_CheckIdleState+0x88>)
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	0013      	movs	r3, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f000 f815 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003bf6:	1e03      	subs	r3, r0, #0
 8003bf8:	d001      	beq.n	8003bfe <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e00a      	b.n	8003c14 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2270      	movs	r2, #112	; 0x70
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b004      	add	sp, #16
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	01ffffff 	.word	0x01ffffff

08003c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	1dfb      	adds	r3, r7, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	e029      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3301      	adds	r3, #1
 8003c36:	d026      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c38:	f7fd fae2 	bl	8001200 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d302      	bcc.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d11b      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4915      	ldr	r1, [pc, #84]	; (8003cb0 <UART_WaitOnFlagUntilTimeout+0x90>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	438a      	bics	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2270      	movs	r2, #112	; 0x70
 8003c7e:	2100      	movs	r1, #0
 8003c80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00f      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	425a      	negs	r2, r3
 8003c96:	4153      	adcs	r3, r2
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	1dfb      	adds	r3, r7, #7
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d0c6      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	fffffe5f 	.word	0xfffffe5f

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	2600      	movs	r6, #0
 8003cb8:	4d0c      	ldr	r5, [pc, #48]	; (8003cec <__libc_init_array+0x38>)
 8003cba:	4c0d      	ldr	r4, [pc, #52]	; (8003cf0 <__libc_init_array+0x3c>)
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	42a6      	cmp	r6, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	f000 f821 	bl	8003d0c <_init>
 8003cca:	4d0a      	ldr	r5, [pc, #40]	; (8003cf4 <__libc_init_array+0x40>)
 8003ccc:	4c0a      	ldr	r4, [pc, #40]	; (8003cf8 <__libc_init_array+0x44>)
 8003cce:	1b64      	subs	r4, r4, r5
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	42a6      	cmp	r6, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	00b3      	lsls	r3, r6, #2
 8003cda:	58eb      	ldr	r3, [r5, r3]
 8003cdc:	4798      	blx	r3
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	00b3      	lsls	r3, r6, #2
 8003ce4:	58eb      	ldr	r3, [r5, r3]
 8003ce6:	4798      	blx	r3
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	08003de8 	.word	0x08003de8
 8003cf0:	08003de8 	.word	0x08003de8
 8003cf4:	08003de8 	.word	0x08003de8
 8003cf8:	08003dec 	.word	0x08003dec

08003cfc <memset>:
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	1812      	adds	r2, r2, r0
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d100      	bne.n	8003d06 <memset+0xa>
 8003d04:	4770      	bx	lr
 8003d06:	7019      	strb	r1, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	e7f9      	b.n	8003d00 <memset+0x4>

08003d0c <_init>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr

08003d18 <_fini>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr
