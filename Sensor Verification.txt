int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  //**************************************************************************************************************
  // HAL Items
  uint8_t HAL_OK_Buffer[6] = {72, 65, 76, 32, 79, 75};								// Buffer for HAL_OK message
  uint8_t HAL_ERROR_Buffer[9] = {72, 65, 76, 32, 69, 82, 82, 79, 82};				// Buffer for HAL_ERROR message
  uint8_t HAL_BUSY_Buffer[8] = {72, 65, 76, 32, 66, 85, 83, 89};					// Buffer for HAL_BUSY message
  uint8_t HAL_TIMEOUT_Buffer[11] = {72, 65, 76, 32, 84, 73, 77, 69, 79, 85, 84};	// Buffer for HAL_TIMEOUT message
  uint8_t crlfBuffer[2] = {13, 10};													// Buffer for carriage return and line feed characters
  HAL_StatusTypeDef UART2_STATUS;													// UART2 status object
  HAL_StatusTypeDef I2C1_STATUS;													// I2C1 status object
  uint32_t timeout = 10000;															// HAL timeout value
  // End HAL Items
  //*************************************************************************************************************

  //***************************************************************************************************************
  // Begin board bring-up specific items
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);		// Enable the 5V regulator, PC5

  // AM2315 codes
  uint8_t address = 0x5C << 1;				// AM2315 I2C 7-bit address
  uint8_t readFunctionCode = 0x03;			// Read registers function code
  uint8_t writeFunctionCode = 0x10;			// Write registers function code
  uint8_t RH_HB = 0x00;						// Relative Humidity high byte address
  uint8_t RH_LB = 0x01;						// Relative Humidity low byte address
  uint8_t TEMP_HB = 0x02;					// Temperature high byte address
  uint8_t TEMP_LB = 0x03;					// Temperature low byte address
  uint8_t MODEL_HB = 0x08;					// Model number high byte address
  uint8_t MODEL_LB = 0x09;					// Model number low byte address
  uint8_t VERSION = 0x0A;				 	// Version number address
  uint8_t ID4 = 0x0B;						// ID bits 24-31
  uint8_t ID3 = 0x0C;						// ID bits 16-23
  uint8_t ID2 = 0x0D;						// ID bits 8-15
  uint8_t ID1 = 0x0E;						// ID bits 1-7
  uint8_t USERA_HB = 0x10;					// User register A, high byte address
  uint8_t USERA_LB = 0x11;					// User register A, low byte address
  uint8_t USERB_HB = 0x12;					// User register B, high byte address
  uint8_t USERB_LB = 0x13;					// User register B, low byte address

 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);

  // End board bring-up specific items
  //***************************************************************************************************************

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t TxData[3] = {readFunctionCode, RH_HB, 0x04};	// Read 4 registers starting at RH_HB
	  uint8_t RxData[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};	// Will receive 8 bytes of data, initialize with 0xFF
	  uint8_t wakeup[1] = {0};

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

	  // Delay a while before looping again
	  HAL_Delay(3000);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	  // Send dummy data to wake up the sensor
	  I2C1_STATUS = HAL_I2C_Master_Transmit(&hi2c1, address, wakeup, 1, timeout);
	  I2C1_STATUS = HAL_I2C_Master_Transmit(&hi2c1, address, wakeup, 1, timeout);

	  // Delay
	  HAL_Delay(5);

	  // Attempt to read data
	  I2C1_STATUS = HAL_I2C_Master_Transmit(&hi2c1, address, TxData, 3, timeout);
	  HAL_Delay(3);
	  I2C1_STATUS = HAL_I2C_Master_Receive(&hi2c1, address, RxData, 8, timeout);

	  uint8_t tempData[4] = {RxData[2], RxData[3], RxData[4], RxData[5]};

	  // Check if our write was successful
	  if (I2C1_STATUS == HAL_OK)
	  {
		  // Seems ok, send message out the serial port
		  //UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_OK_Buffer, sizeof(HAL_OK_Buffer), timeout);
		  //UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);

		  // Calculate the temp in Celsius and RH
		  uint16_t temp = 0;
		  temp = RxData[2] << 8;	// high byte of temperature data
		  temp = temp | RxData[3];	// low byte of temperature data
		  temp = temp/10;			// divide by 10 per AM2315 data sheet
		  temp = ((temp*9)/5) + 32;	// convert to Fahrenheit
		  char temp_message[4] = "";
		  sprintf(temp_message, "%d", temp);

		  uint16_t rh = 0;
		  rh = RxData[4] << 8;		// high byte of humidity data
		  rh = rh | RxData[5];		// low byte of humdity data
		  rh = rh/10;				// divide by 10 per AM2315 data sheet
		  char rh_message[4] = "";
		  sprintf(rh_message, "%d", rh);

		  UART2_STATUS = HAL_UART_Transmit(&huart2, temp_message, strlen(temp_message), timeout);
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);

		  UART2_STATUS = HAL_UART_Transmit(&huart2, rh_message, strlen(rh_message), timeout);
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
	  }
	  else if (I2C1_STATUS == HAL_ERROR)
	  {
		  // There was an error, send it out the serial port
		  UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_ERROR_Buffer, sizeof(HAL_ERROR_Buffer), timeout);
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
	  }
	  else if (I2C1_STATUS == HAL_BUSY)
	  {
		  // HAL is busy, send it out the serial port
		  UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_BUSY_Buffer, sizeof(HAL_BUSY_Buffer), timeout);
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
	  }
	  else if (I2C1_STATUS == HAL_TIMEOUT)
	  {
		  // There was a HAL timeout, send it out the serial port
		  UART2_STATUS = HAL_UART_Transmit(&huart2, HAL_TIMEOUT_Buffer, sizeof(HAL_TIMEOUT_Buffer), timeout);
		  UART2_STATUS = HAL_UART_Transmit(&huart2, crlfBuffer, sizeof(crlfBuffer), timeout);
	  }

	  if(UART2_STATUS == HAL_OK)
	  {
		  // do nothing, just to avoid a build warning
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}